'use client';
'use strict';

var React = require('react');
var cx = require('clsx');
var core = require('@mantine/core');
var HiddenDatesInput = require('../HiddenDatesInput/HiddenDatesInput.cjs');
var PickerInputBase_module = require('./PickerInputBase.module.css.cjs');

const defaultProps = {};
const PickerInputBase = core.factory((_props, ref) => {
  const {
    inputProps,
    wrapperProps,
    placeholder,
    classNames,
    styles,
    unstyled,
    popoverProps,
    modalProps,
    dropdownType,
    children,
    formattedValue,
    dropdownHandlers,
    dropdownOpened,
    onClick,
    clearable,
    onClear,
    clearButtonProps,
    rightSection,
    shouldClear,
    readOnly,
    disabled,
    value,
    name,
    form,
    type,
    ...others
  } = core.useInputProps("PickerInputBase", defaultProps, _props);
  const _rightSection = rightSection || (clearable && shouldClear && !readOnly && !disabled ? /* @__PURE__ */ React.createElement(
    core.CloseButton,
    {
      variant: "transparent",
      onClick: onClear,
      unstyled,
      size: inputProps.size || "sm",
      ...clearButtonProps
    }
  ) : null);
  const handleClose = () => {
    const isInvalidRangeValue = type === "range" && Array.isArray(value) && value[0] && !value[1];
    if (isInvalidRangeValue) {
      onClear();
    }
    dropdownHandlers.close();
  };
  return /* @__PURE__ */ React.createElement(React.Fragment, null, dropdownType === "modal" && !readOnly && /* @__PURE__ */ React.createElement(
    core.Modal,
    {
      opened: dropdownOpened,
      onClose: handleClose,
      withCloseButton: false,
      size: "auto",
      "data-dates-modal": true,
      unstyled,
      ...modalProps
    },
    children
  ), /* @__PURE__ */ React.createElement(core.Input.Wrapper, { ...wrapperProps }, /* @__PURE__ */ React.createElement(
    core.Popover,
    {
      position: "bottom-start",
      opened: dropdownOpened,
      onClose: handleClose,
      disabled: dropdownType === "modal" || readOnly,
      trapFocus: true,
      returnFocus: true,
      unstyled,
      ...popoverProps
    },
    /* @__PURE__ */ React.createElement(core.Popover.Target, null, /* @__PURE__ */ React.createElement(
      core.Input,
      {
        "aria-label": formattedValue || placeholder,
        "data-dates-input": true,
        "data-read-only": readOnly || void 0,
        disabled,
        component: "button",
        type: "button",
        multiline: true,
        onClick: (event) => {
          onClick?.(event);
          dropdownHandlers.toggle();
        },
        rightSection: _rightSection,
        ...inputProps,
        ref,
        classNames: { ...classNames, input: cx(PickerInputBase_module.input, classNames?.input) },
        ...others
      },
      formattedValue || /* @__PURE__ */ React.createElement(core.Input.Placeholder, { error: inputProps.error, unstyled }, placeholder)
    )),
    /* @__PURE__ */ React.createElement(core.Popover.Dropdown, { "data-dates-dropdown": true }, children)
  )), /* @__PURE__ */ React.createElement(HiddenDatesInput.HiddenDatesInput, { value, name, form, type }));
});
PickerInputBase.classes = PickerInputBase_module;
PickerInputBase.displayName = "@mantine/dates/PickerInputBase";

exports.PickerInputBase = PickerInputBase;
//# sourceMappingURL=PickerInputBase.cjs.map
