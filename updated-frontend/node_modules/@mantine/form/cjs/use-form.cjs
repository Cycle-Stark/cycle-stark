'use client';
'use strict';

var React = require('react');
var isEqual = require('fast-deep-equal');
var actions = require('./actions/actions.cjs');
var filterErrors = require('./filter-errors/filter-errors.cjs');
var getInputOnChange = require('./get-input-on-change/get-input-on-change.cjs');
var getStatus = require('./get-status/get-status.cjs');
var clearListState = require('./lists/clear-list-state.cjs');
var changeErrorIndices = require('./lists/change-error-indices.cjs');
var reorderErrors = require('./lists/reorder-errors.cjs');
var getPath = require('./paths/get-path.cjs');
var setPath = require('./paths/set-path.cjs');
var reorderPath = require('./paths/reorder-path.cjs');
var insertPath = require('./paths/insert-path.cjs');
var removePath = require('./paths/remove-path.cjs');
var validateValues = require('./validate/validate-values.cjs');
var validateFieldValue = require('./validate/validate-field-value.cjs');
var shouldValidateOnChange = require('./validate/should-validate-on-change.cjs');

function useForm({
  name,
  initialValues = {},
  initialErrors = {},
  initialDirty = {},
  initialTouched = {},
  clearInputErrorOnChange = true,
  validateInputOnChange = false,
  validateInputOnBlur = false,
  onValuesChange,
  transformValues = (values) => values,
  validate: rules
} = {}) {
  const [touched, setTouched] = React.useState(initialTouched);
  const [dirty, setDirty] = React.useState(initialDirty);
  const [values, _setValues] = React.useState(initialValues);
  const [errors, _setErrors] = React.useState(filterErrors.filterErrors(initialErrors));
  const valuesSnapshot = React.useRef(initialValues);
  const setValuesSnapshot = (_values) => {
    valuesSnapshot.current = _values;
  };
  const resetTouched = React.useCallback(() => setTouched({}), []);
  const resetDirty = (_values) => {
    const newSnapshot = _values ? { ...values, ..._values } : values;
    setValuesSnapshot(newSnapshot);
    setDirty({});
  };
  const setErrors = React.useCallback(
    (errs) => _setErrors((current) => filterErrors.filterErrors(typeof errs === "function" ? errs(current) : errs)),
    []
  );
  const clearErrors = React.useCallback(() => _setErrors({}), []);
  const reset = React.useCallback(() => {
    _setValues(valuesSnapshot.current);
    clearErrors();
    setDirty({});
    resetTouched();
  }, []);
  const setFieldError = React.useCallback(
    (path, error) => setErrors((current) => ({ ...current, [path]: error })),
    []
  );
  const clearFieldError = React.useCallback(
    (path) => setErrors((current) => {
      if (typeof path !== "string") {
        return current;
      }
      const clone = { ...current };
      delete clone[path];
      return clone;
    }),
    []
  );
  const clearFieldDirty = React.useCallback(
    (path) => setDirty((current) => {
      if (typeof path !== "string") {
        return current;
      }
      const result = clearListState.clearListState(path, current);
      delete result[path];
      return result;
    }),
    []
  );
  const setFieldValue = React.useCallback((path, value) => {
    const shouldValidate = shouldValidateOnChange.shouldValidateOnChange(path, validateInputOnChange);
    clearFieldDirty(path);
    setTouched((currentTouched) => ({ ...currentTouched, [path]: true }));
    _setValues((current) => {
      const result = setPath.setPath(path, value, current);
      if (shouldValidate) {
        const validationResults = validateFieldValue.validateFieldValue(path, rules, result);
        validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);
      }
      onValuesChange?.(result);
      return result;
    });
    !shouldValidate && clearInputErrorOnChange && setFieldError(path, null);
  }, []);
  const setValues = React.useCallback((payload) => {
    _setValues((currentValues) => {
      const valuesPartial = typeof payload === "function" ? payload(currentValues) : payload;
      const result = { ...currentValues, ...valuesPartial };
      onValuesChange?.(result);
      return result;
    });
    clearInputErrorOnChange && clearErrors();
  }, []);
  const reorderListItem = React.useCallback((path, payload) => {
    clearFieldDirty(path);
    _setValues((current) => {
      const result = reorderPath.reorderPath(path, payload, current);
      onValuesChange?.(result);
      return result;
    });
    _setErrors((errs) => reorderErrors.reorderErrors(path, payload, errs));
  }, []);
  const removeListItem = React.useCallback((path, index) => {
    clearFieldDirty(path);
    _setValues((current) => {
      const result = removePath.removePath(path, index, current);
      onValuesChange?.(result);
      return result;
    });
    _setErrors((errs) => changeErrorIndices.changeErrorIndices(path, index, errs, -1));
  }, []);
  const insertListItem = React.useCallback((path, item, index) => {
    clearFieldDirty(path);
    _setValues((current) => {
      const result = insertPath.insertPath(path, item, index, current);
      onValuesChange?.(result);
      return result;
    });
    _setErrors((errs) => changeErrorIndices.changeErrorIndices(path, index, errs, 1));
  }, []);
  const validate = React.useCallback(() => {
    const results = validateValues.validateValues(rules, values);
    _setErrors(results.errors);
    return results;
  }, [values, rules]);
  const validateField = React.useCallback(
    (path) => {
      const results = validateFieldValue.validateFieldValue(path, rules, values);
      results.hasError ? setFieldError(path, results.error) : clearFieldError(path);
      return results;
    },
    [values, rules]
  );
  const getInputProps = (path, { type = "input", withError = true, withFocus = true } = {}) => {
    const onChange = getInputOnChange.getInputOnChange((value) => setFieldValue(path, value));
    const payload = { onChange };
    if (withError) {
      payload.error = errors[path];
    }
    if (type === "checkbox") {
      payload.checked = getPath.getPath(path, values);
    } else {
      payload.value = getPath.getPath(path, values);
    }
    if (withFocus) {
      payload.onFocus = () => setTouched((current) => ({ ...current, [path]: true }));
      payload.onBlur = () => {
        if (shouldValidateOnChange.shouldValidateOnChange(path, validateInputOnBlur)) {
          const validationResults = validateFieldValue.validateFieldValue(path, rules, values);
          validationResults.hasError ? setFieldError(path, validationResults.error) : clearFieldError(path);
        }
      };
    }
    return payload;
  };
  const onSubmit = (handleSubmit, handleValidationFailure) => (event) => {
    event?.preventDefault();
    const results = validate();
    if (results.hasErrors) {
      handleValidationFailure?.(results.errors, values, event);
    } else {
      handleSubmit?.(transformValues(values), event);
    }
  };
  const getTransformedValues = (input) => transformValues(input || values);
  const onReset = React.useCallback((event) => {
    event.preventDefault();
    reset();
  }, []);
  const isDirty = (path) => {
    if (path) {
      const overriddenValue = getPath.getPath(path, dirty);
      if (typeof overriddenValue === "boolean") {
        return overriddenValue;
      }
      const sliceOfValues = getPath.getPath(path, values);
      const sliceOfInitialValues = getPath.getPath(path, valuesSnapshot.current);
      return !isEqual(sliceOfValues, sliceOfInitialValues);
    }
    const isOverridden = Object.keys(dirty).length > 0;
    if (isOverridden) {
      return getStatus.getStatus(dirty);
    }
    return !isEqual(values, valuesSnapshot.current);
  };
  const isTouched = React.useCallback(
    (path) => getStatus.getStatus(touched, path),
    [touched]
  );
  const isValid = React.useCallback(
    (path) => path ? !validateFieldValue.validateFieldValue(path, rules, values).hasError : !validateValues.validateValues(rules, values).hasErrors,
    [values, rules]
  );
  const form = {
    values,
    errors,
    setValues,
    setInitialValues: setValuesSnapshot,
    setErrors,
    setFieldValue,
    setFieldError,
    clearFieldError,
    clearErrors,
    reset,
    validate,
    validateField,
    reorderListItem,
    removeListItem,
    insertListItem,
    getInputProps,
    onSubmit,
    onReset,
    isDirty,
    isTouched,
    setTouched,
    setDirty,
    resetTouched,
    resetDirty,
    isValid,
    getTransformedValues
  };
  actions.useFormActions(name, form);
  return form;
}

exports.useForm = useForm;
//# sourceMappingURL=use-form.cjs.map
