'use client';
import React, { useState, useCallback, useEffect, Children } from 'react';
import useEmblaCarousel from 'embla-carousel-react';
import { createVarsResolver, rem, getSpacing, factory, useProps, useStyles, useRandomClassName, useDirection, UnstyledButton, Box, AccordionChevron } from '@mantine/core';
import { clamp } from '@mantine/hooks';
import { CarouselProvider } from './Carousel.context.mjs';
import { CarouselSlide } from './CarouselSlide/CarouselSlide.mjs';
import { CarouselVariables } from './CarouselVariables/CarouselVariables.mjs';
import { getChevronRotation } from './get-chevron-rotation.mjs';
import classes from './Carousel.module.css.mjs';

const defaultProps = {
  controlSize: 26,
  controlsOffset: "sm",
  slideSize: "100%",
  slideGap: 0,
  orientation: "horizontal",
  align: "center",
  slidesToScroll: 1,
  includeGapInSize: true,
  draggable: true,
  dragFree: false,
  loop: false,
  speed: 10,
  initialSlide: 0,
  inViewThreshold: 0,
  withControls: true,
  withIndicators: false,
  skipSnaps: false,
  containScroll: "",
  withKeyboardEvents: true
};
const varsResolver = createVarsResolver(
  (_, { height, controlSize, controlsOffset }) => ({
    root: {
      "--carousel-height": rem(height),
      "--carousel-control-size": rem(controlSize),
      "--carousel-controls-offset": getSpacing(controlsOffset)
    }
  })
);
const Carousel = factory((_props, ref) => {
  const props = useProps("Carousel", defaultProps, _props);
  const {
    classNames,
    className,
    style,
    styles,
    unstyled,
    vars,
    children,
    getEmblaApi,
    onNextSlide,
    onPreviousSlide,
    onSlideChange,
    nextControlProps,
    previousControlProps,
    controlSize,
    controlsOffset,
    slideSize,
    slideGap,
    orientation,
    height,
    align,
    slidesToScroll,
    includeGapInSize,
    draggable,
    dragFree,
    loop,
    speed,
    initialSlide,
    inViewThreshold,
    withControls,
    withIndicators,
    plugins,
    nextControlIcon,
    previousControlIcon,
    skipSnaps,
    containScroll,
    withKeyboardEvents,
    ...others
  } = props;
  const getStyles = useStyles({
    name: "Carousel",
    classes,
    props,
    className,
    style,
    classNames,
    styles,
    unstyled,
    vars,
    varsResolver
  });
  const responsiveClassName = useRandomClassName();
  const { dir } = useDirection();
  const [emblaRefElement, embla] = useEmblaCarousel(
    {
      axis: orientation === "horizontal" ? "x" : "y",
      direction: orientation === "horizontal" ? dir : void 0,
      startIndex: initialSlide,
      loop,
      align,
      slidesToScroll,
      draggable,
      dragFree,
      speed,
      inViewThreshold,
      skipSnaps,
      containScroll
    },
    plugins
  );
  const [selected, setSelected] = useState(0);
  const [slidesCount, setSlidesCount] = useState(0);
  const handleScroll = useCallback((index) => embla && embla.scrollTo(index), [embla]);
  const handleSelect = useCallback(() => {
    if (!embla)
      return;
    const slide = embla.selectedScrollSnap();
    setSelected(slide);
    onSlideChange?.(slide);
  }, [embla, setSelected]);
  const handlePrevious = useCallback(() => {
    embla?.scrollPrev();
    onPreviousSlide?.();
  }, [embla]);
  const handleNext = useCallback(() => {
    embla?.scrollNext();
    onNextSlide?.();
  }, [embla]);
  const handleKeydown = useCallback(
    (event) => {
      if (withKeyboardEvents) {
        if (event.key === "ArrowRight") {
          event.preventDefault();
          handleNext();
        }
        if (event.key === "ArrowLeft") {
          event.preventDefault();
          handlePrevious();
        }
      }
    },
    [embla]
  );
  useEffect(() => {
    if (embla) {
      getEmblaApi?.(embla);
      handleSelect();
      setSlidesCount(embla.scrollSnapList().length);
      embla.on("select", handleSelect);
      return () => {
        embla.off("select", handleSelect);
      };
    }
    return void 0;
  }, [embla, slidesToScroll]);
  useEffect(() => {
    if (embla) {
      embla.reInit();
      setSlidesCount(embla.scrollSnapList().length);
      setSelected(
        (currentSelected) => clamp(currentSelected, 0, Children.toArray(children).length - 1)
      );
    }
  }, [Children.toArray(children).length, slidesToScroll]);
  const canScrollPrev = embla?.canScrollPrev() || false;
  const canScrollNext = embla?.canScrollNext() || false;
  const indicators = Array(slidesCount).fill(0).map((_, index) => /* @__PURE__ */ React.createElement(
    UnstyledButton,
    {
      ...getStyles("indicator"),
      key: index,
      "data-active": index === selected || void 0,
      "aria-hidden": true,
      tabIndex: -1,
      onClick: () => handleScroll(index)
    }
  ));
  return /* @__PURE__ */ React.createElement(CarouselProvider, { value: { getStyles, orientation } }, /* @__PURE__ */ React.createElement(CarouselVariables, { ...props, selector: `.${responsiveClassName}` }), /* @__PURE__ */ React.createElement(
    Box,
    {
      ref,
      ...getStyles("root", { className: responsiveClassName }),
      ...others,
      mod: { orientation, "include-gap-in-size": includeGapInSize },
      onKeyDownCapture: handleKeydown
    },
    /* @__PURE__ */ React.createElement("div", { ...getStyles("viewport"), ref: emblaRefElement }, /* @__PURE__ */ React.createElement("div", { ...getStyles("container"), "data-orientation": orientation }, children)),
    withIndicators && /* @__PURE__ */ React.createElement("div", { ...getStyles("indicators") }, indicators),
    withControls && /* @__PURE__ */ React.createElement("div", { ...getStyles("controls") }, /* @__PURE__ */ React.createElement(
      UnstyledButton,
      {
        ...previousControlProps,
        ...getStyles("control", {
          className: previousControlProps?.className,
          style: previousControlProps?.style
        }),
        onClick: (event) => {
          handlePrevious();
          previousControlProps?.onClick?.(event);
        },
        "data-inactive": !canScrollPrev || void 0,
        tabIndex: canScrollPrev ? 0 : -1
      },
      typeof previousControlIcon !== "undefined" ? previousControlIcon : /* @__PURE__ */ React.createElement(
        AccordionChevron,
        {
          style: {
            transform: `rotate(${getChevronRotation({
              dir,
              orientation,
              direction: "previous"
            })}deg)`
          }
        }
      )
    ), /* @__PURE__ */ React.createElement(
      UnstyledButton,
      {
        ...getStyles("control", {
          className: nextControlProps?.className,
          style: nextControlProps?.style
        }),
        ...nextControlProps,
        onClick: (event) => {
          handleNext();
          nextControlProps?.onClick?.(event);
        },
        "data-inactive": !canScrollNext || void 0,
        tabIndex: canScrollNext ? 0 : -1
      },
      typeof nextControlIcon !== "undefined" ? nextControlIcon : /* @__PURE__ */ React.createElement(
        AccordionChevron,
        {
          style: {
            transform: `rotate(${getChevronRotation({
              dir,
              orientation,
              direction: "next"
            })}deg)`
          }
        }
      )
    ))
  ));
});
Carousel.classes = classes;
Carousel.displayName = "@mantine/core/Carousel";
Carousel.Slide = CarouselSlide;

export { Carousel };
//# sourceMappingURL=Carousel.mjs.map
