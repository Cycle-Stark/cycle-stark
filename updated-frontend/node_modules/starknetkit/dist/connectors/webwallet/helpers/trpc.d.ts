import type { CreateTRPCProxyClient } from "@trpc/client";
interface SetPopupOptions {
    width?: number;
    height?: number;
    origin?: string;
    location?: string;
    atLeftBottom?: boolean;
}
export declare const setPopupOptions: ({ width, height, origin, location, atLeftBottom, }: SetPopupOptions) => void;
declare const appRouter: import("@trpc/server").CreateRouterInner<import("@trpc/server").RootConfig<{
    ctx: object;
    meta: object;
    errorShape: never;
    transformer: import("@trpc/server").DefaultDataTransformer;
}>, {
    authorize: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: boolean;
        _output_out: boolean;
    }, unknown>;
    connect: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, string>;
    enable: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: string;
        _output_out: string;
    }, unknown>;
    execute: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: object;
        _input_in: [{
            contractAddress?: string;
            calldata?: (string | number | bigint)[];
            entrypoint?: string;
        } | [{
            contractAddress?: string;
            calldata?: (string | number | bigint)[];
            entrypoint?: string;
        }, ...{
            contractAddress?: string;
            calldata?: (string | number | bigint)[];
            entrypoint?: string;
        }[]], any[], {
            nonce?: string | number | bigint;
            maxFee?: string | number | bigint;
            version?: string | number | bigint;
        }, ...unknown[]];
        _input_out: [{
            contractAddress?: string;
            calldata?: (string | number | bigint)[];
            entrypoint?: string;
        } | [{
            contractAddress?: string;
            calldata?: (string | number | bigint)[];
            entrypoint?: string;
        }, ...{
            contractAddress?: string;
            calldata?: (string | number | bigint)[];
            entrypoint?: string;
        }[]], any[], {
            nonce?: string | number | bigint;
            maxFee?: string | number | bigint;
            version?: string | number | bigint;
        }, ...unknown[]];
        _output_in: string;
        _output_out: string;
    }, unknown>;
    signMessage: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: object;
        _input_in: [{
            message?: Record<string, unknown>;
            types?: Record<string, ({
                type?: string;
                name?: string;
            } | {
                type?: "merkletree";
                name?: string;
                contains?: string;
            })[]>;
            primaryType?: string;
            domain?: Record<string, unknown>;
        }, ...unknown[]];
        _input_out: [{
            message?: Record<string, unknown>;
            types?: Record<string, ({
                type?: string;
                name?: string;
            } | {
                type?: "merkletree";
                name?: string;
                contains?: string;
            })[]>;
            primaryType?: string;
            domain?: Record<string, unknown>;
        }, ...unknown[]];
        _output_in: string[];
        _output_out: string[];
    }, unknown>;
    getLoginStatus: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _meta: object;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: {
            isPreauthorized?: boolean;
            isLoggedIn?: boolean;
            hasSession?: boolean;
        };
        _output_out: {
            isPreauthorized?: boolean;
            isLoggedIn?: boolean;
            hasSession?: boolean;
        };
    }, unknown>;
    addStarknetChain: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, never>;
    switchStarknetChain: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, never>;
    watchAsset: import("@trpc/server").BuildProcedure<"mutation", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, never>;
    updateModal: import("@trpc/server").BuildProcedure<"subscription", {
        _config: import("@trpc/server").RootConfig<{
            ctx: object;
            meta: object;
            errorShape: never;
            transformer: import("@trpc/server").DefaultDataTransformer;
        }>;
        _ctx_out: object;
        _input_in: typeof import("@trpc/server").unsetMarker;
        _input_out: typeof import("@trpc/server").unsetMarker;
        _output_in: typeof import("@trpc/server").unsetMarker;
        _output_out: typeof import("@trpc/server").unsetMarker;
        _meta: object;
    }, void>;
}>;
export type AppRouter = typeof appRouter;
type TRPCProxyClientOptions = {
    iframe?: Window;
};
export declare const trpcProxyClient: ({ iframe, }: TRPCProxyClientOptions) => CreateTRPCProxyClient<AppRouter>;
export {};
