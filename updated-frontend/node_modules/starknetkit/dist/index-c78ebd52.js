var Tu = Object.defineProperty;
var $u = (i, e, t) => e in i ? Tu(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t;
var be = (i, e, t) => ($u(i, typeof e != "symbol" ? e + "" : e, t), t);
import { e as Wa, c as mt, g as Ya } from "./connector-ca2f4153.js";
import { constants as Lr, Account as Fu, Provider as Bn } from "starknet";
import { a as Uu } from "./index-68877418.js";
var sn = { exports: {} }, $i = typeof Reflect == "object" ? Reflect : null, kn = $i && typeof $i.apply == "function" ? $i.apply : function(e, t, s) {
  return Function.prototype.apply.call(e, t, s);
}, Ms;
$i && typeof $i.ownKeys == "function" ? Ms = $i.ownKeys : Object.getOwnPropertySymbols ? Ms = function(e) {
  return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e));
} : Ms = function(e) {
  return Object.getOwnPropertyNames(e);
};
function Lu(i) {
  console && console.warn && console.warn(i);
}
var Ja = Number.isNaN || function(e) {
  return e !== e;
};
function Oe() {
  Oe.init.call(this);
}
sn.exports = Oe;
sn.exports.once = zu;
Oe.EventEmitter = Oe;
Oe.prototype._events = void 0;
Oe.prototype._eventsCount = 0;
Oe.prototype._maxListeners = void 0;
var Hn = 10;
function er(i) {
  if (typeof i != "function")
    throw new TypeError('The "listener" argument must be of type Function. Received type ' + typeof i);
}
Object.defineProperty(Oe, "defaultMaxListeners", {
  enumerable: !0,
  get: function() {
    return Hn;
  },
  set: function(i) {
    if (typeof i != "number" || i < 0 || Ja(i))
      throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received ' + i + ".");
    Hn = i;
  }
});
Oe.init = function() {
  (this._events === void 0 || this._events === Object.getPrototypeOf(this)._events) && (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0), this._maxListeners = this._maxListeners || void 0;
};
Oe.prototype.setMaxListeners = function(e) {
  if (typeof e != "number" || e < 0 || Ja(e))
    throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received ' + e + ".");
  return this._maxListeners = e, this;
};
function Qa(i) {
  return i._maxListeners === void 0 ? Oe.defaultMaxListeners : i._maxListeners;
}
Oe.prototype.getMaxListeners = function() {
  return Qa(this);
};
Oe.prototype.emit = function(e) {
  for (var t = [], s = 1; s < arguments.length; s++)
    t.push(arguments[s]);
  var r = e === "error", n = this._events;
  if (n !== void 0)
    r = r && n.error === void 0;
  else if (!r)
    return !1;
  if (r) {
    var o;
    if (t.length > 0 && (o = t[0]), o instanceof Error)
      throw o;
    var c = new Error("Unhandled error." + (o ? " (" + o.message + ")" : ""));
    throw c.context = o, c;
  }
  var u = n[e];
  if (u === void 0)
    return !1;
  if (typeof u == "function")
    kn(u, this, t);
  else
    for (var d = u.length, p = ic(u, d), s = 0; s < d; ++s)
      kn(p[s], this, t);
  return !0;
};
function Xa(i, e, t, s) {
  var r, n, o;
  if (er(t), n = i._events, n === void 0 ? (n = i._events = /* @__PURE__ */ Object.create(null), i._eventsCount = 0) : (n.newListener !== void 0 && (i.emit(
    "newListener",
    e,
    t.listener ? t.listener : t
  ), n = i._events), o = n[e]), o === void 0)
    o = n[e] = t, ++i._eventsCount;
  else if (typeof o == "function" ? o = n[e] = s ? [t, o] : [o, t] : s ? o.unshift(t) : o.push(t), r = Qa(i), r > 0 && o.length > r && !o.warned) {
    o.warned = !0;
    var c = new Error("Possible EventEmitter memory leak detected. " + o.length + " " + String(e) + " listeners added. Use emitter.setMaxListeners() to increase limit");
    c.name = "MaxListenersExceededWarning", c.emitter = i, c.type = e, c.count = o.length, Lu(c);
  }
  return i;
}
Oe.prototype.addListener = function(e, t) {
  return Xa(this, e, t, !1);
};
Oe.prototype.on = Oe.prototype.addListener;
Oe.prototype.prependListener = function(e, t) {
  return Xa(this, e, t, !0);
};
function Mu() {
  if (!this.fired)
    return this.target.removeListener(this.type, this.wrapFn), this.fired = !0, arguments.length === 0 ? this.listener.call(this.target) : this.listener.apply(this.target, arguments);
}
function Za(i, e, t) {
  var s = { fired: !1, wrapFn: void 0, target: i, type: e, listener: t }, r = Mu.bind(s);
  return r.listener = t, s.wrapFn = r, r;
}
Oe.prototype.once = function(e, t) {
  return er(t), this.on(e, Za(this, e, t)), this;
};
Oe.prototype.prependOnceListener = function(e, t) {
  return er(t), this.prependListener(e, Za(this, e, t)), this;
};
Oe.prototype.removeListener = function(e, t) {
  var s, r, n, o, c;
  if (er(t), r = this._events, r === void 0)
    return this;
  if (s = r[e], s === void 0)
    return this;
  if (s === t || s.listener === t)
    --this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : (delete r[e], r.removeListener && this.emit("removeListener", e, s.listener || t));
  else if (typeof s != "function") {
    for (n = -1, o = s.length - 1; o >= 0; o--)
      if (s[o] === t || s[o].listener === t) {
        c = s[o].listener, n = o;
        break;
      }
    if (n < 0)
      return this;
    n === 0 ? s.shift() : qu(s, n), s.length === 1 && (r[e] = s[0]), r.removeListener !== void 0 && this.emit("removeListener", e, c || t);
  }
  return this;
};
Oe.prototype.off = Oe.prototype.removeListener;
Oe.prototype.removeAllListeners = function(e) {
  var t, s, r;
  if (s = this._events, s === void 0)
    return this;
  if (s.removeListener === void 0)
    return arguments.length === 0 ? (this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0) : s[e] !== void 0 && (--this._eventsCount === 0 ? this._events = /* @__PURE__ */ Object.create(null) : delete s[e]), this;
  if (arguments.length === 0) {
    var n = Object.keys(s), o;
    for (r = 0; r < n.length; ++r)
      o = n[r], o !== "removeListener" && this.removeAllListeners(o);
    return this.removeAllListeners("removeListener"), this._events = /* @__PURE__ */ Object.create(null), this._eventsCount = 0, this;
  }
  if (t = s[e], typeof t == "function")
    this.removeListener(e, t);
  else if (t !== void 0)
    for (r = t.length - 1; r >= 0; r--)
      this.removeListener(e, t[r]);
  return this;
};
function ec(i, e, t) {
  var s = i._events;
  if (s === void 0)
    return [];
  var r = s[e];
  return r === void 0 ? [] : typeof r == "function" ? t ? [r.listener || r] : [r] : t ? ju(r) : ic(r, r.length);
}
Oe.prototype.listeners = function(e) {
  return ec(this, e, !0);
};
Oe.prototype.rawListeners = function(e) {
  return ec(this, e, !1);
};
Oe.listenerCount = function(i, e) {
  return typeof i.listenerCount == "function" ? i.listenerCount(e) : tc.call(i, e);
};
Oe.prototype.listenerCount = tc;
function tc(i) {
  var e = this._events;
  if (e !== void 0) {
    var t = e[i];
    if (typeof t == "function")
      return 1;
    if (t !== void 0)
      return t.length;
  }
  return 0;
}
Oe.prototype.eventNames = function() {
  return this._eventsCount > 0 ? Ms(this._events) : [];
};
function ic(i, e) {
  for (var t = new Array(e), s = 0; s < e; ++s)
    t[s] = i[s];
  return t;
}
function qu(i, e) {
  for (; e + 1 < i.length; e++)
    i[e] = i[e + 1];
  i.pop();
}
function ju(i) {
  for (var e = new Array(i.length), t = 0; t < e.length; ++t)
    e[t] = i[t].listener || i[t];
  return e;
}
function zu(i, e) {
  return new Promise(function(t, s) {
    function r(o) {
      i.removeListener(e, n), s(o);
    }
    function n() {
      typeof i.removeListener == "function" && i.removeListener("error", r), t([].slice.call(arguments));
    }
    sc(i, e, n, { once: !0 }), e !== "error" && Ku(i, r, { once: !0 });
  });
}
function Ku(i, e, t) {
  typeof i.on == "function" && sc(i, "error", e, t);
}
function sc(i, e, t, s) {
  if (typeof i.on == "function")
    s.once ? i.once(e, t) : i.on(e, t);
  else if (typeof i.addEventListener == "function")
    i.addEventListener(e, function r(n) {
      s.once && i.removeEventListener(e, r), t(n);
    });
  else
    throw new TypeError('The "emitter" argument must be of type EventEmitter. Received type ' + typeof i);
}
var We = sn.exports;
const tr = /* @__PURE__ */ Wa(We);
var ir = {}, rc = { exports: {} };
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
(function(i) {
  var e, t, s, r, n, o, c, u, d, p, w, D, x, E, C, F, K, I, O, y, b, f, a;
  (function(l) {
    var L = typeof mt == "object" ? mt : typeof self == "object" ? self : typeof this == "object" ? this : {};
    l(v(L, v(i.exports)));
    function v(R, $) {
      return R !== L && (typeof Object.create == "function" ? Object.defineProperty(R, "__esModule", { value: !0 }) : R.__esModule = !0), function(q, m) {
        return R[q] = $ ? $(q, m) : m;
      };
    }
  })(function(l) {
    var L = Object.setPrototypeOf || { __proto__: [] } instanceof Array && function(v, R) {
      v.__proto__ = R;
    } || function(v, R) {
      for (var $ in R)
        R.hasOwnProperty($) && (v[$] = R[$]);
    };
    e = function(v, R) {
      L(v, R);
      function $() {
        this.constructor = v;
      }
      v.prototype = R === null ? Object.create(R) : ($.prototype = R.prototype, new $());
    }, t = Object.assign || function(v) {
      for (var R, $ = 1, q = arguments.length; $ < q; $++) {
        R = arguments[$];
        for (var m in R)
          Object.prototype.hasOwnProperty.call(R, m) && (v[m] = R[m]);
      }
      return v;
    }, s = function(v, R) {
      var $ = {};
      for (var q in v)
        Object.prototype.hasOwnProperty.call(v, q) && R.indexOf(q) < 0 && ($[q] = v[q]);
      if (v != null && typeof Object.getOwnPropertySymbols == "function")
        for (var m = 0, q = Object.getOwnPropertySymbols(v); m < q.length; m++)
          R.indexOf(q[m]) < 0 && Object.prototype.propertyIsEnumerable.call(v, q[m]) && ($[q[m]] = v[q[m]]);
      return $;
    }, r = function(v, R, $, q) {
      var m = arguments.length, _ = m < 3 ? R : q === null ? q = Object.getOwnPropertyDescriptor(R, $) : q, B;
      if (typeof Reflect == "object" && typeof Reflect.decorate == "function")
        _ = Reflect.decorate(v, R, $, q);
      else
        for (var z = v.length - 1; z >= 0; z--)
          (B = v[z]) && (_ = (m < 3 ? B(_) : m > 3 ? B(R, $, _) : B(R, $)) || _);
      return m > 3 && _ && Object.defineProperty(R, $, _), _;
    }, n = function(v, R) {
      return function($, q) {
        R($, q, v);
      };
    }, o = function(v, R) {
      if (typeof Reflect == "object" && typeof Reflect.metadata == "function")
        return Reflect.metadata(v, R);
    }, c = function(v, R, $, q) {
      function m(_) {
        return _ instanceof $ ? _ : new $(function(B) {
          B(_);
        });
      }
      return new ($ || ($ = Promise))(function(_, B) {
        function z(M) {
          try {
            U(q.next(M));
          } catch (H) {
            B(H);
          }
        }
        function j(M) {
          try {
            U(q.throw(M));
          } catch (H) {
            B(H);
          }
        }
        function U(M) {
          M.done ? _(M.value) : m(M.value).then(z, j);
        }
        U((q = q.apply(v, R || [])).next());
      });
    }, u = function(v, R) {
      var $ = { label: 0, sent: function() {
        if (_[0] & 1)
          throw _[1];
        return _[1];
      }, trys: [], ops: [] }, q, m, _, B;
      return B = { next: z(0), throw: z(1), return: z(2) }, typeof Symbol == "function" && (B[Symbol.iterator] = function() {
        return this;
      }), B;
      function z(U) {
        return function(M) {
          return j([U, M]);
        };
      }
      function j(U) {
        if (q)
          throw new TypeError("Generator is already executing.");
        for (; $; )
          try {
            if (q = 1, m && (_ = U[0] & 2 ? m.return : U[0] ? m.throw || ((_ = m.return) && _.call(m), 0) : m.next) && !(_ = _.call(m, U[1])).done)
              return _;
            switch (m = 0, _ && (U = [U[0] & 2, _.value]), U[0]) {
              case 0:
              case 1:
                _ = U;
                break;
              case 4:
                return $.label++, { value: U[1], done: !1 };
              case 5:
                $.label++, m = U[1], U = [0];
                continue;
              case 7:
                U = $.ops.pop(), $.trys.pop();
                continue;
              default:
                if (_ = $.trys, !(_ = _.length > 0 && _[_.length - 1]) && (U[0] === 6 || U[0] === 2)) {
                  $ = 0;
                  continue;
                }
                if (U[0] === 3 && (!_ || U[1] > _[0] && U[1] < _[3])) {
                  $.label = U[1];
                  break;
                }
                if (U[0] === 6 && $.label < _[1]) {
                  $.label = _[1], _ = U;
                  break;
                }
                if (_ && $.label < _[2]) {
                  $.label = _[2], $.ops.push(U);
                  break;
                }
                _[2] && $.ops.pop(), $.trys.pop();
                continue;
            }
            U = R.call(v, $);
          } catch (M) {
            U = [6, M], m = 0;
          } finally {
            q = _ = 0;
          }
        if (U[0] & 5)
          throw U[1];
        return { value: U[0] ? U[1] : void 0, done: !0 };
      }
    }, a = function(v, R, $, q) {
      q === void 0 && (q = $), v[q] = R[$];
    }, d = function(v, R) {
      for (var $ in v)
        $ !== "default" && !R.hasOwnProperty($) && (R[$] = v[$]);
    }, p = function(v) {
      var R = typeof Symbol == "function" && Symbol.iterator, $ = R && v[R], q = 0;
      if ($)
        return $.call(v);
      if (v && typeof v.length == "number")
        return {
          next: function() {
            return v && q >= v.length && (v = void 0), { value: v && v[q++], done: !v };
          }
        };
      throw new TypeError(R ? "Object is not iterable." : "Symbol.iterator is not defined.");
    }, w = function(v, R) {
      var $ = typeof Symbol == "function" && v[Symbol.iterator];
      if (!$)
        return v;
      var q = $.call(v), m, _ = [], B;
      try {
        for (; (R === void 0 || R-- > 0) && !(m = q.next()).done; )
          _.push(m.value);
      } catch (z) {
        B = { error: z };
      } finally {
        try {
          m && !m.done && ($ = q.return) && $.call(q);
        } finally {
          if (B)
            throw B.error;
        }
      }
      return _;
    }, D = function() {
      for (var v = [], R = 0; R < arguments.length; R++)
        v = v.concat(w(arguments[R]));
      return v;
    }, x = function() {
      for (var v = 0, R = 0, $ = arguments.length; R < $; R++)
        v += arguments[R].length;
      for (var q = Array(v), m = 0, R = 0; R < $; R++)
        for (var _ = arguments[R], B = 0, z = _.length; B < z; B++, m++)
          q[m] = _[B];
      return q;
    }, E = function(v) {
      return this instanceof E ? (this.v = v, this) : new E(v);
    }, C = function(v, R, $) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var q = $.apply(v, R || []), m, _ = [];
      return m = {}, B("next"), B("throw"), B("return"), m[Symbol.asyncIterator] = function() {
        return this;
      }, m;
      function B(te) {
        q[te] && (m[te] = function(G) {
          return new Promise(function(ie, Q) {
            _.push([te, G, ie, Q]) > 1 || z(te, G);
          });
        });
      }
      function z(te, G) {
        try {
          j(q[te](G));
        } catch (ie) {
          H(_[0][3], ie);
        }
      }
      function j(te) {
        te.value instanceof E ? Promise.resolve(te.value.v).then(U, M) : H(_[0][2], te);
      }
      function U(te) {
        z("next", te);
      }
      function M(te) {
        z("throw", te);
      }
      function H(te, G) {
        te(G), _.shift(), _.length && z(_[0][0], _[0][1]);
      }
    }, F = function(v) {
      var R, $;
      return R = {}, q("next"), q("throw", function(m) {
        throw m;
      }), q("return"), R[Symbol.iterator] = function() {
        return this;
      }, R;
      function q(m, _) {
        R[m] = v[m] ? function(B) {
          return ($ = !$) ? { value: E(v[m](B)), done: m === "return" } : _ ? _(B) : B;
        } : _;
      }
    }, K = function(v) {
      if (!Symbol.asyncIterator)
        throw new TypeError("Symbol.asyncIterator is not defined.");
      var R = v[Symbol.asyncIterator], $;
      return R ? R.call(v) : (v = typeof p == "function" ? p(v) : v[Symbol.iterator](), $ = {}, q("next"), q("throw"), q("return"), $[Symbol.asyncIterator] = function() {
        return this;
      }, $);
      function q(_) {
        $[_] = v[_] && function(B) {
          return new Promise(function(z, j) {
            B = v[_](B), m(z, j, B.done, B.value);
          });
        };
      }
      function m(_, B, z, j) {
        Promise.resolve(j).then(function(U) {
          _({ value: U, done: z });
        }, B);
      }
    }, I = function(v, R) {
      return Object.defineProperty ? Object.defineProperty(v, "raw", { value: R }) : v.raw = R, v;
    }, O = function(v) {
      if (v && v.__esModule)
        return v;
      var R = {};
      if (v != null)
        for (var $ in v)
          Object.hasOwnProperty.call(v, $) && (R[$] = v[$]);
      return R.default = v, R;
    }, y = function(v) {
      return v && v.__esModule ? v : { default: v };
    }, b = function(v, R) {
      if (!R.has(v))
        throw new TypeError("attempted to get private field on non-instance");
      return R.get(v);
    }, f = function(v, R, $) {
      if (!R.has(v))
        throw new TypeError("attempted to set private field on non-instance");
      return R.set(v, $), $;
    }, l("__extends", e), l("__assign", t), l("__rest", s), l("__decorate", r), l("__param", n), l("__metadata", o), l("__awaiter", c), l("__generator", u), l("__exportStar", d), l("__createBinding", a), l("__values", p), l("__read", w), l("__spread", D), l("__spreadArrays", x), l("__await", E), l("__asyncGenerator", C), l("__asyncDelegator", F), l("__asyncValues", K), l("__makeTemplateObject", I), l("__importStar", O), l("__importDefault", y), l("__classPrivateFieldGet", b), l("__classPrivateFieldSet", f);
  });
})(rc);
var Ft = rc.exports, fs = {};
Object.defineProperty(fs, "__esModule", { value: !0 });
function Vu(i) {
  if (typeof i != "string")
    throw new Error(`Cannot safe json parse value of type ${typeof i}`);
  try {
    return JSON.parse(i);
  } catch {
    return i;
  }
}
fs.safeJsonParse = Vu;
function Bu(i) {
  return typeof i == "string" ? i : JSON.stringify(i, (e, t) => typeof t > "u" ? null : t);
}
fs.safeJsonStringify = Bu;
var ki = { exports: {} }, Gn;
function ku() {
  return Gn || (Gn = 1, function() {
    let i;
    function e() {
    }
    i = e, i.prototype.getItem = function(t) {
      return this.hasOwnProperty(t) ? String(this[t]) : null;
    }, i.prototype.setItem = function(t, s) {
      this[t] = String(s);
    }, i.prototype.removeItem = function(t) {
      delete this[t];
    }, i.prototype.clear = function() {
      const t = this;
      Object.keys(t).forEach(function(s) {
        t[s] = void 0, delete t[s];
      });
    }, i.prototype.key = function(t) {
      return t = t || 0, Object.keys(this)[t];
    }, i.prototype.__defineGetter__("length", function() {
      return Object.keys(this).length;
    }), typeof mt < "u" && mt.localStorage ? ki.exports = mt.localStorage : typeof window < "u" && window.localStorage ? ki.exports = window.localStorage : ki.exports = new e();
  }()), ki.exports;
}
var gr = {}, Hi = {}, Wn;
function Hu() {
  if (Wn)
    return Hi;
  Wn = 1, Object.defineProperty(Hi, "__esModule", { value: !0 }), Hi.IKeyValueStorage = void 0;
  class i {
  }
  return Hi.IKeyValueStorage = i, Hi;
}
var Gi = {}, Yn;
function Gu() {
  if (Yn)
    return Gi;
  Yn = 1, Object.defineProperty(Gi, "__esModule", { value: !0 }), Gi.parseEntry = void 0;
  const i = fs;
  function e(t) {
    var s;
    return [t[0], i.safeJsonParse((s = t[1]) !== null && s !== void 0 ? s : "")];
  }
  return Gi.parseEntry = e, Gi;
}
var Jn;
function Wu() {
  return Jn || (Jn = 1, function(i) {
    Object.defineProperty(i, "__esModule", { value: !0 });
    const e = Ft;
    e.__exportStar(Hu(), i), e.__exportStar(Gu(), i);
  }(gr)), gr;
}
Object.defineProperty(ir, "__esModule", { value: !0 });
ir.KeyValueStorage = void 0;
const Ci = Ft, Qn = fs, Yu = Ci.__importDefault(ku()), Ju = Wu();
class nc {
  constructor() {
    this.localStorage = Yu.default;
  }
  getKeys() {
    return Ci.__awaiter(this, void 0, void 0, function* () {
      return Object.keys(this.localStorage);
    });
  }
  getEntries() {
    return Ci.__awaiter(this, void 0, void 0, function* () {
      return Object.entries(this.localStorage).map(Ju.parseEntry);
    });
  }
  getItem(e) {
    return Ci.__awaiter(this, void 0, void 0, function* () {
      const t = this.localStorage.getItem(e);
      if (t !== null)
        return Qn.safeJsonParse(t);
    });
  }
  setItem(e, t) {
    return Ci.__awaiter(this, void 0, void 0, function* () {
      this.localStorage.setItem(e, Qn.safeJsonStringify(t));
    });
  }
  removeItem(e) {
    return Ci.__awaiter(this, void 0, void 0, function* () {
      this.localStorage.removeItem(e);
    });
  }
}
ir.KeyValueStorage = nc;
var oc = ir.default = nc, Wt = {}, Wi = {}, V = {}, yr = {}, Yi = {}, Xn;
function Qu() {
  if (Xn)
    return Yi;
  Xn = 1, Object.defineProperty(Yi, "__esModule", { value: !0 }), Yi.delay = void 0;
  function i(e) {
    return new Promise((t) => {
      setTimeout(() => {
        t(!0);
      }, e);
    });
  }
  return Yi.delay = i, Yi;
}
var mi = {}, mr = {}, wi = {}, Zn;
function Xu() {
  return Zn || (Zn = 1, Object.defineProperty(wi, "__esModule", { value: !0 }), wi.ONE_THOUSAND = wi.ONE_HUNDRED = void 0, wi.ONE_HUNDRED = 100, wi.ONE_THOUSAND = 1e3), wi;
}
var wr = {}, eo;
function Zu() {
  return eo || (eo = 1, function(i) {
    Object.defineProperty(i, "__esModule", { value: !0 }), i.ONE_YEAR = i.FOUR_WEEKS = i.THREE_WEEKS = i.TWO_WEEKS = i.ONE_WEEK = i.THIRTY_DAYS = i.SEVEN_DAYS = i.FIVE_DAYS = i.THREE_DAYS = i.ONE_DAY = i.TWENTY_FOUR_HOURS = i.TWELVE_HOURS = i.SIX_HOURS = i.THREE_HOURS = i.ONE_HOUR = i.SIXTY_MINUTES = i.THIRTY_MINUTES = i.TEN_MINUTES = i.FIVE_MINUTES = i.ONE_MINUTE = i.SIXTY_SECONDS = i.THIRTY_SECONDS = i.TEN_SECONDS = i.FIVE_SECONDS = i.ONE_SECOND = void 0, i.ONE_SECOND = 1, i.FIVE_SECONDS = 5, i.TEN_SECONDS = 10, i.THIRTY_SECONDS = 30, i.SIXTY_SECONDS = 60, i.ONE_MINUTE = i.SIXTY_SECONDS, i.FIVE_MINUTES = i.ONE_MINUTE * 5, i.TEN_MINUTES = i.ONE_MINUTE * 10, i.THIRTY_MINUTES = i.ONE_MINUTE * 30, i.SIXTY_MINUTES = i.ONE_MINUTE * 60, i.ONE_HOUR = i.SIXTY_MINUTES, i.THREE_HOURS = i.ONE_HOUR * 3, i.SIX_HOURS = i.ONE_HOUR * 6, i.TWELVE_HOURS = i.ONE_HOUR * 12, i.TWENTY_FOUR_HOURS = i.ONE_HOUR * 24, i.ONE_DAY = i.TWENTY_FOUR_HOURS, i.THREE_DAYS = i.ONE_DAY * 3, i.FIVE_DAYS = i.ONE_DAY * 5, i.SEVEN_DAYS = i.ONE_DAY * 7, i.THIRTY_DAYS = i.ONE_DAY * 30, i.ONE_WEEK = i.SEVEN_DAYS, i.TWO_WEEKS = i.ONE_WEEK * 2, i.THREE_WEEKS = i.ONE_WEEK * 3, i.FOUR_WEEKS = i.ONE_WEEK * 4, i.ONE_YEAR = i.ONE_DAY * 365;
  }(wr)), wr;
}
var to;
function ac() {
  return to || (to = 1, function(i) {
    Object.defineProperty(i, "__esModule", { value: !0 });
    const e = Ft;
    e.__exportStar(Xu(), i), e.__exportStar(Zu(), i);
  }(mr)), mr;
}
var io;
function el() {
  if (io)
    return mi;
  io = 1, Object.defineProperty(mi, "__esModule", { value: !0 }), mi.fromMiliseconds = mi.toMiliseconds = void 0;
  const i = ac();
  function e(s) {
    return s * i.ONE_THOUSAND;
  }
  mi.toMiliseconds = e;
  function t(s) {
    return Math.floor(s / i.ONE_THOUSAND);
  }
  return mi.fromMiliseconds = t, mi;
}
var so;
function tl() {
  return so || (so = 1, function(i) {
    Object.defineProperty(i, "__esModule", { value: !0 });
    const e = Ft;
    e.__exportStar(Qu(), i), e.__exportStar(el(), i);
  }(yr)), yr;
}
var Ri = {}, ro;
function il() {
  if (ro)
    return Ri;
  ro = 1, Object.defineProperty(Ri, "__esModule", { value: !0 }), Ri.Watch = void 0;
  class i {
    constructor() {
      this.timestamps = /* @__PURE__ */ new Map();
    }
    start(t) {
      if (this.timestamps.has(t))
        throw new Error(`Watch already started for label: ${t}`);
      this.timestamps.set(t, { started: Date.now() });
    }
    stop(t) {
      const s = this.get(t);
      if (typeof s.elapsed < "u")
        throw new Error(`Watch already stopped for label: ${t}`);
      const r = Date.now() - s.started;
      this.timestamps.set(t, { started: s.started, elapsed: r });
    }
    get(t) {
      const s = this.timestamps.get(t);
      if (typeof s > "u")
        throw new Error(`No timestamp found for label: ${t}`);
      return s;
    }
    elapsed(t) {
      const s = this.get(t);
      return s.elapsed || Date.now() - s.started;
    }
  }
  return Ri.Watch = i, Ri.default = i, Ri;
}
var br = {}, Ji = {}, no;
function sl() {
  if (no)
    return Ji;
  no = 1, Object.defineProperty(Ji, "__esModule", { value: !0 }), Ji.IWatch = void 0;
  class i {
  }
  return Ji.IWatch = i, Ji;
}
var oo;
function rl() {
  return oo || (oo = 1, function(i) {
    Object.defineProperty(i, "__esModule", { value: !0 }), Ft.__exportStar(sl(), i);
  }(br)), br;
}
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 });
  const e = Ft;
  e.__exportStar(tl(), i), e.__exportStar(il(), i), e.__exportStar(rl(), i), e.__exportStar(ac(), i);
})(V);
var vr = {}, Qi = {};
let Nt = class {
};
const nl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  IEvents: Nt
}, Symbol.toStringTag, { value: "Module" })), ol = /* @__PURE__ */ Ya(nl);
var ao;
function al() {
  if (ao)
    return Qi;
  ao = 1, Object.defineProperty(Qi, "__esModule", { value: !0 }), Qi.IHeartBeat = void 0;
  const i = ol;
  class e extends i.IEvents {
    constructor(s) {
      super();
    }
  }
  return Qi.IHeartBeat = e, Qi;
}
var co;
function cc() {
  return co || (co = 1, function(i) {
    Object.defineProperty(i, "__esModule", { value: !0 }), Ft.__exportStar(al(), i);
  }(vr)), vr;
}
var _r = {}, bi = {}, ho;
function cl() {
  if (ho)
    return bi;
  ho = 1, Object.defineProperty(bi, "__esModule", { value: !0 }), bi.HEARTBEAT_EVENTS = bi.HEARTBEAT_INTERVAL = void 0;
  const i = V;
  return bi.HEARTBEAT_INTERVAL = i.FIVE_SECONDS, bi.HEARTBEAT_EVENTS = {
    pulse: "heartbeat_pulse"
  }, bi;
}
var uo;
function hc() {
  return uo || (uo = 1, function(i) {
    Object.defineProperty(i, "__esModule", { value: !0 }), Ft.__exportStar(cl(), i);
  }(_r)), _r;
}
var lo;
function hl() {
  if (lo)
    return Wi;
  lo = 1, Object.defineProperty(Wi, "__esModule", { value: !0 }), Wi.HeartBeat = void 0;
  const i = Ft, e = We, t = V, s = cc(), r = hc();
  class n extends s.IHeartBeat {
    constructor(c) {
      super(c), this.events = new e.EventEmitter(), this.interval = r.HEARTBEAT_INTERVAL, this.interval = c?.interval || r.HEARTBEAT_INTERVAL;
    }
    static init(c) {
      return i.__awaiter(this, void 0, void 0, function* () {
        const u = new n(c);
        return yield u.init(), u;
      });
    }
    init() {
      return i.__awaiter(this, void 0, void 0, function* () {
        yield this.initialize();
      });
    }
    stop() {
      clearInterval(this.intervalRef);
    }
    on(c, u) {
      this.events.on(c, u);
    }
    once(c, u) {
      this.events.once(c, u);
    }
    off(c, u) {
      this.events.off(c, u);
    }
    removeListener(c, u) {
      this.events.removeListener(c, u);
    }
    initialize() {
      return i.__awaiter(this, void 0, void 0, function* () {
        this.intervalRef = setInterval(() => this.pulse(), t.toMiliseconds(this.interval));
      });
    }
    pulse() {
      this.events.emit(r.HEARTBEAT_EVENTS.pulse);
    }
  }
  return Wi.HeartBeat = n, Wi;
}
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 });
  const e = Ft;
  e.__exportStar(hl(), i), e.__exportStar(cc(), i), e.__exportStar(hc(), i);
})(Wt);
var ee = {}, Er, fo;
function ul() {
  if (fo)
    return Er;
  fo = 1;
  function i(t) {
    try {
      return JSON.stringify(t);
    } catch {
      return '"[Circular]"';
    }
  }
  Er = e;
  function e(t, s, r) {
    var n = r && r.stringify || i, o = 1;
    if (typeof t == "object" && t !== null) {
      var c = s.length + o;
      if (c === 1)
        return t;
      var u = new Array(c);
      u[0] = n(t);
      for (var d = 1; d < c; d++)
        u[d] = n(s[d]);
      return u.join(" ");
    }
    if (typeof t != "string")
      return t;
    var p = s.length;
    if (p === 0)
      return t;
    for (var w = "", D = 1 - o, x = -1, E = t && t.length || 0, C = 0; C < E; ) {
      if (t.charCodeAt(C) === 37 && C + 1 < E) {
        switch (x = x > -1 ? x : 0, t.charCodeAt(C + 1)) {
          case 100:
          case 102:
            if (D >= p || s[D] == null)
              break;
            x < C && (w += t.slice(x, C)), w += Number(s[D]), x = C + 2, C++;
            break;
          case 105:
            if (D >= p || s[D] == null)
              break;
            x < C && (w += t.slice(x, C)), w += Math.floor(Number(s[D])), x = C + 2, C++;
            break;
          case 79:
          case 111:
          case 106:
            if (D >= p || s[D] === void 0)
              break;
            x < C && (w += t.slice(x, C));
            var F = typeof s[D];
            if (F === "string") {
              w += "'" + s[D] + "'", x = C + 2, C++;
              break;
            }
            if (F === "function") {
              w += s[D].name || "<anonymous>", x = C + 2, C++;
              break;
            }
            w += n(s[D]), x = C + 2, C++;
            break;
          case 115:
            if (D >= p)
              break;
            x < C && (w += t.slice(x, C)), w += String(s[D]), x = C + 2, C++;
            break;
          case 37:
            x < C && (w += t.slice(x, C)), w += "%", x = C + 2, C++, D--;
            break;
        }
        ++D;
      }
      ++C;
    }
    return x === -1 ? t : (x < E && (w += t.slice(x)), w);
  }
  return Er;
}
var Sr, po;
function ll() {
  if (po)
    return Sr;
  po = 1;
  const i = ul();
  Sr = r;
  const e = b().console || {}, t = {
    mapHttpRequest: E,
    mapHttpResponse: E,
    wrapRequestSerializer: C,
    wrapResponseSerializer: C,
    wrapErrorSerializer: C,
    req: E,
    res: E,
    err: D
  };
  function s(f, a) {
    return Array.isArray(f) ? f.filter(function(L) {
      return L !== "!stdSerializers.err";
    }) : f === !0 ? Object.keys(a) : !1;
  }
  function r(f) {
    f = f || {}, f.browser = f.browser || {};
    const a = f.browser.transmit;
    if (a && typeof a.send != "function")
      throw Error("pino: transmit option must have a send function");
    const l = f.browser.write || e;
    f.browser.write && (f.browser.asObject = !0);
    const L = f.serializers || {}, v = s(f.browser.serialize, L);
    let R = f.browser.serialize;
    Array.isArray(f.browser.serialize) && f.browser.serialize.indexOf("!stdSerializers.err") > -1 && (R = !1);
    const $ = ["error", "fatal", "warn", "info", "debug", "trace"];
    typeof l == "function" && (l.error = l.fatal = l.warn = l.info = l.debug = l.trace = l), f.enabled === !1 && (f.level = "silent");
    const q = f.level || "info", m = Object.create(l);
    m.log || (m.log = F), Object.defineProperty(m, "levelVal", {
      get: B
    }), Object.defineProperty(m, "level", {
      get: z,
      set: j
    });
    const _ = {
      transmit: a,
      serialize: v,
      asObject: f.browser.asObject,
      levels: $,
      timestamp: x(f)
    };
    m.levels = r.levels, m.level = q, m.setMaxListeners = m.getMaxListeners = m.emit = m.addListener = m.on = m.prependListener = m.once = m.prependOnceListener = m.removeListener = m.removeAllListeners = m.listeners = m.listenerCount = m.eventNames = m.write = m.flush = F, m.serializers = L, m._serialize = v, m._stdErrSerialize = R, m.child = U, a && (m._logEvent = w());
    function B() {
      return this.level === "silent" ? 1 / 0 : this.levels.values[this.level];
    }
    function z() {
      return this._level;
    }
    function j(M) {
      if (M !== "silent" && !this.levels.values[M])
        throw Error("unknown level " + M);
      this._level = M, n(_, m, "error", "log"), n(_, m, "fatal", "error"), n(_, m, "warn", "error"), n(_, m, "info", "log"), n(_, m, "debug", "log"), n(_, m, "trace", "log");
    }
    function U(M, H) {
      if (!M)
        throw new Error("missing bindings for child Pino");
      H = H || {}, v && M.serializers && (H.serializers = M.serializers);
      const te = H.serializers;
      if (v && te) {
        var G = Object.assign({}, L, te), ie = f.browser.serialize === !0 ? Object.keys(G) : v;
        delete M.serializers, u([M], ie, G, this._stdErrSerialize);
      }
      function Q(se) {
        this._childLevel = (se._childLevel | 0) + 1, this.error = d(se, M, "error"), this.fatal = d(se, M, "fatal"), this.warn = d(se, M, "warn"), this.info = d(se, M, "info"), this.debug = d(se, M, "debug"), this.trace = d(se, M, "trace"), G && (this.serializers = G, this._serialize = ie), a && (this._logEvent = w(
          [].concat(se._logEvent.bindings, M)
        ));
      }
      return Q.prototype = this, new Q(this);
    }
    return m;
  }
  r.levels = {
    values: {
      fatal: 60,
      error: 50,
      warn: 40,
      info: 30,
      debug: 20,
      trace: 10
    },
    labels: {
      10: "trace",
      20: "debug",
      30: "info",
      40: "warn",
      50: "error",
      60: "fatal"
    }
  }, r.stdSerializers = t, r.stdTimeFunctions = Object.assign({}, { nullTime: K, epochTime: I, unixTime: O, isoTime: y });
  function n(f, a, l, L) {
    const v = Object.getPrototypeOf(a);
    a[l] = a.levelVal > a.levels.values[l] ? F : v[l] ? v[l] : e[l] || e[L] || F, o(f, a, l);
  }
  function o(f, a, l) {
    !f.transmit && a[l] === F || (a[l] = function(L) {
      return function() {
        const R = f.timestamp(), $ = new Array(arguments.length), q = Object.getPrototypeOf && Object.getPrototypeOf(this) === e ? e : this;
        for (var m = 0; m < $.length; m++)
          $[m] = arguments[m];
        if (f.serialize && !f.asObject && u($, this._serialize, this.serializers, this._stdErrSerialize), f.asObject ? L.call(q, c(this, l, $, R)) : L.apply(q, $), f.transmit) {
          const _ = f.transmit.level || a.level, B = r.levels.values[_], z = r.levels.values[l];
          if (z < B)
            return;
          p(this, {
            ts: R,
            methodLevel: l,
            methodValue: z,
            transmitLevel: _,
            transmitValue: r.levels.values[f.transmit.level || a.level],
            send: f.transmit.send,
            val: a.levelVal
          }, $);
        }
      };
    }(a[l]));
  }
  function c(f, a, l, L) {
    f._serialize && u(l, f._serialize, f.serializers, f._stdErrSerialize);
    const v = l.slice();
    let R = v[0];
    const $ = {};
    L && ($.time = L), $.level = r.levels.values[a];
    let q = (f._childLevel | 0) + 1;
    if (q < 1 && (q = 1), R !== null && typeof R == "object") {
      for (; q-- && typeof v[0] == "object"; )
        Object.assign($, v.shift());
      R = v.length ? i(v.shift(), v) : void 0;
    } else
      typeof R == "string" && (R = i(v.shift(), v));
    return R !== void 0 && ($.msg = R), $;
  }
  function u(f, a, l, L) {
    for (const v in f)
      if (L && f[v] instanceof Error)
        f[v] = r.stdSerializers.err(f[v]);
      else if (typeof f[v] == "object" && !Array.isArray(f[v]))
        for (const R in f[v])
          a && a.indexOf(R) > -1 && R in l && (f[v][R] = l[R](f[v][R]));
  }
  function d(f, a, l) {
    return function() {
      const L = new Array(1 + arguments.length);
      L[0] = a;
      for (var v = 1; v < L.length; v++)
        L[v] = arguments[v - 1];
      return f[l].apply(this, L);
    };
  }
  function p(f, a, l) {
    const L = a.send, v = a.ts, R = a.methodLevel, $ = a.methodValue, q = a.val, m = f._logEvent.bindings;
    u(
      l,
      f._serialize || Object.keys(f.serializers),
      f.serializers,
      f._stdErrSerialize === void 0 ? !0 : f._stdErrSerialize
    ), f._logEvent.ts = v, f._logEvent.messages = l.filter(function(_) {
      return m.indexOf(_) === -1;
    }), f._logEvent.level.label = R, f._logEvent.level.value = $, L(R, f._logEvent, q), f._logEvent = w(m);
  }
  function w(f) {
    return {
      ts: 0,
      messages: [],
      bindings: f || [],
      level: { label: "", value: 0 }
    };
  }
  function D(f) {
    const a = {
      type: f.constructor.name,
      msg: f.message,
      stack: f.stack
    };
    for (const l in f)
      a[l] === void 0 && (a[l] = f[l]);
    return a;
  }
  function x(f) {
    return typeof f.timestamp == "function" ? f.timestamp : f.timestamp === !1 ? K : I;
  }
  function E() {
    return {};
  }
  function C(f) {
    return f;
  }
  function F() {
  }
  function K() {
    return !1;
  }
  function I() {
    return Date.now();
  }
  function O() {
    return Math.round(Date.now() / 1e3);
  }
  function y() {
    return new Date(Date.now()).toISOString();
  }
  function b() {
    function f(a) {
      return typeof a < "u" && a;
    }
    try {
      return typeof globalThis < "u" || Object.defineProperty(Object.prototype, "globalThis", {
        get: function() {
          return delete Object.prototype.globalThis, this.globalThis = this;
        },
        configurable: !0
      }), globalThis;
    } catch {
      return f(self) || f(window) || f(this) || {};
    }
  }
  return Sr;
}
var vi = {}, go;
function uc() {
  return go || (go = 1, Object.defineProperty(vi, "__esModule", { value: !0 }), vi.PINO_CUSTOM_CONTEXT_KEY = vi.PINO_LOGGER_DEFAULTS = void 0, vi.PINO_LOGGER_DEFAULTS = {
    level: "info"
  }, vi.PINO_CUSTOM_CONTEXT_KEY = "custom_context"), vi;
}
var yt = {}, yo;
function dl() {
  if (yo)
    return yt;
  yo = 1, Object.defineProperty(yt, "__esModule", { value: !0 }), yt.generateChildLogger = yt.formatChildLoggerContext = yt.getLoggerContext = yt.setBrowserLoggerContext = yt.getBrowserLoggerContext = yt.getDefaultLoggerOptions = void 0;
  const i = uc();
  function e(c) {
    return Object.assign(Object.assign({}, c), { level: c?.level || i.PINO_LOGGER_DEFAULTS.level });
  }
  yt.getDefaultLoggerOptions = e;
  function t(c, u = i.PINO_CUSTOM_CONTEXT_KEY) {
    return c[u] || "";
  }
  yt.getBrowserLoggerContext = t;
  function s(c, u, d = i.PINO_CUSTOM_CONTEXT_KEY) {
    return c[d] = u, c;
  }
  yt.setBrowserLoggerContext = s;
  function r(c, u = i.PINO_CUSTOM_CONTEXT_KEY) {
    let d = "";
    return typeof c.bindings > "u" ? d = t(c, u) : d = c.bindings().context || "", d;
  }
  yt.getLoggerContext = r;
  function n(c, u, d = i.PINO_CUSTOM_CONTEXT_KEY) {
    const p = r(c, d);
    return p.trim() ? `${p}/${u}` : u;
  }
  yt.formatChildLoggerContext = n;
  function o(c, u, d = i.PINO_CUSTOM_CONTEXT_KEY) {
    const p = n(c, u, d), w = c.child({ context: p });
    return s(w, p, d);
  }
  return yt.generateChildLogger = o, yt;
}
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 }), i.pino = void 0;
  const e = Ft, t = e.__importDefault(ll());
  Object.defineProperty(i, "pino", { enumerable: !0, get: function() {
    return t.default;
  } }), e.__exportStar(uc(), i), e.__exportStar(dl(), i);
})(ee);
let fl = class extends Nt {
  constructor(e) {
    super(), this.opts = e, this.protocol = "wc", this.version = 2;
  }
}, pl = class extends Nt {
  constructor(e, t) {
    super(), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map();
  }
}, gl = class {
  constructor(e, t) {
    this.logger = e, this.core = t;
  }
}, yl = class extends Nt {
  constructor(e, t) {
    super(), this.relayer = e, this.logger = t;
  }
}, ml = class extends Nt {
  constructor(e) {
    super();
  }
}, wl = class {
  constructor(e, t, s, r) {
    this.core = e, this.logger = t, this.name = s;
  }
}, bl = class extends Nt {
  constructor(e, t) {
    super(), this.relayer = e, this.logger = t;
  }
}, vl = class extends Nt {
  constructor(e, t) {
    super(), this.core = e, this.logger = t;
  }
}, _l = class {
  constructor(e, t) {
    this.projectId = e, this.logger = t;
  }
}, El = class {
  constructor(e) {
    this.opts = e, this.protocol = "wc", this.version = 2;
  }
}, Sl = class {
  constructor(e) {
    this.client = e;
  }
};
const Il = (i) => JSON.stringify(i, (e, t) => typeof t == "bigint" ? t.toString() + "n" : t), Dl = (i) => {
  const e = /([\[:])?(\d{17,}|(?:[9](?:[1-9]07199254740991|0[1-9]7199254740991|00[8-9]199254740991|007[2-9]99254740991|007199[3-9]54740991|0071992[6-9]4740991|00719925[5-9]740991|007199254[8-9]40991|0071992547[5-9]0991|00719925474[1-9]991|00719925474099[2-9])))([,\}\]])/g, t = i.replace(e, '$1"$2n"$3');
  return JSON.parse(t, (s, r) => typeof r == "string" && r.match(/^\d+n$/) ? BigInt(r.substring(0, r.length - 1)) : r);
};
function rn(i) {
  if (typeof i != "string")
    throw new Error(`Cannot safe json parse value of type ${typeof i}`);
  try {
    return Dl(i);
  } catch {
    return i;
  }
}
function sr(i) {
  return typeof i == "string" ? i : Il(i) || "";
}
var nn = {}, li = {}, rr = {}, nr = {};
Object.defineProperty(nr, "__esModule", { value: !0 });
nr.BrowserRandomSource = void 0;
const mo = 65536;
class xl {
  constructor() {
    this.isAvailable = !1, this.isInstantiated = !1;
    const e = typeof self < "u" ? self.crypto || self.msCrypto : null;
    e && e.getRandomValues !== void 0 && (this._crypto = e, this.isAvailable = !0, this.isInstantiated = !0);
  }
  randomBytes(e) {
    if (!this.isAvailable || !this._crypto)
      throw new Error("Browser random byte generator is not available.");
    const t = new Uint8Array(e);
    for (let s = 0; s < t.length; s += mo)
      this._crypto.getRandomValues(t.subarray(s, s + Math.min(t.length - s, mo)));
    return t;
  }
}
nr.BrowserRandomSource = xl;
function Ol(i) {
  throw new Error('Could not dynamically require "' + i + '". Please configure the dynamicRequireTargets or/and ignoreDynamicRequires option of @rollup/plugin-commonjs appropriately for this require call to work.');
}
var or = {}, Pt = {};
Object.defineProperty(Pt, "__esModule", { value: !0 });
function Nl(i) {
  for (var e = 0; e < i.length; e++)
    i[e] = 0;
  return i;
}
Pt.wipe = Nl;
const Pl = {}, Rl = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  default: Pl
}, Symbol.toStringTag, { value: "Module" })), Cl = /* @__PURE__ */ Ya(Rl);
Object.defineProperty(or, "__esModule", { value: !0 });
or.NodeRandomSource = void 0;
const Al = Pt;
class Tl {
  constructor() {
    if (this.isAvailable = !1, this.isInstantiated = !1, typeof Ol < "u") {
      const e = Cl;
      e && e.randomBytes && (this._crypto = e, this.isAvailable = !0, this.isInstantiated = !0);
    }
  }
  randomBytes(e) {
    if (!this.isAvailable || !this._crypto)
      throw new Error("Node.js random byte generator is not available.");
    let t = this._crypto.randomBytes(e);
    if (t.length !== e)
      throw new Error("NodeRandomSource: got fewer bytes than requested");
    const s = new Uint8Array(e);
    for (let r = 0; r < s.length; r++)
      s[r] = t[r];
    return (0, Al.wipe)(t), s;
  }
}
or.NodeRandomSource = Tl;
Object.defineProperty(rr, "__esModule", { value: !0 });
rr.SystemRandomSource = void 0;
const $l = nr, Fl = or;
class Ul {
  constructor() {
    if (this.isAvailable = !1, this.name = "", this._source = new $l.BrowserRandomSource(), this._source.isAvailable) {
      this.isAvailable = !0, this.name = "Browser";
      return;
    }
    if (this._source = new Fl.NodeRandomSource(), this._source.isAvailable) {
      this.isAvailable = !0, this.name = "Node";
      return;
    }
  }
  randomBytes(e) {
    if (!this.isAvailable)
      throw new Error("System random byte generator is not available.");
    return this._source.randomBytes(e);
  }
}
rr.SystemRandomSource = Ul;
var oe = {}, lc = {};
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 });
  function e(c, u) {
    var d = c >>> 16 & 65535, p = c & 65535, w = u >>> 16 & 65535, D = u & 65535;
    return p * D + (d * D + p * w << 16 >>> 0) | 0;
  }
  i.mul = Math.imul || e;
  function t(c, u) {
    return c + u | 0;
  }
  i.add = t;
  function s(c, u) {
    return c - u | 0;
  }
  i.sub = s;
  function r(c, u) {
    return c << u | c >>> 32 - u;
  }
  i.rotl = r;
  function n(c, u) {
    return c << 32 - u | c >>> u;
  }
  i.rotr = n;
  function o(c) {
    return typeof c == "number" && isFinite(c) && Math.floor(c) === c;
  }
  i.isInteger = Number.isInteger || o, i.MAX_SAFE_INTEGER = 9007199254740991, i.isSafeInteger = function(c) {
    return i.isInteger(c) && c >= -i.MAX_SAFE_INTEGER && c <= i.MAX_SAFE_INTEGER;
  };
})(lc);
Object.defineProperty(oe, "__esModule", { value: !0 });
var dc = lc;
function Ll(i, e) {
  return e === void 0 && (e = 0), (i[e + 0] << 8 | i[e + 1]) << 16 >> 16;
}
oe.readInt16BE = Ll;
function Ml(i, e) {
  return e === void 0 && (e = 0), (i[e + 0] << 8 | i[e + 1]) >>> 0;
}
oe.readUint16BE = Ml;
function ql(i, e) {
  return e === void 0 && (e = 0), (i[e + 1] << 8 | i[e]) << 16 >> 16;
}
oe.readInt16LE = ql;
function jl(i, e) {
  return e === void 0 && (e = 0), (i[e + 1] << 8 | i[e]) >>> 0;
}
oe.readUint16LE = jl;
function fc(i, e, t) {
  return e === void 0 && (e = new Uint8Array(2)), t === void 0 && (t = 0), e[t + 0] = i >>> 8, e[t + 1] = i >>> 0, e;
}
oe.writeUint16BE = fc;
oe.writeInt16BE = fc;
function pc(i, e, t) {
  return e === void 0 && (e = new Uint8Array(2)), t === void 0 && (t = 0), e[t + 0] = i >>> 0, e[t + 1] = i >>> 8, e;
}
oe.writeUint16LE = pc;
oe.writeInt16LE = pc;
function Mr(i, e) {
  return e === void 0 && (e = 0), i[e] << 24 | i[e + 1] << 16 | i[e + 2] << 8 | i[e + 3];
}
oe.readInt32BE = Mr;
function qr(i, e) {
  return e === void 0 && (e = 0), (i[e] << 24 | i[e + 1] << 16 | i[e + 2] << 8 | i[e + 3]) >>> 0;
}
oe.readUint32BE = qr;
function jr(i, e) {
  return e === void 0 && (e = 0), i[e + 3] << 24 | i[e + 2] << 16 | i[e + 1] << 8 | i[e];
}
oe.readInt32LE = jr;
function zr(i, e) {
  return e === void 0 && (e = 0), (i[e + 3] << 24 | i[e + 2] << 16 | i[e + 1] << 8 | i[e]) >>> 0;
}
oe.readUint32LE = zr;
function Bs(i, e, t) {
  return e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0), e[t + 0] = i >>> 24, e[t + 1] = i >>> 16, e[t + 2] = i >>> 8, e[t + 3] = i >>> 0, e;
}
oe.writeUint32BE = Bs;
oe.writeInt32BE = Bs;
function ks(i, e, t) {
  return e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0), e[t + 0] = i >>> 0, e[t + 1] = i >>> 8, e[t + 2] = i >>> 16, e[t + 3] = i >>> 24, e;
}
oe.writeUint32LE = ks;
oe.writeInt32LE = ks;
function zl(i, e) {
  e === void 0 && (e = 0);
  var t = Mr(i, e), s = Mr(i, e + 4);
  return t * 4294967296 + s - (s >> 31) * 4294967296;
}
oe.readInt64BE = zl;
function Kl(i, e) {
  e === void 0 && (e = 0);
  var t = qr(i, e), s = qr(i, e + 4);
  return t * 4294967296 + s;
}
oe.readUint64BE = Kl;
function Vl(i, e) {
  e === void 0 && (e = 0);
  var t = jr(i, e), s = jr(i, e + 4);
  return s * 4294967296 + t - (t >> 31) * 4294967296;
}
oe.readInt64LE = Vl;
function Bl(i, e) {
  e === void 0 && (e = 0);
  var t = zr(i, e), s = zr(i, e + 4);
  return s * 4294967296 + t;
}
oe.readUint64LE = Bl;
function gc(i, e, t) {
  return e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0), Bs(i / 4294967296 >>> 0, e, t), Bs(i >>> 0, e, t + 4), e;
}
oe.writeUint64BE = gc;
oe.writeInt64BE = gc;
function yc(i, e, t) {
  return e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0), ks(i >>> 0, e, t), ks(i / 4294967296 >>> 0, e, t + 4), e;
}
oe.writeUint64LE = yc;
oe.writeInt64LE = yc;
function kl(i, e, t) {
  if (t === void 0 && (t = 0), i % 8 !== 0)
    throw new Error("readUintBE supports only bitLengths divisible by 8");
  if (i / 8 > e.length - t)
    throw new Error("readUintBE: array is too short for the given bitLength");
  for (var s = 0, r = 1, n = i / 8 + t - 1; n >= t; n--)
    s += e[n] * r, r *= 256;
  return s;
}
oe.readUintBE = kl;
function Hl(i, e, t) {
  if (t === void 0 && (t = 0), i % 8 !== 0)
    throw new Error("readUintLE supports only bitLengths divisible by 8");
  if (i / 8 > e.length - t)
    throw new Error("readUintLE: array is too short for the given bitLength");
  for (var s = 0, r = 1, n = t; n < t + i / 8; n++)
    s += e[n] * r, r *= 256;
  return s;
}
oe.readUintLE = Hl;
function Gl(i, e, t, s) {
  if (t === void 0 && (t = new Uint8Array(i / 8)), s === void 0 && (s = 0), i % 8 !== 0)
    throw new Error("writeUintBE supports only bitLengths divisible by 8");
  if (!dc.isSafeInteger(e))
    throw new Error("writeUintBE value must be an integer");
  for (var r = 1, n = i / 8 + s - 1; n >= s; n--)
    t[n] = e / r & 255, r *= 256;
  return t;
}
oe.writeUintBE = Gl;
function Wl(i, e, t, s) {
  if (t === void 0 && (t = new Uint8Array(i / 8)), s === void 0 && (s = 0), i % 8 !== 0)
    throw new Error("writeUintLE supports only bitLengths divisible by 8");
  if (!dc.isSafeInteger(e))
    throw new Error("writeUintLE value must be an integer");
  for (var r = 1, n = s; n < s + i / 8; n++)
    t[n] = e / r & 255, r *= 256;
  return t;
}
oe.writeUintLE = Wl;
function Yl(i, e) {
  e === void 0 && (e = 0);
  var t = new DataView(i.buffer, i.byteOffset, i.byteLength);
  return t.getFloat32(e);
}
oe.readFloat32BE = Yl;
function Jl(i, e) {
  e === void 0 && (e = 0);
  var t = new DataView(i.buffer, i.byteOffset, i.byteLength);
  return t.getFloat32(e, !0);
}
oe.readFloat32LE = Jl;
function Ql(i, e) {
  e === void 0 && (e = 0);
  var t = new DataView(i.buffer, i.byteOffset, i.byteLength);
  return t.getFloat64(e);
}
oe.readFloat64BE = Ql;
function Xl(i, e) {
  e === void 0 && (e = 0);
  var t = new DataView(i.buffer, i.byteOffset, i.byteLength);
  return t.getFloat64(e, !0);
}
oe.readFloat64LE = Xl;
function Zl(i, e, t) {
  e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0);
  var s = new DataView(e.buffer, e.byteOffset, e.byteLength);
  return s.setFloat32(t, i), e;
}
oe.writeFloat32BE = Zl;
function ed(i, e, t) {
  e === void 0 && (e = new Uint8Array(4)), t === void 0 && (t = 0);
  var s = new DataView(e.buffer, e.byteOffset, e.byteLength);
  return s.setFloat32(t, i, !0), e;
}
oe.writeFloat32LE = ed;
function td(i, e, t) {
  e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0);
  var s = new DataView(e.buffer, e.byteOffset, e.byteLength);
  return s.setFloat64(t, i), e;
}
oe.writeFloat64BE = td;
function id(i, e, t) {
  e === void 0 && (e = new Uint8Array(8)), t === void 0 && (t = 0);
  var s = new DataView(e.buffer, e.byteOffset, e.byteLength);
  return s.setFloat64(t, i, !0), e;
}
oe.writeFloat64LE = id;
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 }), i.randomStringForEntropy = i.randomString = i.randomUint32 = i.randomBytes = i.defaultRandomSource = void 0;
  const e = rr, t = oe, s = Pt;
  i.defaultRandomSource = new e.SystemRandomSource();
  function r(d, p = i.defaultRandomSource) {
    return p.randomBytes(d);
  }
  i.randomBytes = r;
  function n(d = i.defaultRandomSource) {
    const p = r(4, d), w = (0, t.readUint32LE)(p);
    return (0, s.wipe)(p), w;
  }
  i.randomUint32 = n;
  const o = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz";
  function c(d, p = o, w = i.defaultRandomSource) {
    if (p.length < 2)
      throw new Error("randomString charset is too short");
    if (p.length > 256)
      throw new Error("randomString charset is too long");
    let D = "";
    const x = p.length, E = 256 - 256 % x;
    for (; d > 0; ) {
      const C = r(Math.ceil(d * 256 / E), w);
      for (let F = 0; F < C.length && d > 0; F++) {
        const K = C[F];
        K < E && (D += p.charAt(K % x), d--);
      }
      (0, s.wipe)(C);
    }
    return D;
  }
  i.randomString = c;
  function u(d, p = o, w = i.defaultRandomSource) {
    const D = Math.ceil(d / (Math.log(p.length) / Math.LN2));
    return c(D, p, w);
  }
  i.randomStringForEntropy = u;
})(li);
var mc = {};
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 });
  var e = oe, t = Pt;
  i.DIGEST_LENGTH = 64, i.BLOCK_SIZE = 128;
  var s = (
    /** @class */
    function() {
      function c() {
        this.digestLength = i.DIGEST_LENGTH, this.blockSize = i.BLOCK_SIZE, this._stateHi = new Int32Array(8), this._stateLo = new Int32Array(8), this._tempHi = new Int32Array(16), this._tempLo = new Int32Array(16), this._buffer = new Uint8Array(256), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this.reset();
      }
      return c.prototype._initState = function() {
        this._stateHi[0] = 1779033703, this._stateHi[1] = 3144134277, this._stateHi[2] = 1013904242, this._stateHi[3] = 2773480762, this._stateHi[4] = 1359893119, this._stateHi[5] = 2600822924, this._stateHi[6] = 528734635, this._stateHi[7] = 1541459225, this._stateLo[0] = 4089235720, this._stateLo[1] = 2227873595, this._stateLo[2] = 4271175723, this._stateLo[3] = 1595750129, this._stateLo[4] = 2917565137, this._stateLo[5] = 725511199, this._stateLo[6] = 4215389547, this._stateLo[7] = 327033209;
      }, c.prototype.reset = function() {
        return this._initState(), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this;
      }, c.prototype.clean = function() {
        t.wipe(this._buffer), t.wipe(this._tempHi), t.wipe(this._tempLo), this.reset();
      }, c.prototype.update = function(u, d) {
        if (d === void 0 && (d = u.length), this._finished)
          throw new Error("SHA512: can't update because hash was finished.");
        var p = 0;
        if (this._bytesHashed += d, this._bufferLength > 0) {
          for (; this._bufferLength < i.BLOCK_SIZE && d > 0; )
            this._buffer[this._bufferLength++] = u[p++], d--;
          this._bufferLength === this.blockSize && (n(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, this.blockSize), this._bufferLength = 0);
        }
        for (d >= this.blockSize && (p = n(this._tempHi, this._tempLo, this._stateHi, this._stateLo, u, p, d), d %= this.blockSize); d > 0; )
          this._buffer[this._bufferLength++] = u[p++], d--;
        return this;
      }, c.prototype.finish = function(u) {
        if (!this._finished) {
          var d = this._bytesHashed, p = this._bufferLength, w = d / 536870912 | 0, D = d << 3, x = d % 128 < 112 ? 128 : 256;
          this._buffer[p] = 128;
          for (var E = p + 1; E < x - 8; E++)
            this._buffer[E] = 0;
          e.writeUint32BE(w, this._buffer, x - 8), e.writeUint32BE(D, this._buffer, x - 4), n(this._tempHi, this._tempLo, this._stateHi, this._stateLo, this._buffer, 0, x), this._finished = !0;
        }
        for (var E = 0; E < this.digestLength / 8; E++)
          e.writeUint32BE(this._stateHi[E], u, E * 8), e.writeUint32BE(this._stateLo[E], u, E * 8 + 4);
        return this;
      }, c.prototype.digest = function() {
        var u = new Uint8Array(this.digestLength);
        return this.finish(u), u;
      }, c.prototype.saveState = function() {
        if (this._finished)
          throw new Error("SHA256: cannot save finished state");
        return {
          stateHi: new Int32Array(this._stateHi),
          stateLo: new Int32Array(this._stateLo),
          buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
          bufferLength: this._bufferLength,
          bytesHashed: this._bytesHashed
        };
      }, c.prototype.restoreState = function(u) {
        return this._stateHi.set(u.stateHi), this._stateLo.set(u.stateLo), this._bufferLength = u.bufferLength, u.buffer && this._buffer.set(u.buffer), this._bytesHashed = u.bytesHashed, this._finished = !1, this;
      }, c.prototype.cleanSavedState = function(u) {
        t.wipe(u.stateHi), t.wipe(u.stateLo), u.buffer && t.wipe(u.buffer), u.bufferLength = 0, u.bytesHashed = 0;
      }, c;
    }()
  );
  i.SHA512 = s;
  var r = new Int32Array([
    1116352408,
    3609767458,
    1899447441,
    602891725,
    3049323471,
    3964484399,
    3921009573,
    2173295548,
    961987163,
    4081628472,
    1508970993,
    3053834265,
    2453635748,
    2937671579,
    2870763221,
    3664609560,
    3624381080,
    2734883394,
    310598401,
    1164996542,
    607225278,
    1323610764,
    1426881987,
    3590304994,
    1925078388,
    4068182383,
    2162078206,
    991336113,
    2614888103,
    633803317,
    3248222580,
    3479774868,
    3835390401,
    2666613458,
    4022224774,
    944711139,
    264347078,
    2341262773,
    604807628,
    2007800933,
    770255983,
    1495990901,
    1249150122,
    1856431235,
    1555081692,
    3175218132,
    1996064986,
    2198950837,
    2554220882,
    3999719339,
    2821834349,
    766784016,
    2952996808,
    2566594879,
    3210313671,
    3203337956,
    3336571891,
    1034457026,
    3584528711,
    2466948901,
    113926993,
    3758326383,
    338241895,
    168717936,
    666307205,
    1188179964,
    773529912,
    1546045734,
    1294757372,
    1522805485,
    1396182291,
    2643833823,
    1695183700,
    2343527390,
    1986661051,
    1014477480,
    2177026350,
    1206759142,
    2456956037,
    344077627,
    2730485921,
    1290863460,
    2820302411,
    3158454273,
    3259730800,
    3505952657,
    3345764771,
    106217008,
    3516065817,
    3606008344,
    3600352804,
    1432725776,
    4094571909,
    1467031594,
    275423344,
    851169720,
    430227734,
    3100823752,
    506948616,
    1363258195,
    659060556,
    3750685593,
    883997877,
    3785050280,
    958139571,
    3318307427,
    1322822218,
    3812723403,
    1537002063,
    2003034995,
    1747873779,
    3602036899,
    1955562222,
    1575990012,
    2024104815,
    1125592928,
    2227730452,
    2716904306,
    2361852424,
    442776044,
    2428436474,
    593698344,
    2756734187,
    3733110249,
    3204031479,
    2999351573,
    3329325298,
    3815920427,
    3391569614,
    3928383900,
    3515267271,
    566280711,
    3940187606,
    3454069534,
    4118630271,
    4000239992,
    116418474,
    1914138554,
    174292421,
    2731055270,
    289380356,
    3203993006,
    460393269,
    320620315,
    685471733,
    587496836,
    852142971,
    1086792851,
    1017036298,
    365543100,
    1126000580,
    2618297676,
    1288033470,
    3409855158,
    1501505948,
    4234509866,
    1607167915,
    987167468,
    1816402316,
    1246189591
  ]);
  function n(c, u, d, p, w, D, x) {
    for (var E = d[0], C = d[1], F = d[2], K = d[3], I = d[4], O = d[5], y = d[6], b = d[7], f = p[0], a = p[1], l = p[2], L = p[3], v = p[4], R = p[5], $ = p[6], q = p[7], m, _, B, z, j, U, M, H; x >= 128; ) {
      for (var te = 0; te < 16; te++) {
        var G = 8 * te + D;
        c[te] = e.readUint32BE(w, G), u[te] = e.readUint32BE(w, G + 4);
      }
      for (var te = 0; te < 80; te++) {
        var ie = E, Q = C, se = F, T = K, A = I, N = O, h = y, S = b, W = f, X = a, fe = l, ve = L, ge = v, Se = R, Me = $, $e = q;
        if (m = b, _ = q, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = (I >>> 14 | v << 32 - 14) ^ (I >>> 18 | v << 32 - 18) ^ (v >>> 41 - 32 | I << 32 - (41 - 32)), _ = (v >>> 14 | I << 32 - 14) ^ (v >>> 18 | I << 32 - 18) ^ (I >>> 41 - 32 | v << 32 - (41 - 32)), j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, m = I & O ^ ~I & y, _ = v & R ^ ~v & $, j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, m = r[te * 2], _ = r[te * 2 + 1], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, m = c[te % 16], _ = u[te % 16], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, B = M & 65535 | H << 16, z = j & 65535 | U << 16, m = B, _ = z, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = (E >>> 28 | f << 32 - 28) ^ (f >>> 34 - 32 | E << 32 - (34 - 32)) ^ (f >>> 39 - 32 | E << 32 - (39 - 32)), _ = (f >>> 28 | E << 32 - 28) ^ (E >>> 34 - 32 | f << 32 - (34 - 32)) ^ (E >>> 39 - 32 | f << 32 - (39 - 32)), j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, m = E & C ^ E & F ^ C & F, _ = f & a ^ f & l ^ a & l, j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, S = M & 65535 | H << 16, $e = j & 65535 | U << 16, m = T, _ = ve, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = B, _ = z, j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, T = M & 65535 | H << 16, ve = j & 65535 | U << 16, C = ie, F = Q, K = se, I = T, O = A, y = N, b = h, E = S, a = W, l = X, L = fe, v = ve, R = ge, $ = Se, q = Me, f = $e, te % 16 === 15)
          for (var G = 0; G < 16; G++)
            m = c[G], _ = u[G], j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = c[(G + 9) % 16], _ = u[(G + 9) % 16], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, B = c[(G + 1) % 16], z = u[(G + 1) % 16], m = (B >>> 1 | z << 32 - 1) ^ (B >>> 8 | z << 32 - 8) ^ B >>> 7, _ = (z >>> 1 | B << 32 - 1) ^ (z >>> 8 | B << 32 - 8) ^ (z >>> 7 | B << 32 - 7), j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, B = c[(G + 14) % 16], z = u[(G + 14) % 16], m = (B >>> 19 | z << 32 - 19) ^ (z >>> 61 - 32 | B << 32 - (61 - 32)) ^ B >>> 6, _ = (z >>> 19 | B << 32 - 19) ^ (B >>> 61 - 32 | z << 32 - (61 - 32)) ^ (z >>> 6 | B << 32 - 6), j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, c[G] = M & 65535 | H << 16, u[G] = j & 65535 | U << 16;
      }
      m = E, _ = f, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = d[0], _ = p[0], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[0] = E = M & 65535 | H << 16, p[0] = f = j & 65535 | U << 16, m = C, _ = a, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = d[1], _ = p[1], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[1] = C = M & 65535 | H << 16, p[1] = a = j & 65535 | U << 16, m = F, _ = l, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = d[2], _ = p[2], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[2] = F = M & 65535 | H << 16, p[2] = l = j & 65535 | U << 16, m = K, _ = L, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = d[3], _ = p[3], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[3] = K = M & 65535 | H << 16, p[3] = L = j & 65535 | U << 16, m = I, _ = v, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = d[4], _ = p[4], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[4] = I = M & 65535 | H << 16, p[4] = v = j & 65535 | U << 16, m = O, _ = R, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = d[5], _ = p[5], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[5] = O = M & 65535 | H << 16, p[5] = R = j & 65535 | U << 16, m = y, _ = $, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = d[6], _ = p[6], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[6] = y = M & 65535 | H << 16, p[6] = $ = j & 65535 | U << 16, m = b, _ = q, j = _ & 65535, U = _ >>> 16, M = m & 65535, H = m >>> 16, m = d[7], _ = p[7], j += _ & 65535, U += _ >>> 16, M += m & 65535, H += m >>> 16, U += j >>> 16, M += U >>> 16, H += M >>> 16, d[7] = b = M & 65535 | H << 16, p[7] = q = j & 65535 | U << 16, D += 128, x -= 128;
    }
    return D;
  }
  function o(c) {
    var u = new s();
    u.update(c);
    var d = u.digest();
    return u.clean(), d;
  }
  i.hash = o;
})(mc);
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 }), i.convertSecretKeyToX25519 = i.convertPublicKeyToX25519 = i.verify = i.sign = i.extractPublicKeyFromSecretKey = i.generateKeyPair = i.generateKeyPairFromSeed = i.SEED_LENGTH = i.SECRET_KEY_LENGTH = i.PUBLIC_KEY_LENGTH = i.SIGNATURE_LENGTH = void 0;
  const e = li, t = mc, s = Pt;
  i.SIGNATURE_LENGTH = 64, i.PUBLIC_KEY_LENGTH = 32, i.SECRET_KEY_LENGTH = 64, i.SEED_LENGTH = 32;
  function r(T) {
    const A = new Float64Array(16);
    if (T)
      for (let N = 0; N < T.length; N++)
        A[N] = T[N];
    return A;
  }
  const n = new Uint8Array(32);
  n[0] = 9;
  const o = r(), c = r([1]), u = r([
    30883,
    4953,
    19914,
    30187,
    55467,
    16705,
    2637,
    112,
    59544,
    30585,
    16505,
    36039,
    65139,
    11119,
    27886,
    20995
  ]), d = r([
    61785,
    9906,
    39828,
    60374,
    45398,
    33411,
    5274,
    224,
    53552,
    61171,
    33010,
    6542,
    64743,
    22239,
    55772,
    9222
  ]), p = r([
    54554,
    36645,
    11616,
    51542,
    42930,
    38181,
    51040,
    26924,
    56412,
    64982,
    57905,
    49316,
    21502,
    52590,
    14035,
    8553
  ]), w = r([
    26200,
    26214,
    26214,
    26214,
    26214,
    26214,
    26214,
    26214,
    26214,
    26214,
    26214,
    26214,
    26214,
    26214,
    26214,
    26214
  ]), D = r([
    41136,
    18958,
    6951,
    50414,
    58488,
    44335,
    6150,
    12099,
    55207,
    15867,
    153,
    11085,
    57099,
    20417,
    9344,
    11139
  ]);
  function x(T, A) {
    for (let N = 0; N < 16; N++)
      T[N] = A[N] | 0;
  }
  function E(T) {
    let A = 1;
    for (let N = 0; N < 16; N++) {
      let h = T[N] + A + 65535;
      A = Math.floor(h / 65536), T[N] = h - A * 65536;
    }
    T[0] += A - 1 + 37 * (A - 1);
  }
  function C(T, A, N) {
    const h = ~(N - 1);
    for (let S = 0; S < 16; S++) {
      const W = h & (T[S] ^ A[S]);
      T[S] ^= W, A[S] ^= W;
    }
  }
  function F(T, A) {
    const N = r(), h = r();
    for (let S = 0; S < 16; S++)
      h[S] = A[S];
    E(h), E(h), E(h);
    for (let S = 0; S < 2; S++) {
      N[0] = h[0] - 65517;
      for (let X = 1; X < 15; X++)
        N[X] = h[X] - 65535 - (N[X - 1] >> 16 & 1), N[X - 1] &= 65535;
      N[15] = h[15] - 32767 - (N[14] >> 16 & 1);
      const W = N[15] >> 16 & 1;
      N[14] &= 65535, C(h, N, 1 - W);
    }
    for (let S = 0; S < 16; S++)
      T[2 * S] = h[S] & 255, T[2 * S + 1] = h[S] >> 8;
  }
  function K(T, A) {
    let N = 0;
    for (let h = 0; h < 32; h++)
      N |= T[h] ^ A[h];
    return (1 & N - 1 >>> 8) - 1;
  }
  function I(T, A) {
    const N = new Uint8Array(32), h = new Uint8Array(32);
    return F(N, T), F(h, A), K(N, h);
  }
  function O(T) {
    const A = new Uint8Array(32);
    return F(A, T), A[0] & 1;
  }
  function y(T, A) {
    for (let N = 0; N < 16; N++)
      T[N] = A[2 * N] + (A[2 * N + 1] << 8);
    T[15] &= 32767;
  }
  function b(T, A, N) {
    for (let h = 0; h < 16; h++)
      T[h] = A[h] + N[h];
  }
  function f(T, A, N) {
    for (let h = 0; h < 16; h++)
      T[h] = A[h] - N[h];
  }
  function a(T, A, N) {
    let h, S, W = 0, X = 0, fe = 0, ve = 0, ge = 0, Se = 0, Me = 0, $e = 0, we = 0, ye = 0, pe = 0, le = 0, ue = 0, he = 0, ce = 0, re = 0, de = 0, me = 0, ne = 0, _e = 0, Ee = 0, De = 0, xe = 0, Ie = 0, Ut = 0, qt = 0, si = 0, Dt = 0, fi = 0, Ki = 0, Os = 0, qe = N[0], Fe = N[1], je = N[2], ze = N[3], Ke = N[4], Ue = N[5], Qe = N[6], Xe = N[7], Ze = N[8], et = N[9], tt = N[10], Ye = N[11], Ve = N[12], Ae = N[13], it = N[14], st = N[15];
    h = A[0], W += h * qe, X += h * Fe, fe += h * je, ve += h * ze, ge += h * Ke, Se += h * Ue, Me += h * Qe, $e += h * Xe, we += h * Ze, ye += h * et, pe += h * tt, le += h * Ye, ue += h * Ve, he += h * Ae, ce += h * it, re += h * st, h = A[1], X += h * qe, fe += h * Fe, ve += h * je, ge += h * ze, Se += h * Ke, Me += h * Ue, $e += h * Qe, we += h * Xe, ye += h * Ze, pe += h * et, le += h * tt, ue += h * Ye, he += h * Ve, ce += h * Ae, re += h * it, de += h * st, h = A[2], fe += h * qe, ve += h * Fe, ge += h * je, Se += h * ze, Me += h * Ke, $e += h * Ue, we += h * Qe, ye += h * Xe, pe += h * Ze, le += h * et, ue += h * tt, he += h * Ye, ce += h * Ve, re += h * Ae, de += h * it, me += h * st, h = A[3], ve += h * qe, ge += h * Fe, Se += h * je, Me += h * ze, $e += h * Ke, we += h * Ue, ye += h * Qe, pe += h * Xe, le += h * Ze, ue += h * et, he += h * tt, ce += h * Ye, re += h * Ve, de += h * Ae, me += h * it, ne += h * st, h = A[4], ge += h * qe, Se += h * Fe, Me += h * je, $e += h * ze, we += h * Ke, ye += h * Ue, pe += h * Qe, le += h * Xe, ue += h * Ze, he += h * et, ce += h * tt, re += h * Ye, de += h * Ve, me += h * Ae, ne += h * it, _e += h * st, h = A[5], Se += h * qe, Me += h * Fe, $e += h * je, we += h * ze, ye += h * Ke, pe += h * Ue, le += h * Qe, ue += h * Xe, he += h * Ze, ce += h * et, re += h * tt, de += h * Ye, me += h * Ve, ne += h * Ae, _e += h * it, Ee += h * st, h = A[6], Me += h * qe, $e += h * Fe, we += h * je, ye += h * ze, pe += h * Ke, le += h * Ue, ue += h * Qe, he += h * Xe, ce += h * Ze, re += h * et, de += h * tt, me += h * Ye, ne += h * Ve, _e += h * Ae, Ee += h * it, De += h * st, h = A[7], $e += h * qe, we += h * Fe, ye += h * je, pe += h * ze, le += h * Ke, ue += h * Ue, he += h * Qe, ce += h * Xe, re += h * Ze, de += h * et, me += h * tt, ne += h * Ye, _e += h * Ve, Ee += h * Ae, De += h * it, xe += h * st, h = A[8], we += h * qe, ye += h * Fe, pe += h * je, le += h * ze, ue += h * Ke, he += h * Ue, ce += h * Qe, re += h * Xe, de += h * Ze, me += h * et, ne += h * tt, _e += h * Ye, Ee += h * Ve, De += h * Ae, xe += h * it, Ie += h * st, h = A[9], ye += h * qe, pe += h * Fe, le += h * je, ue += h * ze, he += h * Ke, ce += h * Ue, re += h * Qe, de += h * Xe, me += h * Ze, ne += h * et, _e += h * tt, Ee += h * Ye, De += h * Ve, xe += h * Ae, Ie += h * it, Ut += h * st, h = A[10], pe += h * qe, le += h * Fe, ue += h * je, he += h * ze, ce += h * Ke, re += h * Ue, de += h * Qe, me += h * Xe, ne += h * Ze, _e += h * et, Ee += h * tt, De += h * Ye, xe += h * Ve, Ie += h * Ae, Ut += h * it, qt += h * st, h = A[11], le += h * qe, ue += h * Fe, he += h * je, ce += h * ze, re += h * Ke, de += h * Ue, me += h * Qe, ne += h * Xe, _e += h * Ze, Ee += h * et, De += h * tt, xe += h * Ye, Ie += h * Ve, Ut += h * Ae, qt += h * it, si += h * st, h = A[12], ue += h * qe, he += h * Fe, ce += h * je, re += h * ze, de += h * Ke, me += h * Ue, ne += h * Qe, _e += h * Xe, Ee += h * Ze, De += h * et, xe += h * tt, Ie += h * Ye, Ut += h * Ve, qt += h * Ae, si += h * it, Dt += h * st, h = A[13], he += h * qe, ce += h * Fe, re += h * je, de += h * ze, me += h * Ke, ne += h * Ue, _e += h * Qe, Ee += h * Xe, De += h * Ze, xe += h * et, Ie += h * tt, Ut += h * Ye, qt += h * Ve, si += h * Ae, Dt += h * it, fi += h * st, h = A[14], ce += h * qe, re += h * Fe, de += h * je, me += h * ze, ne += h * Ke, _e += h * Ue, Ee += h * Qe, De += h * Xe, xe += h * Ze, Ie += h * et, Ut += h * tt, qt += h * Ye, si += h * Ve, Dt += h * Ae, fi += h * it, Ki += h * st, h = A[15], re += h * qe, de += h * Fe, me += h * je, ne += h * ze, _e += h * Ke, Ee += h * Ue, De += h * Qe, xe += h * Xe, Ie += h * Ze, Ut += h * et, qt += h * tt, si += h * Ye, Dt += h * Ve, fi += h * Ae, Ki += h * it, Os += h * st, W += 38 * de, X += 38 * me, fe += 38 * ne, ve += 38 * _e, ge += 38 * Ee, Se += 38 * De, Me += 38 * xe, $e += 38 * Ie, we += 38 * Ut, ye += 38 * qt, pe += 38 * si, le += 38 * Dt, ue += 38 * fi, he += 38 * Ki, ce += 38 * Os, S = 1, h = W + S + 65535, S = Math.floor(h / 65536), W = h - S * 65536, h = X + S + 65535, S = Math.floor(h / 65536), X = h - S * 65536, h = fe + S + 65535, S = Math.floor(h / 65536), fe = h - S * 65536, h = ve + S + 65535, S = Math.floor(h / 65536), ve = h - S * 65536, h = ge + S + 65535, S = Math.floor(h / 65536), ge = h - S * 65536, h = Se + S + 65535, S = Math.floor(h / 65536), Se = h - S * 65536, h = Me + S + 65535, S = Math.floor(h / 65536), Me = h - S * 65536, h = $e + S + 65535, S = Math.floor(h / 65536), $e = h - S * 65536, h = we + S + 65535, S = Math.floor(h / 65536), we = h - S * 65536, h = ye + S + 65535, S = Math.floor(h / 65536), ye = h - S * 65536, h = pe + S + 65535, S = Math.floor(h / 65536), pe = h - S * 65536, h = le + S + 65535, S = Math.floor(h / 65536), le = h - S * 65536, h = ue + S + 65535, S = Math.floor(h / 65536), ue = h - S * 65536, h = he + S + 65535, S = Math.floor(h / 65536), he = h - S * 65536, h = ce + S + 65535, S = Math.floor(h / 65536), ce = h - S * 65536, h = re + S + 65535, S = Math.floor(h / 65536), re = h - S * 65536, W += S - 1 + 37 * (S - 1), S = 1, h = W + S + 65535, S = Math.floor(h / 65536), W = h - S * 65536, h = X + S + 65535, S = Math.floor(h / 65536), X = h - S * 65536, h = fe + S + 65535, S = Math.floor(h / 65536), fe = h - S * 65536, h = ve + S + 65535, S = Math.floor(h / 65536), ve = h - S * 65536, h = ge + S + 65535, S = Math.floor(h / 65536), ge = h - S * 65536, h = Se + S + 65535, S = Math.floor(h / 65536), Se = h - S * 65536, h = Me + S + 65535, S = Math.floor(h / 65536), Me = h - S * 65536, h = $e + S + 65535, S = Math.floor(h / 65536), $e = h - S * 65536, h = we + S + 65535, S = Math.floor(h / 65536), we = h - S * 65536, h = ye + S + 65535, S = Math.floor(h / 65536), ye = h - S * 65536, h = pe + S + 65535, S = Math.floor(h / 65536), pe = h - S * 65536, h = le + S + 65535, S = Math.floor(h / 65536), le = h - S * 65536, h = ue + S + 65535, S = Math.floor(h / 65536), ue = h - S * 65536, h = he + S + 65535, S = Math.floor(h / 65536), he = h - S * 65536, h = ce + S + 65535, S = Math.floor(h / 65536), ce = h - S * 65536, h = re + S + 65535, S = Math.floor(h / 65536), re = h - S * 65536, W += S - 1 + 37 * (S - 1), T[0] = W, T[1] = X, T[2] = fe, T[3] = ve, T[4] = ge, T[5] = Se, T[6] = Me, T[7] = $e, T[8] = we, T[9] = ye, T[10] = pe, T[11] = le, T[12] = ue, T[13] = he, T[14] = ce, T[15] = re;
  }
  function l(T, A) {
    a(T, A, A);
  }
  function L(T, A) {
    const N = r();
    let h;
    for (h = 0; h < 16; h++)
      N[h] = A[h];
    for (h = 253; h >= 0; h--)
      l(N, N), h !== 2 && h !== 4 && a(N, N, A);
    for (h = 0; h < 16; h++)
      T[h] = N[h];
  }
  function v(T, A) {
    const N = r();
    let h;
    for (h = 0; h < 16; h++)
      N[h] = A[h];
    for (h = 250; h >= 0; h--)
      l(N, N), h !== 1 && a(N, N, A);
    for (h = 0; h < 16; h++)
      T[h] = N[h];
  }
  function R(T, A) {
    const N = r(), h = r(), S = r(), W = r(), X = r(), fe = r(), ve = r(), ge = r(), Se = r();
    f(N, T[1], T[0]), f(Se, A[1], A[0]), a(N, N, Se), b(h, T[0], T[1]), b(Se, A[0], A[1]), a(h, h, Se), a(S, T[3], A[3]), a(S, S, d), a(W, T[2], A[2]), b(W, W, W), f(X, h, N), f(fe, W, S), b(ve, W, S), b(ge, h, N), a(T[0], X, fe), a(T[1], ge, ve), a(T[2], ve, fe), a(T[3], X, ge);
  }
  function $(T, A, N) {
    for (let h = 0; h < 4; h++)
      C(T[h], A[h], N);
  }
  function q(T, A) {
    const N = r(), h = r(), S = r();
    L(S, A[2]), a(N, A[0], S), a(h, A[1], S), F(T, h), T[31] ^= O(N) << 7;
  }
  function m(T, A, N) {
    x(T[0], o), x(T[1], c), x(T[2], c), x(T[3], o);
    for (let h = 255; h >= 0; --h) {
      const S = N[h / 8 | 0] >> (h & 7) & 1;
      $(T, A, S), R(A, T), R(T, T), $(T, A, S);
    }
  }
  function _(T, A) {
    const N = [r(), r(), r(), r()];
    x(N[0], p), x(N[1], w), x(N[2], c), a(N[3], p, w), m(T, N, A);
  }
  function B(T) {
    if (T.length !== i.SEED_LENGTH)
      throw new Error(`ed25519: seed must be ${i.SEED_LENGTH} bytes`);
    const A = (0, t.hash)(T);
    A[0] &= 248, A[31] &= 127, A[31] |= 64;
    const N = new Uint8Array(32), h = [r(), r(), r(), r()];
    _(h, A), q(N, h);
    const S = new Uint8Array(64);
    return S.set(T), S.set(N, 32), {
      publicKey: N,
      secretKey: S
    };
  }
  i.generateKeyPairFromSeed = B;
  function z(T) {
    const A = (0, e.randomBytes)(32, T), N = B(A);
    return (0, s.wipe)(A), N;
  }
  i.generateKeyPair = z;
  function j(T) {
    if (T.length !== i.SECRET_KEY_LENGTH)
      throw new Error(`ed25519: secret key must be ${i.SECRET_KEY_LENGTH} bytes`);
    return new Uint8Array(T.subarray(32));
  }
  i.extractPublicKeyFromSecretKey = j;
  const U = new Float64Array([
    237,
    211,
    245,
    92,
    26,
    99,
    18,
    88,
    214,
    156,
    247,
    162,
    222,
    249,
    222,
    20,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    0,
    16
  ]);
  function M(T, A) {
    let N, h, S, W;
    for (h = 63; h >= 32; --h) {
      for (N = 0, S = h - 32, W = h - 12; S < W; ++S)
        A[S] += N - 16 * A[h] * U[S - (h - 32)], N = Math.floor((A[S] + 128) / 256), A[S] -= N * 256;
      A[S] += N, A[h] = 0;
    }
    for (N = 0, S = 0; S < 32; S++)
      A[S] += N - (A[31] >> 4) * U[S], N = A[S] >> 8, A[S] &= 255;
    for (S = 0; S < 32; S++)
      A[S] -= N * U[S];
    for (h = 0; h < 32; h++)
      A[h + 1] += A[h] >> 8, T[h] = A[h] & 255;
  }
  function H(T) {
    const A = new Float64Array(64);
    for (let N = 0; N < 64; N++)
      A[N] = T[N];
    for (let N = 0; N < 64; N++)
      T[N] = 0;
    M(T, A);
  }
  function te(T, A) {
    const N = new Float64Array(64), h = [r(), r(), r(), r()], S = (0, t.hash)(T.subarray(0, 32));
    S[0] &= 248, S[31] &= 127, S[31] |= 64;
    const W = new Uint8Array(64);
    W.set(S.subarray(32), 32);
    const X = new t.SHA512();
    X.update(W.subarray(32)), X.update(A);
    const fe = X.digest();
    X.clean(), H(fe), _(h, fe), q(W, h), X.reset(), X.update(W.subarray(0, 32)), X.update(T.subarray(32)), X.update(A);
    const ve = X.digest();
    H(ve);
    for (let ge = 0; ge < 32; ge++)
      N[ge] = fe[ge];
    for (let ge = 0; ge < 32; ge++)
      for (let Se = 0; Se < 32; Se++)
        N[ge + Se] += ve[ge] * S[Se];
    return M(W.subarray(32), N), W;
  }
  i.sign = te;
  function G(T, A) {
    const N = r(), h = r(), S = r(), W = r(), X = r(), fe = r(), ve = r();
    return x(T[2], c), y(T[1], A), l(S, T[1]), a(W, S, u), f(S, S, T[2]), b(W, T[2], W), l(X, W), l(fe, X), a(ve, fe, X), a(N, ve, S), a(N, N, W), v(N, N), a(N, N, S), a(N, N, W), a(N, N, W), a(T[0], N, W), l(h, T[0]), a(h, h, W), I(h, S) && a(T[0], T[0], D), l(h, T[0]), a(h, h, W), I(h, S) ? -1 : (O(T[0]) === A[31] >> 7 && f(T[0], o, T[0]), a(T[3], T[0], T[1]), 0);
  }
  function ie(T, A, N) {
    const h = new Uint8Array(32), S = [r(), r(), r(), r()], W = [r(), r(), r(), r()];
    if (N.length !== i.SIGNATURE_LENGTH)
      throw new Error(`ed25519: signature must be ${i.SIGNATURE_LENGTH} bytes`);
    if (G(W, T))
      return !1;
    const X = new t.SHA512();
    X.update(N.subarray(0, 32)), X.update(T), X.update(A);
    const fe = X.digest();
    return H(fe), m(S, W, fe), _(W, N.subarray(32)), R(S, W), q(h, S), !K(N, h);
  }
  i.verify = ie;
  function Q(T) {
    let A = [r(), r(), r(), r()];
    if (G(A, T))
      throw new Error("Ed25519: invalid public key");
    let N = r(), h = r(), S = A[1];
    b(N, c, S), f(h, c, S), L(h, h), a(N, N, h);
    let W = new Uint8Array(32);
    return F(W, N), W;
  }
  i.convertPublicKeyToX25519 = Q;
  function se(T) {
    const A = (0, t.hash)(T.subarray(0, 32));
    A[0] &= 248, A[31] &= 127, A[31] |= 64;
    const N = new Uint8Array(A.subarray(0, 32));
    return (0, s.wipe)(A), N;
  }
  i.convertSecretKeyToX25519 = se;
})(nn);
const sd = "EdDSA", rd = "JWT", wc = ".", bc = "base64url", nd = "utf8", od = "utf8", ad = ":", cd = "did", hd = "key", wo = "base58btc", ud = "z", ld = "K36", dd = 32;
function on(i) {
  return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;
}
function vc(i = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? on(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);
}
function ls(i, e) {
  e || (e = i.reduce((r, n) => r + n.length, 0));
  const t = vc(e);
  let s = 0;
  for (const r of i)
    t.set(r, s), s += r.length;
  return on(t);
}
function fd(i, e) {
  if (i.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), s = 0; s < t.length; s++)
    t[s] = 255;
  for (var r = 0; r < i.length; r++) {
    var n = i.charAt(r), o = n.charCodeAt(0);
    if (t[o] !== 255)
      throw new TypeError(n + " is ambiguous");
    t[o] = r;
  }
  var c = i.length, u = i.charAt(0), d = Math.log(c) / Math.log(256), p = Math.log(256) / Math.log(c);
  function w(E) {
    if (E instanceof Uint8Array || (ArrayBuffer.isView(E) ? E = new Uint8Array(E.buffer, E.byteOffset, E.byteLength) : Array.isArray(E) && (E = Uint8Array.from(E))), !(E instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (E.length === 0)
      return "";
    for (var C = 0, F = 0, K = 0, I = E.length; K !== I && E[K] === 0; )
      K++, C++;
    for (var O = (I - K) * p + 1 >>> 0, y = new Uint8Array(O); K !== I; ) {
      for (var b = E[K], f = 0, a = O - 1; (b !== 0 || f < F) && a !== -1; a--, f++)
        b += 256 * y[a] >>> 0, y[a] = b % c >>> 0, b = b / c >>> 0;
      if (b !== 0)
        throw new Error("Non-zero carry");
      F = f, K++;
    }
    for (var l = O - F; l !== O && y[l] === 0; )
      l++;
    for (var L = u.repeat(C); l < O; ++l)
      L += i.charAt(y[l]);
    return L;
  }
  function D(E) {
    if (typeof E != "string")
      throw new TypeError("Expected String");
    if (E.length === 0)
      return new Uint8Array();
    var C = 0;
    if (E[C] !== " ") {
      for (var F = 0, K = 0; E[C] === u; )
        F++, C++;
      for (var I = (E.length - C) * d + 1 >>> 0, O = new Uint8Array(I); E[C]; ) {
        var y = t[E.charCodeAt(C)];
        if (y === 255)
          return;
        for (var b = 0, f = I - 1; (y !== 0 || b < K) && f !== -1; f--, b++)
          y += c * O[f] >>> 0, O[f] = y % 256 >>> 0, y = y / 256 >>> 0;
        if (y !== 0)
          throw new Error("Non-zero carry");
        K = b, C++;
      }
      if (E[C] !== " ") {
        for (var a = I - K; a !== I && O[a] === 0; )
          a++;
        for (var l = new Uint8Array(F + (I - a)), L = F; a !== I; )
          l[L++] = O[a++];
        return l;
      }
    }
  }
  function x(E) {
    var C = D(E);
    if (C)
      return C;
    throw new Error(`Non-${e} character`);
  }
  return {
    encode: w,
    decodeUnsafe: D,
    decode: x
  };
}
var pd = fd, gd = pd;
const yd = (i) => {
  if (i instanceof Uint8Array && i.constructor.name === "Uint8Array")
    return i;
  if (i instanceof ArrayBuffer)
    return new Uint8Array(i);
  if (ArrayBuffer.isView(i))
    return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);
  throw new Error("Unknown type, must be binary type");
}, md = (i) => new TextEncoder().encode(i), wd = (i) => new TextDecoder().decode(i);
class bd {
  constructor(e, t, s) {
    this.name = e, this.prefix = t, this.baseEncode = s;
  }
  encode(e) {
    if (e instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
}
class vd {
  constructor(e, t, s) {
    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e) {
    return _c(this, e);
  }
}
class _d {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return _c(this, e);
  }
  decode(e) {
    const t = e[0], s = this.decoders[t];
    if (s)
      return s.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
}
const _c = (i, e) => new _d({
  ...i.decoders || { [i.prefix]: i },
  ...e.decoders || { [e.prefix]: e }
});
class Ed {
  constructor(e, t, s, r) {
    this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = r, this.encoder = new bd(e, t, s), this.decoder = new vd(e, t, r);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
}
const ar = ({ name: i, prefix: e, encode: t, decode: s }) => new Ed(i, e, t, s), ps = ({ prefix: i, name: e, alphabet: t }) => {
  const { encode: s, decode: r } = gd(t, e);
  return ar({
    prefix: i,
    name: e,
    encode: s,
    decode: (n) => yd(r(n))
  });
}, Sd = (i, e, t, s) => {
  const r = {};
  for (let p = 0; p < e.length; ++p)
    r[e[p]] = p;
  let n = i.length;
  for (; i[n - 1] === "="; )
    --n;
  const o = new Uint8Array(n * t / 8 | 0);
  let c = 0, u = 0, d = 0;
  for (let p = 0; p < n; ++p) {
    const w = r[i[p]];
    if (w === void 0)
      throw new SyntaxError(`Non-${s} character`);
    u = u << t | w, c += t, c >= 8 && (c -= 8, o[d++] = 255 & u >> c);
  }
  if (c >= t || 255 & u << 8 - c)
    throw new SyntaxError("Unexpected end of data");
  return o;
}, Id = (i, e, t) => {
  const s = e[e.length - 1] === "=", r = (1 << t) - 1;
  let n = "", o = 0, c = 0;
  for (let u = 0; u < i.length; ++u)
    for (c = c << 8 | i[u], o += 8; o > t; )
      o -= t, n += e[r & c >> o];
  if (o && (n += e[r & c << t - o]), s)
    for (; n.length * t & 7; )
      n += "=";
  return n;
}, ut = ({ name: i, prefix: e, bitsPerChar: t, alphabet: s }) => ar({
  prefix: e,
  name: i,
  encode(r) {
    return Id(r, s, t);
  },
  decode(r) {
    return Sd(r, s, t, i);
  }
}), Dd = ar({
  prefix: "\0",
  name: "identity",
  encode: (i) => wd(i),
  decode: (i) => md(i)
}), xd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  identity: Dd
}, Symbol.toStringTag, { value: "Module" })), Od = ut({
  prefix: "0",
  name: "base2",
  alphabet: "01",
  bitsPerChar: 1
}), Nd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base2: Od
}, Symbol.toStringTag, { value: "Module" })), Pd = ut({
  prefix: "7",
  name: "base8",
  alphabet: "01234567",
  bitsPerChar: 3
}), Rd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base8: Pd
}, Symbol.toStringTag, { value: "Module" })), Cd = ps({
  prefix: "9",
  name: "base10",
  alphabet: "0123456789"
}), Ad = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base10: Cd
}, Symbol.toStringTag, { value: "Module" })), Td = ut({
  prefix: "f",
  name: "base16",
  alphabet: "0123456789abcdef",
  bitsPerChar: 4
}), $d = ut({
  prefix: "F",
  name: "base16upper",
  alphabet: "0123456789ABCDEF",
  bitsPerChar: 4
}), Fd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base16: Td,
  base16upper: $d
}, Symbol.toStringTag, { value: "Module" })), Ud = ut({
  prefix: "b",
  name: "base32",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567",
  bitsPerChar: 5
}), Ld = ut({
  prefix: "B",
  name: "base32upper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567",
  bitsPerChar: 5
}), Md = ut({
  prefix: "c",
  name: "base32pad",
  alphabet: "abcdefghijklmnopqrstuvwxyz234567=",
  bitsPerChar: 5
}), qd = ut({
  prefix: "C",
  name: "base32padupper",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=",
  bitsPerChar: 5
}), jd = ut({
  prefix: "v",
  name: "base32hex",
  alphabet: "0123456789abcdefghijklmnopqrstuv",
  bitsPerChar: 5
}), zd = ut({
  prefix: "V",
  name: "base32hexupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV",
  bitsPerChar: 5
}), Kd = ut({
  prefix: "t",
  name: "base32hexpad",
  alphabet: "0123456789abcdefghijklmnopqrstuv=",
  bitsPerChar: 5
}), Vd = ut({
  prefix: "T",
  name: "base32hexpadupper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=",
  bitsPerChar: 5
}), Bd = ut({
  prefix: "h",
  name: "base32z",
  alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769",
  bitsPerChar: 5
}), kd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base32: Ud,
  base32hex: jd,
  base32hexpad: Kd,
  base32hexpadupper: Vd,
  base32hexupper: zd,
  base32pad: Md,
  base32padupper: qd,
  base32upper: Ld,
  base32z: Bd
}, Symbol.toStringTag, { value: "Module" })), Hd = ps({
  prefix: "k",
  name: "base36",
  alphabet: "0123456789abcdefghijklmnopqrstuvwxyz"
}), Gd = ps({
  prefix: "K",
  name: "base36upper",
  alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ"
}), Wd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base36: Hd,
  base36upper: Gd
}, Symbol.toStringTag, { value: "Module" })), Yd = ps({
  name: "base58btc",
  prefix: "z",
  alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz"
}), Jd = ps({
  name: "base58flickr",
  prefix: "Z",
  alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ"
}), Qd = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base58btc: Yd,
  base58flickr: Jd
}, Symbol.toStringTag, { value: "Module" })), Xd = ut({
  prefix: "m",
  name: "base64",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",
  bitsPerChar: 6
}), Zd = ut({
  prefix: "M",
  name: "base64pad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",
  bitsPerChar: 6
}), ef = ut({
  prefix: "u",
  name: "base64url",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_",
  bitsPerChar: 6
}), tf = ut({
  prefix: "U",
  name: "base64urlpad",
  alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=",
  bitsPerChar: 6
}), sf = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base64: Xd,
  base64pad: Zd,
  base64url: ef,
  base64urlpad: tf
}, Symbol.toStringTag, { value: "Module" })), Ec = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂"), rf = Ec.reduce((i, e, t) => (i[t] = e, i), []), nf = Ec.reduce((i, e, t) => (i[e.codePointAt(0)] = t, i), []);
function of(i) {
  return i.reduce((e, t) => (e += rf[t], e), "");
}
function af(i) {
  const e = [];
  for (const t of i) {
    const s = nf[t.codePointAt(0)];
    if (s === void 0)
      throw new Error(`Non-base256emoji character: ${t}`);
    e.push(s);
  }
  return new Uint8Array(e);
}
const cf = ar({
  prefix: "🚀",
  name: "base256emoji",
  encode: of,
  decode: af
}), hf = /* @__PURE__ */ Object.freeze(/* @__PURE__ */ Object.defineProperty({
  __proto__: null,
  base256emoji: cf
}, Symbol.toStringTag, { value: "Module" }));
new TextEncoder();
new TextDecoder();
const bo = {
  ...xd,
  ...Nd,
  ...Rd,
  ...Ad,
  ...Fd,
  ...kd,
  ...Wd,
  ...Qd,
  ...sf,
  ...hf
};
function Sc(i, e, t, s) {
  return {
    name: i,
    prefix: e,
    encoder: {
      name: i,
      prefix: e,
      encode: t
    },
    decoder: { decode: s }
  };
}
const vo = Sc("utf8", "u", (i) => "u" + new TextDecoder("utf8").decode(i), (i) => new TextEncoder().encode(i.substring(1))), Ir = Sc("ascii", "a", (i) => {
  let e = "a";
  for (let t = 0; t < i.length; t++)
    e += String.fromCharCode(i[t]);
  return e;
}, (i) => {
  i = i.substring(1);
  const e = vc(i.length);
  for (let t = 0; t < i.length; t++)
    e[t] = i.charCodeAt(t);
  return e;
}), Ic = {
  utf8: vo,
  "utf-8": vo,
  hex: bo.base16,
  latin1: Ir,
  ascii: Ir,
  binary: Ir,
  ...bo
};
function Ne(i, e = "utf8") {
  const t = Ic[e];
  if (!t)
    throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? globalThis.Buffer.from(i.buffer, i.byteOffset, i.byteLength).toString("utf8") : t.encoder.encode(i).substring(1);
}
function Ce(i, e = "utf8") {
  const t = Ic[e];
  if (!t)
    throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? on(globalThis.Buffer.from(i, "utf-8")) : t.decoder.decode(`${t.prefix}${i}`);
}
function Hs(i) {
  return Ne(Ce(sr(i), nd), bc);
}
function an(i) {
  const e = Ce(ld, wo), t = ud + Ne(ls([e, i]), wo);
  return [cd, hd, t].join(ad);
}
function uf(i) {
  return Ne(i, bc);
}
function lf(i) {
  return Ce([Hs(i.header), Hs(i.payload)].join(wc), od);
}
function df(i) {
  return [
    Hs(i.header),
    Hs(i.payload),
    uf(i.signature)
  ].join(wc);
}
function Gs(i = li.randomBytes(dd)) {
  return nn.generateKeyPairFromSeed(i);
}
async function Dc(i, e, t, s, r = V.fromMiliseconds(Date.now())) {
  const n = { alg: sd, typ: rd }, o = an(s.publicKey), c = r + t, u = { iss: o, sub: i, aud: e, iat: r, exp: c }, d = lf({ header: n, payload: u }), p = nn.sign(s.secretKey, d);
  return df({ header: n, payload: u, signature: p });
}
var gs = {}, cr = {};
Object.defineProperty(cr, "__esModule", { value: !0 });
var pt = oe, Kr = Pt, ff = 20;
function pf(i, e, t) {
  for (var s = 1634760805, r = 857760878, n = 2036477234, o = 1797285236, c = t[3] << 24 | t[2] << 16 | t[1] << 8 | t[0], u = t[7] << 24 | t[6] << 16 | t[5] << 8 | t[4], d = t[11] << 24 | t[10] << 16 | t[9] << 8 | t[8], p = t[15] << 24 | t[14] << 16 | t[13] << 8 | t[12], w = t[19] << 24 | t[18] << 16 | t[17] << 8 | t[16], D = t[23] << 24 | t[22] << 16 | t[21] << 8 | t[20], x = t[27] << 24 | t[26] << 16 | t[25] << 8 | t[24], E = t[31] << 24 | t[30] << 16 | t[29] << 8 | t[28], C = e[3] << 24 | e[2] << 16 | e[1] << 8 | e[0], F = e[7] << 24 | e[6] << 16 | e[5] << 8 | e[4], K = e[11] << 24 | e[10] << 16 | e[9] << 8 | e[8], I = e[15] << 24 | e[14] << 16 | e[13] << 8 | e[12], O = s, y = r, b = n, f = o, a = c, l = u, L = d, v = p, R = w, $ = D, q = x, m = E, _ = C, B = F, z = K, j = I, U = 0; U < ff; U += 2)
    O = O + a | 0, _ ^= O, _ = _ >>> 32 - 16 | _ << 16, R = R + _ | 0, a ^= R, a = a >>> 32 - 12 | a << 12, y = y + l | 0, B ^= y, B = B >>> 32 - 16 | B << 16, $ = $ + B | 0, l ^= $, l = l >>> 32 - 12 | l << 12, b = b + L | 0, z ^= b, z = z >>> 32 - 16 | z << 16, q = q + z | 0, L ^= q, L = L >>> 32 - 12 | L << 12, f = f + v | 0, j ^= f, j = j >>> 32 - 16 | j << 16, m = m + j | 0, v ^= m, v = v >>> 32 - 12 | v << 12, b = b + L | 0, z ^= b, z = z >>> 32 - 8 | z << 8, q = q + z | 0, L ^= q, L = L >>> 32 - 7 | L << 7, f = f + v | 0, j ^= f, j = j >>> 32 - 8 | j << 8, m = m + j | 0, v ^= m, v = v >>> 32 - 7 | v << 7, y = y + l | 0, B ^= y, B = B >>> 32 - 8 | B << 8, $ = $ + B | 0, l ^= $, l = l >>> 32 - 7 | l << 7, O = O + a | 0, _ ^= O, _ = _ >>> 32 - 8 | _ << 8, R = R + _ | 0, a ^= R, a = a >>> 32 - 7 | a << 7, O = O + l | 0, j ^= O, j = j >>> 32 - 16 | j << 16, q = q + j | 0, l ^= q, l = l >>> 32 - 12 | l << 12, y = y + L | 0, _ ^= y, _ = _ >>> 32 - 16 | _ << 16, m = m + _ | 0, L ^= m, L = L >>> 32 - 12 | L << 12, b = b + v | 0, B ^= b, B = B >>> 32 - 16 | B << 16, R = R + B | 0, v ^= R, v = v >>> 32 - 12 | v << 12, f = f + a | 0, z ^= f, z = z >>> 32 - 16 | z << 16, $ = $ + z | 0, a ^= $, a = a >>> 32 - 12 | a << 12, b = b + v | 0, B ^= b, B = B >>> 32 - 8 | B << 8, R = R + B | 0, v ^= R, v = v >>> 32 - 7 | v << 7, f = f + a | 0, z ^= f, z = z >>> 32 - 8 | z << 8, $ = $ + z | 0, a ^= $, a = a >>> 32 - 7 | a << 7, y = y + L | 0, _ ^= y, _ = _ >>> 32 - 8 | _ << 8, m = m + _ | 0, L ^= m, L = L >>> 32 - 7 | L << 7, O = O + l | 0, j ^= O, j = j >>> 32 - 8 | j << 8, q = q + j | 0, l ^= q, l = l >>> 32 - 7 | l << 7;
  pt.writeUint32LE(O + s | 0, i, 0), pt.writeUint32LE(y + r | 0, i, 4), pt.writeUint32LE(b + n | 0, i, 8), pt.writeUint32LE(f + o | 0, i, 12), pt.writeUint32LE(a + c | 0, i, 16), pt.writeUint32LE(l + u | 0, i, 20), pt.writeUint32LE(L + d | 0, i, 24), pt.writeUint32LE(v + p | 0, i, 28), pt.writeUint32LE(R + w | 0, i, 32), pt.writeUint32LE($ + D | 0, i, 36), pt.writeUint32LE(q + x | 0, i, 40), pt.writeUint32LE(m + E | 0, i, 44), pt.writeUint32LE(_ + C | 0, i, 48), pt.writeUint32LE(B + F | 0, i, 52), pt.writeUint32LE(z + K | 0, i, 56), pt.writeUint32LE(j + I | 0, i, 60);
}
function xc(i, e, t, s, r) {
  if (r === void 0 && (r = 0), i.length !== 32)
    throw new Error("ChaCha: key size must be 32 bytes");
  if (s.length < t.length)
    throw new Error("ChaCha: destination is shorter than source");
  var n, o;
  if (r === 0) {
    if (e.length !== 8 && e.length !== 12)
      throw new Error("ChaCha nonce must be 8 or 12 bytes");
    n = new Uint8Array(16), o = n.length - e.length, n.set(e, o);
  } else {
    if (e.length !== 16)
      throw new Error("ChaCha nonce with counter must be 16 bytes");
    n = e, o = r;
  }
  for (var c = new Uint8Array(64), u = 0; u < t.length; u += 64) {
    pf(c, n, i);
    for (var d = u; d < u + 64 && d < t.length; d++)
      s[d] = t[d] ^ c[d - u];
    yf(n, 0, o);
  }
  return Kr.wipe(c), r === 0 && Kr.wipe(n), s;
}
cr.streamXOR = xc;
function gf(i, e, t, s) {
  return s === void 0 && (s = 0), Kr.wipe(t), xc(i, e, t, t, s);
}
cr.stream = gf;
function yf(i, e, t) {
  for (var s = 1; t--; )
    s = s + (i[e] & 255) | 0, i[e] = s & 255, s >>>= 8, e++;
  if (s > 0)
    throw new Error("ChaCha: counter overflow");
}
var Oc = {}, di = {};
Object.defineProperty(di, "__esModule", { value: !0 });
function mf(i, e, t) {
  return ~(i - 1) & e | i - 1 & t;
}
di.select = mf;
function wf(i, e) {
  return (i | 0) - (e | 0) - 1 >>> 31 & 1;
}
di.lessOrEqual = wf;
function Nc(i, e) {
  if (i.length !== e.length)
    return 0;
  for (var t = 0, s = 0; s < i.length; s++)
    t |= i[s] ^ e[s];
  return 1 & t - 1 >>> 8;
}
di.compare = Nc;
function bf(i, e) {
  return i.length === 0 || e.length === 0 ? !1 : Nc(i, e) !== 0;
}
di.equal = bf;
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 });
  var e = di, t = Pt;
  i.DIGEST_LENGTH = 16;
  var s = (
    /** @class */
    function() {
      function o(c) {
        this.digestLength = i.DIGEST_LENGTH, this._buffer = new Uint8Array(16), this._r = new Uint16Array(10), this._h = new Uint16Array(10), this._pad = new Uint16Array(8), this._leftover = 0, this._fin = 0, this._finished = !1;
        var u = c[0] | c[1] << 8;
        this._r[0] = u & 8191;
        var d = c[2] | c[3] << 8;
        this._r[1] = (u >>> 13 | d << 3) & 8191;
        var p = c[4] | c[5] << 8;
        this._r[2] = (d >>> 10 | p << 6) & 7939;
        var w = c[6] | c[7] << 8;
        this._r[3] = (p >>> 7 | w << 9) & 8191;
        var D = c[8] | c[9] << 8;
        this._r[4] = (w >>> 4 | D << 12) & 255, this._r[5] = D >>> 1 & 8190;
        var x = c[10] | c[11] << 8;
        this._r[6] = (D >>> 14 | x << 2) & 8191;
        var E = c[12] | c[13] << 8;
        this._r[7] = (x >>> 11 | E << 5) & 8065;
        var C = c[14] | c[15] << 8;
        this._r[8] = (E >>> 8 | C << 8) & 8191, this._r[9] = C >>> 5 & 127, this._pad[0] = c[16] | c[17] << 8, this._pad[1] = c[18] | c[19] << 8, this._pad[2] = c[20] | c[21] << 8, this._pad[3] = c[22] | c[23] << 8, this._pad[4] = c[24] | c[25] << 8, this._pad[5] = c[26] | c[27] << 8, this._pad[6] = c[28] | c[29] << 8, this._pad[7] = c[30] | c[31] << 8;
      }
      return o.prototype._blocks = function(c, u, d) {
        for (var p = this._fin ? 0 : 2048, w = this._h[0], D = this._h[1], x = this._h[2], E = this._h[3], C = this._h[4], F = this._h[5], K = this._h[6], I = this._h[7], O = this._h[8], y = this._h[9], b = this._r[0], f = this._r[1], a = this._r[2], l = this._r[3], L = this._r[4], v = this._r[5], R = this._r[6], $ = this._r[7], q = this._r[8], m = this._r[9]; d >= 16; ) {
          var _ = c[u + 0] | c[u + 1] << 8;
          w += _ & 8191;
          var B = c[u + 2] | c[u + 3] << 8;
          D += (_ >>> 13 | B << 3) & 8191;
          var z = c[u + 4] | c[u + 5] << 8;
          x += (B >>> 10 | z << 6) & 8191;
          var j = c[u + 6] | c[u + 7] << 8;
          E += (z >>> 7 | j << 9) & 8191;
          var U = c[u + 8] | c[u + 9] << 8;
          C += (j >>> 4 | U << 12) & 8191, F += U >>> 1 & 8191;
          var M = c[u + 10] | c[u + 11] << 8;
          K += (U >>> 14 | M << 2) & 8191;
          var H = c[u + 12] | c[u + 13] << 8;
          I += (M >>> 11 | H << 5) & 8191;
          var te = c[u + 14] | c[u + 15] << 8;
          O += (H >>> 8 | te << 8) & 8191, y += te >>> 5 | p;
          var G = 0, ie = G;
          ie += w * b, ie += D * (5 * m), ie += x * (5 * q), ie += E * (5 * $), ie += C * (5 * R), G = ie >>> 13, ie &= 8191, ie += F * (5 * v), ie += K * (5 * L), ie += I * (5 * l), ie += O * (5 * a), ie += y * (5 * f), G += ie >>> 13, ie &= 8191;
          var Q = G;
          Q += w * f, Q += D * b, Q += x * (5 * m), Q += E * (5 * q), Q += C * (5 * $), G = Q >>> 13, Q &= 8191, Q += F * (5 * R), Q += K * (5 * v), Q += I * (5 * L), Q += O * (5 * l), Q += y * (5 * a), G += Q >>> 13, Q &= 8191;
          var se = G;
          se += w * a, se += D * f, se += x * b, se += E * (5 * m), se += C * (5 * q), G = se >>> 13, se &= 8191, se += F * (5 * $), se += K * (5 * R), se += I * (5 * v), se += O * (5 * L), se += y * (5 * l), G += se >>> 13, se &= 8191;
          var T = G;
          T += w * l, T += D * a, T += x * f, T += E * b, T += C * (5 * m), G = T >>> 13, T &= 8191, T += F * (5 * q), T += K * (5 * $), T += I * (5 * R), T += O * (5 * v), T += y * (5 * L), G += T >>> 13, T &= 8191;
          var A = G;
          A += w * L, A += D * l, A += x * a, A += E * f, A += C * b, G = A >>> 13, A &= 8191, A += F * (5 * m), A += K * (5 * q), A += I * (5 * $), A += O * (5 * R), A += y * (5 * v), G += A >>> 13, A &= 8191;
          var N = G;
          N += w * v, N += D * L, N += x * l, N += E * a, N += C * f, G = N >>> 13, N &= 8191, N += F * b, N += K * (5 * m), N += I * (5 * q), N += O * (5 * $), N += y * (5 * R), G += N >>> 13, N &= 8191;
          var h = G;
          h += w * R, h += D * v, h += x * L, h += E * l, h += C * a, G = h >>> 13, h &= 8191, h += F * f, h += K * b, h += I * (5 * m), h += O * (5 * q), h += y * (5 * $), G += h >>> 13, h &= 8191;
          var S = G;
          S += w * $, S += D * R, S += x * v, S += E * L, S += C * l, G = S >>> 13, S &= 8191, S += F * a, S += K * f, S += I * b, S += O * (5 * m), S += y * (5 * q), G += S >>> 13, S &= 8191;
          var W = G;
          W += w * q, W += D * $, W += x * R, W += E * v, W += C * L, G = W >>> 13, W &= 8191, W += F * l, W += K * a, W += I * f, W += O * b, W += y * (5 * m), G += W >>> 13, W &= 8191;
          var X = G;
          X += w * m, X += D * q, X += x * $, X += E * R, X += C * v, G = X >>> 13, X &= 8191, X += F * L, X += K * l, X += I * a, X += O * f, X += y * b, G += X >>> 13, X &= 8191, G = (G << 2) + G | 0, G = G + ie | 0, ie = G & 8191, G = G >>> 13, Q += G, w = ie, D = Q, x = se, E = T, C = A, F = N, K = h, I = S, O = W, y = X, u += 16, d -= 16;
        }
        this._h[0] = w, this._h[1] = D, this._h[2] = x, this._h[3] = E, this._h[4] = C, this._h[5] = F, this._h[6] = K, this._h[7] = I, this._h[8] = O, this._h[9] = y;
      }, o.prototype.finish = function(c, u) {
        u === void 0 && (u = 0);
        var d = new Uint16Array(10), p, w, D, x;
        if (this._leftover) {
          for (x = this._leftover, this._buffer[x++] = 1; x < 16; x++)
            this._buffer[x] = 0;
          this._fin = 1, this._blocks(this._buffer, 0, 16);
        }
        for (p = this._h[1] >>> 13, this._h[1] &= 8191, x = 2; x < 10; x++)
          this._h[x] += p, p = this._h[x] >>> 13, this._h[x] &= 8191;
        for (this._h[0] += p * 5, p = this._h[0] >>> 13, this._h[0] &= 8191, this._h[1] += p, p = this._h[1] >>> 13, this._h[1] &= 8191, this._h[2] += p, d[0] = this._h[0] + 5, p = d[0] >>> 13, d[0] &= 8191, x = 1; x < 10; x++)
          d[x] = this._h[x] + p, p = d[x] >>> 13, d[x] &= 8191;
        for (d[9] -= 8192, w = (p ^ 1) - 1, x = 0; x < 10; x++)
          d[x] &= w;
        for (w = ~w, x = 0; x < 10; x++)
          this._h[x] = this._h[x] & w | d[x];
        for (this._h[0] = (this._h[0] | this._h[1] << 13) & 65535, this._h[1] = (this._h[1] >>> 3 | this._h[2] << 10) & 65535, this._h[2] = (this._h[2] >>> 6 | this._h[3] << 7) & 65535, this._h[3] = (this._h[3] >>> 9 | this._h[4] << 4) & 65535, this._h[4] = (this._h[4] >>> 12 | this._h[5] << 1 | this._h[6] << 14) & 65535, this._h[5] = (this._h[6] >>> 2 | this._h[7] << 11) & 65535, this._h[6] = (this._h[7] >>> 5 | this._h[8] << 8) & 65535, this._h[7] = (this._h[8] >>> 8 | this._h[9] << 5) & 65535, D = this._h[0] + this._pad[0], this._h[0] = D & 65535, x = 1; x < 8; x++)
          D = (this._h[x] + this._pad[x] | 0) + (D >>> 16) | 0, this._h[x] = D & 65535;
        return c[u + 0] = this._h[0] >>> 0, c[u + 1] = this._h[0] >>> 8, c[u + 2] = this._h[1] >>> 0, c[u + 3] = this._h[1] >>> 8, c[u + 4] = this._h[2] >>> 0, c[u + 5] = this._h[2] >>> 8, c[u + 6] = this._h[3] >>> 0, c[u + 7] = this._h[3] >>> 8, c[u + 8] = this._h[4] >>> 0, c[u + 9] = this._h[4] >>> 8, c[u + 10] = this._h[5] >>> 0, c[u + 11] = this._h[5] >>> 8, c[u + 12] = this._h[6] >>> 0, c[u + 13] = this._h[6] >>> 8, c[u + 14] = this._h[7] >>> 0, c[u + 15] = this._h[7] >>> 8, this._finished = !0, this;
      }, o.prototype.update = function(c) {
        var u = 0, d = c.length, p;
        if (this._leftover) {
          p = 16 - this._leftover, p > d && (p = d);
          for (var w = 0; w < p; w++)
            this._buffer[this._leftover + w] = c[u + w];
          if (d -= p, u += p, this._leftover += p, this._leftover < 16)
            return this;
          this._blocks(this._buffer, 0, 16), this._leftover = 0;
        }
        if (d >= 16 && (p = d - d % 16, this._blocks(c, u, p), u += p, d -= p), d) {
          for (var w = 0; w < d; w++)
            this._buffer[this._leftover + w] = c[u + w];
          this._leftover += d;
        }
        return this;
      }, o.prototype.digest = function() {
        if (this._finished)
          throw new Error("Poly1305 was finished");
        var c = new Uint8Array(16);
        return this.finish(c), c;
      }, o.prototype.clean = function() {
        return t.wipe(this._buffer), t.wipe(this._r), t.wipe(this._h), t.wipe(this._pad), this._leftover = 0, this._fin = 0, this._finished = !0, this;
      }, o;
    }()
  );
  i.Poly1305 = s;
  function r(o, c) {
    var u = new s(o);
    u.update(c);
    var d = u.digest();
    return u.clean(), d;
  }
  i.oneTimeAuth = r;
  function n(o, c) {
    return o.length !== i.DIGEST_LENGTH || c.length !== i.DIGEST_LENGTH ? !1 : e.equal(o, c);
  }
  i.equal = n;
})(Oc);
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 });
  var e = cr, t = Oc, s = Pt, r = oe, n = di;
  i.KEY_LENGTH = 32, i.NONCE_LENGTH = 12, i.TAG_LENGTH = 16;
  var o = new Uint8Array(16), c = (
    /** @class */
    function() {
      function u(d) {
        if (this.nonceLength = i.NONCE_LENGTH, this.tagLength = i.TAG_LENGTH, d.length !== i.KEY_LENGTH)
          throw new Error("ChaCha20Poly1305 needs 32-byte key");
        this._key = new Uint8Array(d);
      }
      return u.prototype.seal = function(d, p, w, D) {
        if (d.length > 16)
          throw new Error("ChaCha20Poly1305: incorrect nonce length");
        var x = new Uint8Array(16);
        x.set(d, x.length - d.length);
        var E = new Uint8Array(32);
        e.stream(this._key, x, E, 4);
        var C = p.length + this.tagLength, F;
        if (D) {
          if (D.length !== C)
            throw new Error("ChaCha20Poly1305: incorrect destination length");
          F = D;
        } else
          F = new Uint8Array(C);
        return e.streamXOR(this._key, x, p, F, 4), this._authenticate(F.subarray(F.length - this.tagLength, F.length), E, F.subarray(0, F.length - this.tagLength), w), s.wipe(x), F;
      }, u.prototype.open = function(d, p, w, D) {
        if (d.length > 16)
          throw new Error("ChaCha20Poly1305: incorrect nonce length");
        if (p.length < this.tagLength)
          return null;
        var x = new Uint8Array(16);
        x.set(d, x.length - d.length);
        var E = new Uint8Array(32);
        e.stream(this._key, x, E, 4);
        var C = new Uint8Array(this.tagLength);
        if (this._authenticate(C, E, p.subarray(0, p.length - this.tagLength), w), !n.equal(C, p.subarray(p.length - this.tagLength, p.length)))
          return null;
        var F = p.length - this.tagLength, K;
        if (D) {
          if (D.length !== F)
            throw new Error("ChaCha20Poly1305: incorrect destination length");
          K = D;
        } else
          K = new Uint8Array(F);
        return e.streamXOR(this._key, x, p.subarray(0, p.length - this.tagLength), K, 4), s.wipe(x), K;
      }, u.prototype.clean = function() {
        return s.wipe(this._key), this;
      }, u.prototype._authenticate = function(d, p, w, D) {
        var x = new t.Poly1305(p);
        D && (x.update(D), D.length % 16 > 0 && x.update(o.subarray(D.length % 16))), x.update(w), w.length % 16 > 0 && x.update(o.subarray(w.length % 16));
        var E = new Uint8Array(8);
        D && r.writeUint64LE(D.length, E), x.update(E), r.writeUint64LE(w.length, E), x.update(E);
        for (var C = x.digest(), F = 0; F < C.length; F++)
          d[F] = C[F];
        x.clean(), s.wipe(C), s.wipe(E);
      }, u;
    }()
  );
  i.ChaCha20Poly1305 = c;
})(gs);
var Pc = {}, ys = {}, cn = {};
Object.defineProperty(cn, "__esModule", { value: !0 });
function vf(i) {
  return typeof i.saveState < "u" && typeof i.restoreState < "u" && typeof i.cleanSavedState < "u";
}
cn.isSerializableHash = vf;
Object.defineProperty(ys, "__esModule", { value: !0 });
var jt = cn, _f = di, Ef = Pt, Rc = (
  /** @class */
  function() {
    function i(e, t) {
      this._finished = !1, this._inner = new e(), this._outer = new e(), this.blockSize = this._outer.blockSize, this.digestLength = this._outer.digestLength;
      var s = new Uint8Array(this.blockSize);
      t.length > this.blockSize ? this._inner.update(t).finish(s).clean() : s.set(t);
      for (var r = 0; r < s.length; r++)
        s[r] ^= 54;
      this._inner.update(s);
      for (var r = 0; r < s.length; r++)
        s[r] ^= 106;
      this._outer.update(s), jt.isSerializableHash(this._inner) && jt.isSerializableHash(this._outer) && (this._innerKeyedState = this._inner.saveState(), this._outerKeyedState = this._outer.saveState()), Ef.wipe(s);
    }
    return i.prototype.reset = function() {
      if (!jt.isSerializableHash(this._inner) || !jt.isSerializableHash(this._outer))
        throw new Error("hmac: can't reset() because hash doesn't implement restoreState()");
      return this._inner.restoreState(this._innerKeyedState), this._outer.restoreState(this._outerKeyedState), this._finished = !1, this;
    }, i.prototype.clean = function() {
      jt.isSerializableHash(this._inner) && this._inner.cleanSavedState(this._innerKeyedState), jt.isSerializableHash(this._outer) && this._outer.cleanSavedState(this._outerKeyedState), this._inner.clean(), this._outer.clean();
    }, i.prototype.update = function(e) {
      return this._inner.update(e), this;
    }, i.prototype.finish = function(e) {
      return this._finished ? (this._outer.finish(e), this) : (this._inner.finish(e), this._outer.update(e.subarray(0, this.digestLength)).finish(e), this._finished = !0, this);
    }, i.prototype.digest = function() {
      var e = new Uint8Array(this.digestLength);
      return this.finish(e), e;
    }, i.prototype.saveState = function() {
      if (!jt.isSerializableHash(this._inner))
        throw new Error("hmac: can't saveState() because hash doesn't implement it");
      return this._inner.saveState();
    }, i.prototype.restoreState = function(e) {
      if (!jt.isSerializableHash(this._inner) || !jt.isSerializableHash(this._outer))
        throw new Error("hmac: can't restoreState() because hash doesn't implement it");
      return this._inner.restoreState(e), this._outer.restoreState(this._outerKeyedState), this._finished = !1, this;
    }, i.prototype.cleanSavedState = function(e) {
      if (!jt.isSerializableHash(this._inner))
        throw new Error("hmac: can't cleanSavedState() because hash doesn't implement it");
      this._inner.cleanSavedState(e);
    }, i;
  }()
);
ys.HMAC = Rc;
function Sf(i, e, t) {
  var s = new Rc(i, e);
  s.update(t);
  var r = s.digest();
  return s.clean(), r;
}
ys.hmac = Sf;
ys.equal = _f.equal;
Object.defineProperty(Pc, "__esModule", { value: !0 });
var _o = ys, Eo = Pt, If = (
  /** @class */
  function() {
    function i(e, t, s, r) {
      s === void 0 && (s = new Uint8Array(0)), this._counter = new Uint8Array(1), this._hash = e, this._info = r;
      var n = _o.hmac(this._hash, s, t);
      this._hmac = new _o.HMAC(e, n), this._buffer = new Uint8Array(this._hmac.digestLength), this._bufpos = this._buffer.length;
    }
    return i.prototype._fillBuffer = function() {
      this._counter[0]++;
      var e = this._counter[0];
      if (e === 0)
        throw new Error("hkdf: cannot expand more");
      this._hmac.reset(), e > 1 && this._hmac.update(this._buffer), this._info && this._hmac.update(this._info), this._hmac.update(this._counter), this._hmac.finish(this._buffer), this._bufpos = 0;
    }, i.prototype.expand = function(e) {
      for (var t = new Uint8Array(e), s = 0; s < t.length; s++)
        this._bufpos === this._buffer.length && this._fillBuffer(), t[s] = this._buffer[this._bufpos++];
      return t;
    }, i.prototype.clean = function() {
      this._hmac.clean(), Eo.wipe(this._buffer), Eo.wipe(this._counter), this._bufpos = 0;
    }, i;
  }()
), Cc = Pc.HKDF = If, Si = {};
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 });
  var e = oe, t = Pt;
  i.DIGEST_LENGTH = 32, i.BLOCK_SIZE = 64;
  var s = (
    /** @class */
    function() {
      function c() {
        this.digestLength = i.DIGEST_LENGTH, this.blockSize = i.BLOCK_SIZE, this._state = new Int32Array(8), this._temp = new Int32Array(64), this._buffer = new Uint8Array(128), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this.reset();
      }
      return c.prototype._initState = function() {
        this._state[0] = 1779033703, this._state[1] = 3144134277, this._state[2] = 1013904242, this._state[3] = 2773480762, this._state[4] = 1359893119, this._state[5] = 2600822924, this._state[6] = 528734635, this._state[7] = 1541459225;
      }, c.prototype.reset = function() {
        return this._initState(), this._bufferLength = 0, this._bytesHashed = 0, this._finished = !1, this;
      }, c.prototype.clean = function() {
        t.wipe(this._buffer), t.wipe(this._temp), this.reset();
      }, c.prototype.update = function(u, d) {
        if (d === void 0 && (d = u.length), this._finished)
          throw new Error("SHA256: can't update because hash was finished.");
        var p = 0;
        if (this._bytesHashed += d, this._bufferLength > 0) {
          for (; this._bufferLength < this.blockSize && d > 0; )
            this._buffer[this._bufferLength++] = u[p++], d--;
          this._bufferLength === this.blockSize && (n(this._temp, this._state, this._buffer, 0, this.blockSize), this._bufferLength = 0);
        }
        for (d >= this.blockSize && (p = n(this._temp, this._state, u, p, d), d %= this.blockSize); d > 0; )
          this._buffer[this._bufferLength++] = u[p++], d--;
        return this;
      }, c.prototype.finish = function(u) {
        if (!this._finished) {
          var d = this._bytesHashed, p = this._bufferLength, w = d / 536870912 | 0, D = d << 3, x = d % 64 < 56 ? 64 : 128;
          this._buffer[p] = 128;
          for (var E = p + 1; E < x - 8; E++)
            this._buffer[E] = 0;
          e.writeUint32BE(w, this._buffer, x - 8), e.writeUint32BE(D, this._buffer, x - 4), n(this._temp, this._state, this._buffer, 0, x), this._finished = !0;
        }
        for (var E = 0; E < this.digestLength / 4; E++)
          e.writeUint32BE(this._state[E], u, E * 4);
        return this;
      }, c.prototype.digest = function() {
        var u = new Uint8Array(this.digestLength);
        return this.finish(u), u;
      }, c.prototype.saveState = function() {
        if (this._finished)
          throw new Error("SHA256: cannot save finished state");
        return {
          state: new Int32Array(this._state),
          buffer: this._bufferLength > 0 ? new Uint8Array(this._buffer) : void 0,
          bufferLength: this._bufferLength,
          bytesHashed: this._bytesHashed
        };
      }, c.prototype.restoreState = function(u) {
        return this._state.set(u.state), this._bufferLength = u.bufferLength, u.buffer && this._buffer.set(u.buffer), this._bytesHashed = u.bytesHashed, this._finished = !1, this;
      }, c.prototype.cleanSavedState = function(u) {
        t.wipe(u.state), u.buffer && t.wipe(u.buffer), u.bufferLength = 0, u.bytesHashed = 0;
      }, c;
    }()
  );
  i.SHA256 = s;
  var r = new Int32Array([
    1116352408,
    1899447441,
    3049323471,
    3921009573,
    961987163,
    1508970993,
    2453635748,
    2870763221,
    3624381080,
    310598401,
    607225278,
    1426881987,
    1925078388,
    2162078206,
    2614888103,
    3248222580,
    3835390401,
    4022224774,
    264347078,
    604807628,
    770255983,
    1249150122,
    1555081692,
    1996064986,
    2554220882,
    2821834349,
    2952996808,
    3210313671,
    3336571891,
    3584528711,
    113926993,
    338241895,
    666307205,
    773529912,
    1294757372,
    1396182291,
    1695183700,
    1986661051,
    2177026350,
    2456956037,
    2730485921,
    2820302411,
    3259730800,
    3345764771,
    3516065817,
    3600352804,
    4094571909,
    275423344,
    430227734,
    506948616,
    659060556,
    883997877,
    958139571,
    1322822218,
    1537002063,
    1747873779,
    1955562222,
    2024104815,
    2227730452,
    2361852424,
    2428436474,
    2756734187,
    3204031479,
    3329325298
  ]);
  function n(c, u, d, p, w) {
    for (; w >= 64; ) {
      for (var D = u[0], x = u[1], E = u[2], C = u[3], F = u[4], K = u[5], I = u[6], O = u[7], y = 0; y < 16; y++) {
        var b = p + y * 4;
        c[y] = e.readUint32BE(d, b);
      }
      for (var y = 16; y < 64; y++) {
        var f = c[y - 2], a = (f >>> 17 | f << 32 - 17) ^ (f >>> 19 | f << 32 - 19) ^ f >>> 10;
        f = c[y - 15];
        var l = (f >>> 7 | f << 32 - 7) ^ (f >>> 18 | f << 32 - 18) ^ f >>> 3;
        c[y] = (a + c[y - 7] | 0) + (l + c[y - 16] | 0);
      }
      for (var y = 0; y < 64; y++) {
        var a = (((F >>> 6 | F << 26) ^ (F >>> 11 | F << 21) ^ (F >>> 25 | F << 7)) + (F & K ^ ~F & I) | 0) + (O + (r[y] + c[y] | 0) | 0) | 0, l = ((D >>> 2 | D << 32 - 2) ^ (D >>> 13 | D << 32 - 13) ^ (D >>> 22 | D << 32 - 22)) + (D & x ^ D & E ^ x & E) | 0;
        O = I, I = K, K = F, F = C + a | 0, C = E, E = x, x = D, D = a + l | 0;
      }
      u[0] += D, u[1] += x, u[2] += E, u[3] += C, u[4] += F, u[5] += K, u[6] += I, u[7] += O, p += 64, w -= 64;
    }
    return p;
  }
  function o(c) {
    var u = new s();
    u.update(c);
    var d = u.digest();
    return u.clean(), d;
  }
  i.hash = o;
})(Si);
var ms = {};
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 }), i.sharedKey = i.generateKeyPair = i.generateKeyPairFromSeed = i.scalarMultBase = i.scalarMult = i.SHARED_KEY_LENGTH = i.SECRET_KEY_LENGTH = i.PUBLIC_KEY_LENGTH = void 0;
  const e = li, t = Pt;
  i.PUBLIC_KEY_LENGTH = 32, i.SECRET_KEY_LENGTH = 32, i.SHARED_KEY_LENGTH = 32;
  function s(y) {
    const b = new Float64Array(16);
    if (y)
      for (let f = 0; f < y.length; f++)
        b[f] = y[f];
    return b;
  }
  const r = new Uint8Array(32);
  r[0] = 9;
  const n = s([56129, 1]);
  function o(y) {
    let b = 1;
    for (let f = 0; f < 16; f++) {
      let a = y[f] + b + 65535;
      b = Math.floor(a / 65536), y[f] = a - b * 65536;
    }
    y[0] += b - 1 + 37 * (b - 1);
  }
  function c(y, b, f) {
    const a = ~(f - 1);
    for (let l = 0; l < 16; l++) {
      const L = a & (y[l] ^ b[l]);
      y[l] ^= L, b[l] ^= L;
    }
  }
  function u(y, b) {
    const f = s(), a = s();
    for (let l = 0; l < 16; l++)
      a[l] = b[l];
    o(a), o(a), o(a);
    for (let l = 0; l < 2; l++) {
      f[0] = a[0] - 65517;
      for (let v = 1; v < 15; v++)
        f[v] = a[v] - 65535 - (f[v - 1] >> 16 & 1), f[v - 1] &= 65535;
      f[15] = a[15] - 32767 - (f[14] >> 16 & 1);
      const L = f[15] >> 16 & 1;
      f[14] &= 65535, c(a, f, 1 - L);
    }
    for (let l = 0; l < 16; l++)
      y[2 * l] = a[l] & 255, y[2 * l + 1] = a[l] >> 8;
  }
  function d(y, b) {
    for (let f = 0; f < 16; f++)
      y[f] = b[2 * f] + (b[2 * f + 1] << 8);
    y[15] &= 32767;
  }
  function p(y, b, f) {
    for (let a = 0; a < 16; a++)
      y[a] = b[a] + f[a];
  }
  function w(y, b, f) {
    for (let a = 0; a < 16; a++)
      y[a] = b[a] - f[a];
  }
  function D(y, b, f) {
    let a, l, L = 0, v = 0, R = 0, $ = 0, q = 0, m = 0, _ = 0, B = 0, z = 0, j = 0, U = 0, M = 0, H = 0, te = 0, G = 0, ie = 0, Q = 0, se = 0, T = 0, A = 0, N = 0, h = 0, S = 0, W = 0, X = 0, fe = 0, ve = 0, ge = 0, Se = 0, Me = 0, $e = 0, we = f[0], ye = f[1], pe = f[2], le = f[3], ue = f[4], he = f[5], ce = f[6], re = f[7], de = f[8], me = f[9], ne = f[10], _e = f[11], Ee = f[12], De = f[13], xe = f[14], Ie = f[15];
    a = b[0], L += a * we, v += a * ye, R += a * pe, $ += a * le, q += a * ue, m += a * he, _ += a * ce, B += a * re, z += a * de, j += a * me, U += a * ne, M += a * _e, H += a * Ee, te += a * De, G += a * xe, ie += a * Ie, a = b[1], v += a * we, R += a * ye, $ += a * pe, q += a * le, m += a * ue, _ += a * he, B += a * ce, z += a * re, j += a * de, U += a * me, M += a * ne, H += a * _e, te += a * Ee, G += a * De, ie += a * xe, Q += a * Ie, a = b[2], R += a * we, $ += a * ye, q += a * pe, m += a * le, _ += a * ue, B += a * he, z += a * ce, j += a * re, U += a * de, M += a * me, H += a * ne, te += a * _e, G += a * Ee, ie += a * De, Q += a * xe, se += a * Ie, a = b[3], $ += a * we, q += a * ye, m += a * pe, _ += a * le, B += a * ue, z += a * he, j += a * ce, U += a * re, M += a * de, H += a * me, te += a * ne, G += a * _e, ie += a * Ee, Q += a * De, se += a * xe, T += a * Ie, a = b[4], q += a * we, m += a * ye, _ += a * pe, B += a * le, z += a * ue, j += a * he, U += a * ce, M += a * re, H += a * de, te += a * me, G += a * ne, ie += a * _e, Q += a * Ee, se += a * De, T += a * xe, A += a * Ie, a = b[5], m += a * we, _ += a * ye, B += a * pe, z += a * le, j += a * ue, U += a * he, M += a * ce, H += a * re, te += a * de, G += a * me, ie += a * ne, Q += a * _e, se += a * Ee, T += a * De, A += a * xe, N += a * Ie, a = b[6], _ += a * we, B += a * ye, z += a * pe, j += a * le, U += a * ue, M += a * he, H += a * ce, te += a * re, G += a * de, ie += a * me, Q += a * ne, se += a * _e, T += a * Ee, A += a * De, N += a * xe, h += a * Ie, a = b[7], B += a * we, z += a * ye, j += a * pe, U += a * le, M += a * ue, H += a * he, te += a * ce, G += a * re, ie += a * de, Q += a * me, se += a * ne, T += a * _e, A += a * Ee, N += a * De, h += a * xe, S += a * Ie, a = b[8], z += a * we, j += a * ye, U += a * pe, M += a * le, H += a * ue, te += a * he, G += a * ce, ie += a * re, Q += a * de, se += a * me, T += a * ne, A += a * _e, N += a * Ee, h += a * De, S += a * xe, W += a * Ie, a = b[9], j += a * we, U += a * ye, M += a * pe, H += a * le, te += a * ue, G += a * he, ie += a * ce, Q += a * re, se += a * de, T += a * me, A += a * ne, N += a * _e, h += a * Ee, S += a * De, W += a * xe, X += a * Ie, a = b[10], U += a * we, M += a * ye, H += a * pe, te += a * le, G += a * ue, ie += a * he, Q += a * ce, se += a * re, T += a * de, A += a * me, N += a * ne, h += a * _e, S += a * Ee, W += a * De, X += a * xe, fe += a * Ie, a = b[11], M += a * we, H += a * ye, te += a * pe, G += a * le, ie += a * ue, Q += a * he, se += a * ce, T += a * re, A += a * de, N += a * me, h += a * ne, S += a * _e, W += a * Ee, X += a * De, fe += a * xe, ve += a * Ie, a = b[12], H += a * we, te += a * ye, G += a * pe, ie += a * le, Q += a * ue, se += a * he, T += a * ce, A += a * re, N += a * de, h += a * me, S += a * ne, W += a * _e, X += a * Ee, fe += a * De, ve += a * xe, ge += a * Ie, a = b[13], te += a * we, G += a * ye, ie += a * pe, Q += a * le, se += a * ue, T += a * he, A += a * ce, N += a * re, h += a * de, S += a * me, W += a * ne, X += a * _e, fe += a * Ee, ve += a * De, ge += a * xe, Se += a * Ie, a = b[14], G += a * we, ie += a * ye, Q += a * pe, se += a * le, T += a * ue, A += a * he, N += a * ce, h += a * re, S += a * de, W += a * me, X += a * ne, fe += a * _e, ve += a * Ee, ge += a * De, Se += a * xe, Me += a * Ie, a = b[15], ie += a * we, Q += a * ye, se += a * pe, T += a * le, A += a * ue, N += a * he, h += a * ce, S += a * re, W += a * de, X += a * me, fe += a * ne, ve += a * _e, ge += a * Ee, Se += a * De, Me += a * xe, $e += a * Ie, L += 38 * Q, v += 38 * se, R += 38 * T, $ += 38 * A, q += 38 * N, m += 38 * h, _ += 38 * S, B += 38 * W, z += 38 * X, j += 38 * fe, U += 38 * ve, M += 38 * ge, H += 38 * Se, te += 38 * Me, G += 38 * $e, l = 1, a = L + l + 65535, l = Math.floor(a / 65536), L = a - l * 65536, a = v + l + 65535, l = Math.floor(a / 65536), v = a - l * 65536, a = R + l + 65535, l = Math.floor(a / 65536), R = a - l * 65536, a = $ + l + 65535, l = Math.floor(a / 65536), $ = a - l * 65536, a = q + l + 65535, l = Math.floor(a / 65536), q = a - l * 65536, a = m + l + 65535, l = Math.floor(a / 65536), m = a - l * 65536, a = _ + l + 65535, l = Math.floor(a / 65536), _ = a - l * 65536, a = B + l + 65535, l = Math.floor(a / 65536), B = a - l * 65536, a = z + l + 65535, l = Math.floor(a / 65536), z = a - l * 65536, a = j + l + 65535, l = Math.floor(a / 65536), j = a - l * 65536, a = U + l + 65535, l = Math.floor(a / 65536), U = a - l * 65536, a = M + l + 65535, l = Math.floor(a / 65536), M = a - l * 65536, a = H + l + 65535, l = Math.floor(a / 65536), H = a - l * 65536, a = te + l + 65535, l = Math.floor(a / 65536), te = a - l * 65536, a = G + l + 65535, l = Math.floor(a / 65536), G = a - l * 65536, a = ie + l + 65535, l = Math.floor(a / 65536), ie = a - l * 65536, L += l - 1 + 37 * (l - 1), l = 1, a = L + l + 65535, l = Math.floor(a / 65536), L = a - l * 65536, a = v + l + 65535, l = Math.floor(a / 65536), v = a - l * 65536, a = R + l + 65535, l = Math.floor(a / 65536), R = a - l * 65536, a = $ + l + 65535, l = Math.floor(a / 65536), $ = a - l * 65536, a = q + l + 65535, l = Math.floor(a / 65536), q = a - l * 65536, a = m + l + 65535, l = Math.floor(a / 65536), m = a - l * 65536, a = _ + l + 65535, l = Math.floor(a / 65536), _ = a - l * 65536, a = B + l + 65535, l = Math.floor(a / 65536), B = a - l * 65536, a = z + l + 65535, l = Math.floor(a / 65536), z = a - l * 65536, a = j + l + 65535, l = Math.floor(a / 65536), j = a - l * 65536, a = U + l + 65535, l = Math.floor(a / 65536), U = a - l * 65536, a = M + l + 65535, l = Math.floor(a / 65536), M = a - l * 65536, a = H + l + 65535, l = Math.floor(a / 65536), H = a - l * 65536, a = te + l + 65535, l = Math.floor(a / 65536), te = a - l * 65536, a = G + l + 65535, l = Math.floor(a / 65536), G = a - l * 65536, a = ie + l + 65535, l = Math.floor(a / 65536), ie = a - l * 65536, L += l - 1 + 37 * (l - 1), y[0] = L, y[1] = v, y[2] = R, y[3] = $, y[4] = q, y[5] = m, y[6] = _, y[7] = B, y[8] = z, y[9] = j, y[10] = U, y[11] = M, y[12] = H, y[13] = te, y[14] = G, y[15] = ie;
  }
  function x(y, b) {
    D(y, b, b);
  }
  function E(y, b) {
    const f = s();
    for (let a = 0; a < 16; a++)
      f[a] = b[a];
    for (let a = 253; a >= 0; a--)
      x(f, f), a !== 2 && a !== 4 && D(f, f, b);
    for (let a = 0; a < 16; a++)
      y[a] = f[a];
  }
  function C(y, b) {
    const f = new Uint8Array(32), a = new Float64Array(80), l = s(), L = s(), v = s(), R = s(), $ = s(), q = s();
    for (let z = 0; z < 31; z++)
      f[z] = y[z];
    f[31] = y[31] & 127 | 64, f[0] &= 248, d(a, b);
    for (let z = 0; z < 16; z++)
      L[z] = a[z];
    l[0] = R[0] = 1;
    for (let z = 254; z >= 0; --z) {
      const j = f[z >>> 3] >>> (z & 7) & 1;
      c(l, L, j), c(v, R, j), p($, l, v), w(l, l, v), p(v, L, R), w(L, L, R), x(R, $), x(q, l), D(l, v, l), D(v, L, $), p($, l, v), w(l, l, v), x(L, l), w(v, R, q), D(l, v, n), p(l, l, R), D(v, v, l), D(l, R, q), D(R, L, a), x(L, $), c(l, L, j), c(v, R, j);
    }
    for (let z = 0; z < 16; z++)
      a[z + 16] = l[z], a[z + 32] = v[z], a[z + 48] = L[z], a[z + 64] = R[z];
    const m = a.subarray(32), _ = a.subarray(16);
    E(m, m), D(_, _, m);
    const B = new Uint8Array(32);
    return u(B, _), B;
  }
  i.scalarMult = C;
  function F(y) {
    return C(y, r);
  }
  i.scalarMultBase = F;
  function K(y) {
    if (y.length !== i.SECRET_KEY_LENGTH)
      throw new Error(`x25519: seed must be ${i.SECRET_KEY_LENGTH} bytes`);
    const b = new Uint8Array(y);
    return {
      publicKey: F(b),
      secretKey: b
    };
  }
  i.generateKeyPairFromSeed = K;
  function I(y) {
    const b = (0, e.randomBytes)(32, y), f = K(b);
    return (0, t.wipe)(b), f;
  }
  i.generateKeyPair = I;
  function O(y, b, f = !1) {
    if (y.length !== i.PUBLIC_KEY_LENGTH)
      throw new Error("X25519: incorrect secret key length");
    if (b.length !== i.PUBLIC_KEY_LENGTH)
      throw new Error("X25519: incorrect public key length");
    const a = C(y, b);
    if (f) {
      let l = 0;
      for (let L = 0; L < a.length; L++)
        l |= a[L];
      if (l === 0)
        throw new Error("X25519: invalid shared key");
    }
    return a;
  }
  i.sharedKey = O;
})(ms);
var So = globalThis && globalThis.__spreadArray || function(i, e, t) {
  if (t || arguments.length === 2)
    for (var s = 0, r = e.length, n; s < r; s++)
      (n || !(s in e)) && (n || (n = Array.prototype.slice.call(e, 0, s)), n[s] = e[s]);
  return i.concat(n || Array.prototype.slice.call(e));
}, Df = (
  /** @class */
  function() {
    function i(e, t, s) {
      this.name = e, this.version = t, this.os = s, this.type = "browser";
    }
    return i;
  }()
), xf = (
  /** @class */
  function() {
    function i(e) {
      this.version = e, this.type = "node", this.name = "node", this.os = process.platform;
    }
    return i;
  }()
), Of = (
  /** @class */
  function() {
    function i(e, t, s, r) {
      this.name = e, this.version = t, this.os = s, this.bot = r, this.type = "bot-device";
    }
    return i;
  }()
), Nf = (
  /** @class */
  function() {
    function i() {
      this.type = "bot", this.bot = !0, this.name = "bot", this.version = null, this.os = null;
    }
    return i;
  }()
), Pf = (
  /** @class */
  function() {
    function i() {
      this.type = "react-native", this.name = "react-native", this.version = null, this.os = null;
    }
    return i;
  }()
), Rf = /alexa|bot|crawl(er|ing)|facebookexternalhit|feedburner|google web preview|nagios|postrank|pingdom|slurp|spider|yahoo!|yandex/, Cf = /(nuhk|curl|Googlebot|Yammybot|Openbot|Slurp|MSNBot|Ask\ Jeeves\/Teoma|ia_archiver)/, Io = 3, Af = [
  ["aol", /AOLShield\/([0-9\._]+)/],
  ["edge", /Edge\/([0-9\._]+)/],
  ["edge-ios", /EdgiOS\/([0-9\._]+)/],
  ["yandexbrowser", /YaBrowser\/([0-9\._]+)/],
  ["kakaotalk", /KAKAOTALK\s([0-9\.]+)/],
  ["samsung", /SamsungBrowser\/([0-9\.]+)/],
  ["silk", /\bSilk\/([0-9._-]+)\b/],
  ["miui", /MiuiBrowser\/([0-9\.]+)$/],
  ["beaker", /BeakerBrowser\/([0-9\.]+)/],
  ["edge-chromium", /EdgA?\/([0-9\.]+)/],
  [
    "chromium-webview",
    /(?!Chrom.*OPR)wv\).*Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/
  ],
  ["chrome", /(?!Chrom.*OPR)Chrom(?:e|ium)\/([0-9\.]+)(:?\s|$)/],
  ["phantomjs", /PhantomJS\/([0-9\.]+)(:?\s|$)/],
  ["crios", /CriOS\/([0-9\.]+)(:?\s|$)/],
  ["firefox", /Firefox\/([0-9\.]+)(?:\s|$)/],
  ["fxios", /FxiOS\/([0-9\.]+)/],
  ["opera-mini", /Opera Mini.*Version\/([0-9\.]+)/],
  ["opera", /Opera\/([0-9\.]+)(?:\s|$)/],
  ["opera", /OPR\/([0-9\.]+)(:?\s|$)/],
  ["pie", /^Microsoft Pocket Internet Explorer\/(\d+\.\d+)$/],
  ["pie", /^Mozilla\/\d\.\d+\s\(compatible;\s(?:MSP?IE|MSInternet Explorer) (\d+\.\d+);.*Windows CE.*\)$/],
  ["netfront", /^Mozilla\/\d\.\d+.*NetFront\/(\d.\d)/],
  ["ie", /Trident\/7\.0.*rv\:([0-9\.]+).*\).*Gecko$/],
  ["ie", /MSIE\s([0-9\.]+);.*Trident\/[4-7].0/],
  ["ie", /MSIE\s(7\.0)/],
  ["bb10", /BB10;\sTouch.*Version\/([0-9\.]+)/],
  ["android", /Android\s([0-9\.]+)/],
  ["ios", /Version\/([0-9\._]+).*Mobile.*Safari.*/],
  ["safari", /Version\/([0-9\._]+).*Safari/],
  ["facebook", /FB[AS]V\/([0-9\.]+)/],
  ["instagram", /Instagram\s([0-9\.]+)/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Mobile/],
  ["ios-webview", /AppleWebKit\/([0-9\.]+).*Gecko\)$/],
  ["curl", /^curl\/([0-9\.]+)$/],
  ["searchbot", Rf]
], Do = [
  ["iOS", /iP(hone|od|ad)/],
  ["Android OS", /Android/],
  ["BlackBerry OS", /BlackBerry|BB10/],
  ["Windows Mobile", /IEMobile/],
  ["Amazon OS", /Kindle/],
  ["Windows 3.11", /Win16/],
  ["Windows 95", /(Windows 95)|(Win95)|(Windows_95)/],
  ["Windows 98", /(Windows 98)|(Win98)/],
  ["Windows 2000", /(Windows NT 5.0)|(Windows 2000)/],
  ["Windows XP", /(Windows NT 5.1)|(Windows XP)/],
  ["Windows Server 2003", /(Windows NT 5.2)/],
  ["Windows Vista", /(Windows NT 6.0)/],
  ["Windows 7", /(Windows NT 6.1)/],
  ["Windows 8", /(Windows NT 6.2)/],
  ["Windows 8.1", /(Windows NT 6.3)/],
  ["Windows 10", /(Windows NT 10.0)/],
  ["Windows ME", /Windows ME/],
  ["Windows CE", /Windows CE|WinCE|Microsoft Pocket Internet Explorer/],
  ["Open BSD", /OpenBSD/],
  ["Sun OS", /SunOS/],
  ["Chrome OS", /CrOS/],
  ["Linux", /(Linux)|(X11)/],
  ["Mac OS", /(Mac_PowerPC)|(Macintosh)/],
  ["QNX", /QNX/],
  ["BeOS", /BeOS/],
  ["OS/2", /OS\/2/]
];
function hn(i) {
  return i ? xo(i) : typeof document > "u" && typeof navigator < "u" && navigator.product === "ReactNative" ? new Pf() : typeof navigator < "u" ? xo(navigator.userAgent) : Ff();
}
function Tf(i) {
  return i !== "" && Af.reduce(function(e, t) {
    var s = t[0], r = t[1];
    if (e)
      return e;
    var n = r.exec(i);
    return !!n && [s, n];
  }, !1);
}
function xo(i) {
  var e = Tf(i);
  if (!e)
    return null;
  var t = e[0], s = e[1];
  if (t === "searchbot")
    return new Nf();
  var r = s[1] && s[1].split(".").join("_").split("_").slice(0, 3);
  r ? r.length < Io && (r = So(So([], r, !0), Uf(Io - r.length), !0)) : r = [];
  var n = r.join("."), o = $f(i), c = Cf.exec(i);
  return c && c[1] ? new Of(t, n, o, c[1]) : new Df(t, n, o);
}
function $f(i) {
  for (var e = 0, t = Do.length; e < t; e++) {
    var s = Do[e], r = s[0], n = s[1], o = n.exec(i);
    if (o)
      return r;
  }
  return null;
}
function Ff() {
  var i = typeof process < "u" && process.version;
  return i ? new xf(process.version.slice(1)) : null;
}
function Uf(i) {
  for (var e = [], t = 0; t < i; t++)
    e.push("0");
  return e;
}
var Pe = {};
Object.defineProperty(Pe, "__esModule", { value: !0 });
Pe.getLocalStorage = Pe.getLocalStorageOrThrow = Pe.getCrypto = Pe.getCryptoOrThrow = ln = Pe.getLocation = Pe.getLocationOrThrow = ws = Pe.getNavigator = Pe.getNavigatorOrThrow = un = Pe.getDocument = Pe.getDocumentOrThrow = Pe.getFromWindowOrThrow = Pe.getFromWindow = void 0;
function Ii(i) {
  let e;
  return typeof window < "u" && typeof window[i] < "u" && (e = window[i]), e;
}
Pe.getFromWindow = Ii;
function Li(i) {
  const e = Ii(i);
  if (!e)
    throw new Error(`${i} is not defined in Window`);
  return e;
}
Pe.getFromWindowOrThrow = Li;
function Lf() {
  return Li("document");
}
Pe.getDocumentOrThrow = Lf;
function Mf() {
  return Ii("document");
}
var un = Pe.getDocument = Mf;
function qf() {
  return Li("navigator");
}
Pe.getNavigatorOrThrow = qf;
function jf() {
  return Ii("navigator");
}
var ws = Pe.getNavigator = jf;
function zf() {
  return Li("location");
}
Pe.getLocationOrThrow = zf;
function Kf() {
  return Ii("location");
}
var ln = Pe.getLocation = Kf;
function Vf() {
  return Li("crypto");
}
Pe.getCryptoOrThrow = Vf;
function Bf() {
  return Ii("crypto");
}
Pe.getCrypto = Bf;
function kf() {
  return Li("localStorage");
}
Pe.getLocalStorageOrThrow = kf;
function Hf() {
  return Ii("localStorage");
}
Pe.getLocalStorage = Hf;
var dn = {};
Object.defineProperty(dn, "__esModule", { value: !0 });
var fn = dn.getWindowMetadata = void 0;
const Oo = Pe;
function Gf() {
  let i, e;
  try {
    i = Oo.getDocumentOrThrow(), e = Oo.getLocationOrThrow();
  } catch {
    return null;
  }
  function t() {
    const w = i.getElementsByTagName("link"), D = [];
    for (let x = 0; x < w.length; x++) {
      const E = w[x], C = E.getAttribute("rel");
      if (C && C.toLowerCase().indexOf("icon") > -1) {
        const F = E.getAttribute("href");
        if (F)
          if (F.toLowerCase().indexOf("https:") === -1 && F.toLowerCase().indexOf("http:") === -1 && F.indexOf("//") !== 0) {
            let K = e.protocol + "//" + e.host;
            if (F.indexOf("/") === 0)
              K += F;
            else {
              const I = e.pathname.split("/");
              I.pop();
              const O = I.join("/");
              K += O + "/" + F;
            }
            D.push(K);
          } else if (F.indexOf("//") === 0) {
            const K = e.protocol + F;
            D.push(K);
          } else
            D.push(F);
      }
    }
    return D;
  }
  function s(...w) {
    const D = i.getElementsByTagName("meta");
    for (let x = 0; x < D.length; x++) {
      const E = D[x], C = ["itemprop", "property", "name"].map((F) => E.getAttribute(F)).filter((F) => F ? w.includes(F) : !1);
      if (C.length && C) {
        const F = E.getAttribute("content");
        if (F)
          return F;
      }
    }
    return "";
  }
  function r() {
    let w = s("name", "og:site_name", "og:title", "twitter:title");
    return w || (w = i.title), w;
  }
  function n() {
    return s("description", "og:description", "twitter:description", "keywords");
  }
  const o = r(), c = n(), u = e.origin, d = t();
  return {
    description: c,
    url: u,
    icons: d,
    name: o
  };
}
fn = dn.getWindowMetadata = Gf;
var ii = {}, Wf = (i) => encodeURIComponent(i).replace(/[!'()*]/g, (e) => `%${e.charCodeAt(0).toString(16).toUpperCase()}`), Ac = "%[a-f0-9]{2}", No = new RegExp("(" + Ac + ")|([^%]+?)", "gi"), Po = new RegExp("(" + Ac + ")+", "gi");
function Vr(i, e) {
  try {
    return [decodeURIComponent(i.join(""))];
  } catch {
  }
  if (i.length === 1)
    return i;
  e = e || 1;
  var t = i.slice(0, e), s = i.slice(e);
  return Array.prototype.concat.call([], Vr(t), Vr(s));
}
function Yf(i) {
  try {
    return decodeURIComponent(i);
  } catch {
    for (var e = i.match(No) || [], t = 1; t < e.length; t++)
      i = Vr(e, t).join(""), e = i.match(No) || [];
    return i;
  }
}
function Jf(i) {
  for (var e = {
    "%FE%FF": "��",
    "%FF%FE": "��"
  }, t = Po.exec(i); t; ) {
    try {
      e[t[0]] = decodeURIComponent(t[0]);
    } catch {
      var s = Yf(t[0]);
      s !== t[0] && (e[t[0]] = s);
    }
    t = Po.exec(i);
  }
  e["%C2"] = "�";
  for (var r = Object.keys(e), n = 0; n < r.length; n++) {
    var o = r[n];
    i = i.replace(new RegExp(o, "g"), e[o]);
  }
  return i;
}
var Qf = function(i) {
  if (typeof i != "string")
    throw new TypeError("Expected `encodedURI` to be of type `string`, got `" + typeof i + "`");
  try {
    return i = i.replace(/\+/g, " "), decodeURIComponent(i);
  } catch {
    return Jf(i);
  }
}, Xf = (i, e) => {
  if (!(typeof i == "string" && typeof e == "string"))
    throw new TypeError("Expected the arguments to be of type `string`");
  if (e === "")
    return [i];
  const t = i.indexOf(e);
  return t === -1 ? [i] : [
    i.slice(0, t),
    i.slice(t + e.length)
  ];
}, Zf = function(i, e) {
  for (var t = {}, s = Object.keys(i), r = Array.isArray(e), n = 0; n < s.length; n++) {
    var o = s[n], c = i[o];
    (r ? e.indexOf(o) !== -1 : e(o, c, i)) && (t[o] = c);
  }
  return t;
};
(function(i) {
  const e = Wf, t = Qf, s = Xf, r = Zf, n = (I) => I == null, o = Symbol("encodeFragmentIdentifier");
  function c(I) {
    switch (I.arrayFormat) {
      case "index":
        return (O) => (y, b) => {
          const f = y.length;
          return b === void 0 || I.skipNull && b === null || I.skipEmptyString && b === "" ? y : b === null ? [...y, [p(O, I), "[", f, "]"].join("")] : [
            ...y,
            [p(O, I), "[", p(f, I), "]=", p(b, I)].join("")
          ];
        };
      case "bracket":
        return (O) => (y, b) => b === void 0 || I.skipNull && b === null || I.skipEmptyString && b === "" ? y : b === null ? [...y, [p(O, I), "[]"].join("")] : [...y, [p(O, I), "[]=", p(b, I)].join("")];
      case "colon-list-separator":
        return (O) => (y, b) => b === void 0 || I.skipNull && b === null || I.skipEmptyString && b === "" ? y : b === null ? [...y, [p(O, I), ":list="].join("")] : [...y, [p(O, I), ":list=", p(b, I)].join("")];
      case "comma":
      case "separator":
      case "bracket-separator": {
        const O = I.arrayFormat === "bracket-separator" ? "[]=" : "=";
        return (y) => (b, f) => f === void 0 || I.skipNull && f === null || I.skipEmptyString && f === "" ? b : (f = f === null ? "" : f, b.length === 0 ? [[p(y, I), O, p(f, I)].join("")] : [[b, p(f, I)].join(I.arrayFormatSeparator)]);
      }
      default:
        return (O) => (y, b) => b === void 0 || I.skipNull && b === null || I.skipEmptyString && b === "" ? y : b === null ? [...y, p(O, I)] : [...y, [p(O, I), "=", p(b, I)].join("")];
    }
  }
  function u(I) {
    let O;
    switch (I.arrayFormat) {
      case "index":
        return (y, b, f) => {
          if (O = /\[(\d*)\]$/.exec(y), y = y.replace(/\[\d*\]$/, ""), !O) {
            f[y] = b;
            return;
          }
          f[y] === void 0 && (f[y] = {}), f[y][O[1]] = b;
        };
      case "bracket":
        return (y, b, f) => {
          if (O = /(\[\])$/.exec(y), y = y.replace(/\[\]$/, ""), !O) {
            f[y] = b;
            return;
          }
          if (f[y] === void 0) {
            f[y] = [b];
            return;
          }
          f[y] = [].concat(f[y], b);
        };
      case "colon-list-separator":
        return (y, b, f) => {
          if (O = /(:list)$/.exec(y), y = y.replace(/:list$/, ""), !O) {
            f[y] = b;
            return;
          }
          if (f[y] === void 0) {
            f[y] = [b];
            return;
          }
          f[y] = [].concat(f[y], b);
        };
      case "comma":
      case "separator":
        return (y, b, f) => {
          const a = typeof b == "string" && b.includes(I.arrayFormatSeparator), l = typeof b == "string" && !a && w(b, I).includes(I.arrayFormatSeparator);
          b = l ? w(b, I) : b;
          const L = a || l ? b.split(I.arrayFormatSeparator).map((v) => w(v, I)) : b === null ? b : w(b, I);
          f[y] = L;
        };
      case "bracket-separator":
        return (y, b, f) => {
          const a = /(\[\])$/.test(y);
          if (y = y.replace(/\[\]$/, ""), !a) {
            f[y] = b && w(b, I);
            return;
          }
          const l = b === null ? [] : b.split(I.arrayFormatSeparator).map((L) => w(L, I));
          if (f[y] === void 0) {
            f[y] = l;
            return;
          }
          f[y] = [].concat(f[y], l);
        };
      default:
        return (y, b, f) => {
          if (f[y] === void 0) {
            f[y] = b;
            return;
          }
          f[y] = [].concat(f[y], b);
        };
    }
  }
  function d(I) {
    if (typeof I != "string" || I.length !== 1)
      throw new TypeError("arrayFormatSeparator must be single character string");
  }
  function p(I, O) {
    return O.encode ? O.strict ? e(I) : encodeURIComponent(I) : I;
  }
  function w(I, O) {
    return O.decode ? t(I) : I;
  }
  function D(I) {
    return Array.isArray(I) ? I.sort() : typeof I == "object" ? D(Object.keys(I)).sort((O, y) => Number(O) - Number(y)).map((O) => I[O]) : I;
  }
  function x(I) {
    const O = I.indexOf("#");
    return O !== -1 && (I = I.slice(0, O)), I;
  }
  function E(I) {
    let O = "";
    const y = I.indexOf("#");
    return y !== -1 && (O = I.slice(y)), O;
  }
  function C(I) {
    I = x(I);
    const O = I.indexOf("?");
    return O === -1 ? "" : I.slice(O + 1);
  }
  function F(I, O) {
    return O.parseNumbers && !Number.isNaN(Number(I)) && typeof I == "string" && I.trim() !== "" ? I = Number(I) : O.parseBooleans && I !== null && (I.toLowerCase() === "true" || I.toLowerCase() === "false") && (I = I.toLowerCase() === "true"), I;
  }
  function K(I, O) {
    O = Object.assign({
      decode: !0,
      sort: !0,
      arrayFormat: "none",
      arrayFormatSeparator: ",",
      parseNumbers: !1,
      parseBooleans: !1
    }, O), d(O.arrayFormatSeparator);
    const y = u(O), b = /* @__PURE__ */ Object.create(null);
    if (typeof I != "string" || (I = I.trim().replace(/^[?#&]/, ""), !I))
      return b;
    for (const f of I.split("&")) {
      if (f === "")
        continue;
      let [a, l] = s(O.decode ? f.replace(/\+/g, " ") : f, "=");
      l = l === void 0 ? null : ["comma", "separator", "bracket-separator"].includes(O.arrayFormat) ? l : w(l, O), y(w(a, O), l, b);
    }
    for (const f of Object.keys(b)) {
      const a = b[f];
      if (typeof a == "object" && a !== null)
        for (const l of Object.keys(a))
          a[l] = F(a[l], O);
      else
        b[f] = F(a, O);
    }
    return O.sort === !1 ? b : (O.sort === !0 ? Object.keys(b).sort() : Object.keys(b).sort(O.sort)).reduce((f, a) => {
      const l = b[a];
      return l && typeof l == "object" && !Array.isArray(l) ? f[a] = D(l) : f[a] = l, f;
    }, /* @__PURE__ */ Object.create(null));
  }
  i.extract = C, i.parse = K, i.stringify = (I, O) => {
    if (!I)
      return "";
    O = Object.assign({
      encode: !0,
      strict: !0,
      arrayFormat: "none",
      arrayFormatSeparator: ","
    }, O), d(O.arrayFormatSeparator);
    const y = (l) => O.skipNull && n(I[l]) || O.skipEmptyString && I[l] === "", b = c(O), f = {};
    for (const l of Object.keys(I))
      y(l) || (f[l] = I[l]);
    const a = Object.keys(f);
    return O.sort !== !1 && a.sort(O.sort), a.map((l) => {
      const L = I[l];
      return L === void 0 ? "" : L === null ? p(l, O) : Array.isArray(L) ? L.length === 0 && O.arrayFormat === "bracket-separator" ? p(l, O) + "[]" : L.reduce(b(l), []).join("&") : p(l, O) + "=" + p(L, O);
    }).filter((l) => l.length > 0).join("&");
  }, i.parseUrl = (I, O) => {
    O = Object.assign({
      decode: !0
    }, O);
    const [y, b] = s(I, "#");
    return Object.assign(
      {
        url: y.split("?")[0] || "",
        query: K(C(I), O)
      },
      O && O.parseFragmentIdentifier && b ? { fragmentIdentifier: w(b, O) } : {}
    );
  }, i.stringifyUrl = (I, O) => {
    O = Object.assign({
      encode: !0,
      strict: !0,
      [o]: !0
    }, O);
    const y = x(I.url).split("?")[0] || "", b = i.extract(I.url), f = i.parse(b, { sort: !1 }), a = Object.assign(f, I.query);
    let l = i.stringify(a, O);
    l && (l = `?${l}`);
    let L = E(I.url);
    return I.fragmentIdentifier && (L = `#${O[o] ? p(I.fragmentIdentifier, O) : I.fragmentIdentifier}`), `${y}${l}${L}`;
  }, i.pick = (I, O, y) => {
    y = Object.assign({
      parseFragmentIdentifier: !0,
      [o]: !1
    }, y);
    const { url: b, query: f, fragmentIdentifier: a } = i.parseUrl(I, y);
    return i.stringifyUrl({
      url: b,
      query: r(f, O),
      fragmentIdentifier: a
    }, y);
  }, i.exclude = (I, O, y) => {
    const b = Array.isArray(O) ? (f) => !O.includes(f) : (f, a) => !O(f, a);
    return i.pick(I, b, y);
  };
})(ii);
const Tc = {
  waku: {
    publish: "waku_publish",
    batchPublish: "waku_batchPublish",
    subscribe: "waku_subscribe",
    batchSubscribe: "waku_batchSubscribe",
    subscription: "waku_subscription",
    unsubscribe: "waku_unsubscribe",
    batchUnsubscribe: "waku_batchUnsubscribe"
  },
  irn: {
    publish: "irn_publish",
    batchPublish: "irn_batchPublish",
    subscribe: "irn_subscribe",
    batchSubscribe: "irn_batchSubscribe",
    subscription: "irn_subscription",
    unsubscribe: "irn_unsubscribe",
    batchUnsubscribe: "irn_batchUnsubscribe"
  },
  iridium: {
    publish: "iridium_publish",
    batchPublish: "iridium_batchPublish",
    subscribe: "iridium_subscribe",
    batchSubscribe: "iridium_batchSubscribe",
    subscription: "iridium_subscription",
    unsubscribe: "iridium_unsubscribe",
    batchUnsubscribe: "iridium_batchUnsubscribe"
  }
};
function $c(i, e) {
  return i.includes(":") ? [i] : e.chains || [];
}
const Fc = "base10", vt = "base16", Br = "base64pad", pn = "utf8", Uc = 0, Di = 1, ep = 0, Ro = 1, kr = 12, gn = 32;
function tp() {
  const i = ms.generateKeyPair();
  return { privateKey: Ne(i.secretKey, vt), publicKey: Ne(i.publicKey, vt) };
}
function Hr() {
  const i = li.randomBytes(gn);
  return Ne(i, vt);
}
function ip(i, e) {
  const t = ms.sharedKey(Ce(i, vt), Ce(e, vt), !0), s = new Cc(Si.SHA256, t).expand(gn);
  return Ne(s, vt);
}
function sp(i) {
  const e = Si.hash(Ce(i, vt));
  return Ne(e, vt);
}
function Fi(i) {
  const e = Si.hash(Ce(i, pn));
  return Ne(e, vt);
}
function rp(i) {
  return Ce(`${i}`, Fc);
}
function bs(i) {
  return Number(Ne(i, Fc));
}
function np(i) {
  const e = rp(typeof i.type < "u" ? i.type : Uc);
  if (bs(e) === Di && typeof i.senderPublicKey > "u")
    throw new Error("Missing sender public key for type 1 envelope");
  const t = typeof i.senderPublicKey < "u" ? Ce(i.senderPublicKey, vt) : void 0, s = typeof i.iv < "u" ? Ce(i.iv, vt) : li.randomBytes(kr), r = new gs.ChaCha20Poly1305(Ce(i.symKey, vt)).seal(s, Ce(i.message, pn));
  return ap({ type: e, sealed: r, iv: s, senderPublicKey: t });
}
function op(i) {
  const e = new gs.ChaCha20Poly1305(Ce(i.symKey, vt)), { sealed: t, iv: s } = Ws(i.encoded), r = e.open(s, t);
  if (r === null)
    throw new Error("Failed to decrypt");
  return Ne(r, pn);
}
function ap(i) {
  if (bs(i.type) === Di) {
    if (typeof i.senderPublicKey > "u")
      throw new Error("Missing sender public key for type 1 envelope");
    return Ne(ls([i.type, i.senderPublicKey, i.iv, i.sealed]), Br);
  }
  return Ne(ls([i.type, i.iv, i.sealed]), Br);
}
function Ws(i) {
  const e = Ce(i, Br), t = e.slice(ep, Ro), s = Ro;
  if (bs(t) === Di) {
    const c = s + gn, u = c + kr, d = e.slice(s, c), p = e.slice(c, u), w = e.slice(u);
    return { type: t, sealed: w, iv: p, senderPublicKey: d };
  }
  const r = s + kr, n = e.slice(s, r), o = e.slice(r);
  return { type: t, sealed: o, iv: n };
}
function cp(i, e) {
  const t = Ws(i);
  return Lc({ type: bs(t.type), senderPublicKey: typeof t.senderPublicKey < "u" ? Ne(t.senderPublicKey, vt) : void 0, receiverPublicKey: e?.receiverPublicKey });
}
function Lc(i) {
  const e = i?.type || Uc;
  if (e === Di) {
    if (typeof i?.senderPublicKey > "u")
      throw new Error("missing sender public key");
    if (typeof i?.receiverPublicKey > "u")
      throw new Error("missing receiver public key");
  }
  return { type: e, senderPublicKey: i?.senderPublicKey, receiverPublicKey: i?.receiverPublicKey };
}
function Co(i) {
  return i.type === Di && typeof i.senderPublicKey == "string" && typeof i.receiverPublicKey == "string";
}
var hp = Object.defineProperty, Ao = Object.getOwnPropertySymbols, up = Object.prototype.hasOwnProperty, lp = Object.prototype.propertyIsEnumerable, To = (i, e, t) => e in i ? hp(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, $o = (i, e) => {
  for (var t in e || (e = {}))
    up.call(e, t) && To(i, t, e[t]);
  if (Ao)
    for (var t of Ao(e))
      lp.call(e, t) && To(i, t, e[t]);
  return i;
};
const dp = "ReactNative", Ot = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" }, fp = "js";
function yn() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function hr() {
  return !un() && !!ws() && navigator.product === dp;
}
function vs() {
  return !yn() && !!ws();
}
function _s() {
  return hr() ? Ot.reactNative : yn() ? Ot.node : vs() ? Ot.browser : Ot.unknown;
}
function pp(i, e) {
  let t = ii.parse(i);
  return t = $o($o({}, t), e), i = ii.stringify(t), i;
}
function gp() {
  return fn() || { name: "", description: "", url: "", icons: [""] };
}
function yp() {
  if (_s() === Ot.reactNative && typeof global < "u" && typeof (global == null ? void 0 : global.Platform) < "u") {
    const { OS: t, Version: s } = global.Platform;
    return [t, s].join("-");
  }
  const i = hn();
  if (i === null)
    return "unknown";
  const e = i.os ? i.os.replace(" ", "").toLowerCase() : "unknown";
  return i.type === "browser" ? [e, i.name, i.version].join("-") : [e, i.version].join("-");
}
function mp() {
  var i;
  const e = _s();
  return e === Ot.browser ? [e, ((i = ln()) == null ? void 0 : i.host) || "unknown"].join(":") : e;
}
function wp(i, e, t) {
  const s = yp(), r = mp();
  return [[i, e].join("-"), [fp, t].join("-"), s, r].join("/");
}
function bp({ protocol: i, version: e, relayUrl: t, sdkVersion: s, auth: r, projectId: n, useOnCloseEvent: o }) {
  const c = t.split("?"), u = wp(i, e, s), d = { auth: r, ua: u, projectId: n, useOnCloseEvent: o || void 0 }, p = pp(c[1] || "", d);
  return c[0] + "?" + p;
}
function _i(i, e) {
  return i.filter((t) => e.includes(t)).length === i.length;
}
function Mc(i) {
  return Object.fromEntries(i.entries());
}
function qc(i) {
  return new Map(Object.entries(i));
}
function Ai(i = V.FIVE_MINUTES, e) {
  const t = V.toMiliseconds(i || V.FIVE_MINUTES);
  let s, r, n;
  return { resolve: (o) => {
    n && s && (clearTimeout(n), s(o));
  }, reject: (o) => {
    n && r && (clearTimeout(n), r(o));
  }, done: () => new Promise((o, c) => {
    n = setTimeout(() => {
      c(new Error(e));
    }, t), s = o, r = c;
  }) };
}
function ds(i, e, t) {
  return new Promise(async (s, r) => {
    const n = setTimeout(() => r(new Error(t)), e);
    try {
      const o = await i;
      s(o);
    } catch (o) {
      r(o);
    }
    clearTimeout(n);
  });
}
function jc(i, e) {
  if (typeof e == "string" && e.startsWith(`${i}:`))
    return e;
  if (i.toLowerCase() === "topic") {
    if (typeof e != "string")
      throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e}`;
  } else if (i.toLowerCase() === "id") {
    if (typeof e != "number")
      throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e}`;
  }
  throw new Error(`Unknown expirer target type: ${i}`);
}
function vp(i) {
  return jc("topic", i);
}
function _p(i) {
  return jc("id", i);
}
function zc(i) {
  const [e, t] = i.split(":"), s = { id: void 0, topic: void 0 };
  if (e === "topic" && typeof t == "string")
    s.topic = t;
  else if (e === "id" && Number.isInteger(Number(t)))
    s.id = Number(t);
  else
    throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${t}`);
  return s;
}
function Mt(i, e) {
  return V.fromMiliseconds((e || Date.now()) + V.toMiliseconds(i));
}
function ai(i) {
  return Date.now() >= V.toMiliseconds(i);
}
function Be(i, e) {
  return `${i}${e ? `:${e}` : ""}`;
}
async function Ep({ id: i, topic: e, wcDeepLink: t }) {
  try {
    if (!t)
      return;
    let r = (typeof t == "string" ? JSON.parse(t) : t)?.href;
    if (typeof r != "string")
      return;
    r.endsWith("/") && (r = r.slice(0, -1));
    const n = `${r}/wc?requestId=${i}&sessionTopic=${e}`, o = _s();
    o === Ot.browser ? n.startsWith("https://") ? window.open(n, "_blank", "noreferrer noopener") : window.open(n, "_self", "noreferrer noopener") : o === Ot.reactNative && typeof (global == null ? void 0 : global.Linking) < "u" && await global.Linking.openURL(n);
  } catch (s) {
    console.error(s);
  }
}
const Sp = "irn";
function Gr(i) {
  return i?.relay || { protocol: Sp };
}
function qs(i) {
  const e = Tc[i];
  if (typeof e > "u")
    throw new Error(`Relay Protocol not supported: ${i}`);
  return e;
}
var Ip = Object.defineProperty, Fo = Object.getOwnPropertySymbols, Dp = Object.prototype.hasOwnProperty, xp = Object.prototype.propertyIsEnumerable, Uo = (i, e, t) => e in i ? Ip(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, Op = (i, e) => {
  for (var t in e || (e = {}))
    Dp.call(e, t) && Uo(i, t, e[t]);
  if (Fo)
    for (var t of Fo(e))
      xp.call(e, t) && Uo(i, t, e[t]);
  return i;
};
function Np(i, e = "-") {
  const t = {}, s = "relay" + e;
  return Object.keys(i).forEach((r) => {
    if (r.startsWith(s)) {
      const n = r.replace(s, ""), o = i[r];
      t[n] = o;
    }
  }), t;
}
function Pp(i) {
  const e = i.indexOf(":"), t = i.indexOf("?") !== -1 ? i.indexOf("?") : void 0, s = i.substring(0, e), r = i.substring(e + 1, t).split("@"), n = typeof t < "u" ? i.substring(t) : "", o = ii.parse(n);
  return { protocol: s, topic: Rp(r[0]), version: parseInt(r[1], 10), symKey: o.symKey, relay: Np(o) };
}
function Rp(i) {
  return i.startsWith("//") ? i.substring(2) : i;
}
function Cp(i, e = "-") {
  const t = "relay", s = {};
  return Object.keys(i).forEach((r) => {
    const n = t + e + r;
    i[r] && (s[n] = i[r]);
  }), s;
}
function Ap(i) {
  return `${i.protocol}:${i.topic}@${i.version}?` + ii.stringify(Op({ symKey: i.symKey }, Cp(i.relay)));
}
function Mi(i) {
  const e = [];
  return i.forEach((t) => {
    const [s, r] = t.split(":");
    e.push(`${s}:${r}`);
  }), e;
}
function Tp(i) {
  const e = [];
  return Object.values(i).forEach((t) => {
    e.push(...Mi(t.accounts));
  }), e;
}
function $p(i, e) {
  const t = [];
  return Object.values(i).forEach((s) => {
    Mi(s.accounts).includes(e) && t.push(...s.methods);
  }), t;
}
function Fp(i, e) {
  const t = [];
  return Object.values(i).forEach((s) => {
    Mi(s.accounts).includes(e) && t.push(...s.events);
  }), t;
}
function Up(i, e) {
  const t = js(i, e);
  if (t)
    throw new Error(t.message);
  const s = {};
  for (const [r, n] of Object.entries(i))
    s[r] = { methods: n.methods, events: n.events, chains: n.accounts.map((o) => `${o.split(":")[0]}:${o.split(":")[1]}`) };
  return s;
}
const Lp = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } }, Mp = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function Y(i, e) {
  const { message: t, code: s } = Mp[i];
  return { message: e ? `${t} ${e}` : t, code: s };
}
function nt(i, e) {
  const { message: t, code: s } = Lp[i];
  return { message: e ? `${t} ${e}` : t, code: s };
}
function Es(i, e) {
  return Array.isArray(i) ? typeof e < "u" && i.length ? i.every(e) : !0 : !1;
}
function cs(i) {
  return Object.getPrototypeOf(i) === Object.prototype && Object.keys(i).length;
}
function wt(i) {
  return typeof i > "u";
}
function ot(i, e) {
  return e && wt(i) ? !0 : typeof i == "string" && !!i.trim().length;
}
function mn(i, e) {
  return e && wt(i) ? !0 : typeof i == "number" && !isNaN(i);
}
function qp(i, e) {
  const { requiredNamespaces: t } = e, s = Object.keys(i.namespaces), r = Object.keys(t);
  let n = !0;
  return _i(r, s) ? (s.forEach((o) => {
    const { accounts: c, methods: u, events: d } = i.namespaces[o], p = Mi(c), w = t[o];
    (!_i($c(o, w), p) || !_i(w.methods, u) || !_i(w.events, d)) && (n = !1);
  }), n) : !1;
}
function Ys(i) {
  return ot(i, !1) && i.includes(":") ? i.split(":").length === 2 : !1;
}
function jp(i) {
  if (ot(i, !1) && i.includes(":")) {
    const e = i.split(":");
    if (e.length === 3) {
      const t = e[0] + ":" + e[1];
      return !!e[2] && Ys(t);
    }
  }
  return !1;
}
function zp(i) {
  if (ot(i, !1))
    try {
      return typeof new URL(i) < "u";
    } catch {
      return !1;
    }
  return !1;
}
function Kp(i) {
  var e;
  return (e = i?.proposer) == null ? void 0 : e.publicKey;
}
function Vp(i) {
  return i?.topic;
}
function Bp(i, e) {
  let t = null;
  return ot(i?.publicKey, !1) || (t = Y("MISSING_OR_INVALID", `${e} controller public key should be a string`)), t;
}
function Lo(i) {
  let e = !0;
  return Es(i) ? i.length && (e = i.every((t) => ot(t, !1))) : e = !1, e;
}
function kp(i, e, t) {
  let s = null;
  return Es(e) && e.length ? e.forEach((r) => {
    s || Ys(r) || (s = nt("UNSUPPORTED_CHAINS", `${t}, chain ${r} should be a string and conform to "namespace:chainId" format`));
  }) : Ys(i) || (s = nt("UNSUPPORTED_CHAINS", `${t}, chains must be defined as "namespace:chainId" e.g. "eip155:1": {...} in the namespace key OR as an array of CAIP-2 chainIds e.g. eip155: { chains: ["eip155:1", "eip155:5"] }`)), s;
}
function Hp(i, e, t) {
  let s = null;
  return Object.entries(i).forEach(([r, n]) => {
    if (s)
      return;
    const o = kp(r, $c(r, n), `${e} ${t}`);
    o && (s = o);
  }), s;
}
function Gp(i, e) {
  let t = null;
  return Es(i) ? i.forEach((s) => {
    t || jp(s) || (t = nt("UNSUPPORTED_ACCOUNTS", `${e}, account ${s} should be a string and conform to "namespace:chainId:address" format`));
  }) : t = nt("UNSUPPORTED_ACCOUNTS", `${e}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), t;
}
function Wp(i, e) {
  let t = null;
  return Object.values(i).forEach((s) => {
    if (t)
      return;
    const r = Gp(s?.accounts, `${e} namespace`);
    r && (t = r);
  }), t;
}
function Yp(i, e) {
  let t = null;
  return Lo(i?.methods) ? Lo(i?.events) || (t = nt("UNSUPPORTED_EVENTS", `${e}, events should be an array of strings or empty array for no events`)) : t = nt("UNSUPPORTED_METHODS", `${e}, methods should be an array of strings or empty array for no methods`), t;
}
function Kc(i, e) {
  let t = null;
  return Object.values(i).forEach((s) => {
    if (t)
      return;
    const r = Yp(s, `${e}, namespace`);
    r && (t = r);
  }), t;
}
function Jp(i, e, t) {
  let s = null;
  if (i && cs(i)) {
    const r = Kc(i, e);
    r && (s = r);
    const n = Hp(i, e, t);
    n && (s = n);
  } else
    s = Y("MISSING_OR_INVALID", `${e}, ${t} should be an object with data`);
  return s;
}
function js(i, e) {
  let t = null;
  if (i && cs(i)) {
    const s = Kc(i, e);
    s && (t = s);
    const r = Wp(i, e);
    r && (t = r);
  } else
    t = Y("MISSING_OR_INVALID", `${e}, namespaces should be an object with data`);
  return t;
}
function Vc(i) {
  return ot(i.protocol, !0);
}
function Qp(i, e) {
  let t = !1;
  return e && !i ? t = !0 : i && Es(i) && i.length && i.forEach((s) => {
    t = Vc(s);
  }), t;
}
function Xp(i) {
  return typeof i == "number";
}
function St(i) {
  return typeof i < "u" && typeof i !== null;
}
function Zp(i) {
  return !(!i || typeof i != "object" || !i.code || !mn(i.code, !1) || !i.message || !ot(i.message, !1));
}
function eg(i) {
  return !(wt(i) || !ot(i.method, !1));
}
function tg(i) {
  return !(wt(i) || wt(i.result) && wt(i.error) || !mn(i.id, !1) || !ot(i.jsonrpc, !1));
}
function ig(i) {
  return !(wt(i) || !ot(i.name, !1));
}
function Mo(i, e) {
  return !(!Ys(e) || !Tp(i).includes(e));
}
function sg(i, e, t) {
  return ot(t, !1) ? $p(i, e).includes(t) : !1;
}
function rg(i, e, t) {
  return ot(t, !1) ? Fp(i, e).includes(t) : !1;
}
function qo(i, e, t) {
  let s = null;
  const r = ng(i), n = og(e), o = Object.keys(r), c = Object.keys(n), u = jo(Object.keys(i)), d = jo(Object.keys(e)), p = u.filter((w) => !d.includes(w));
  return p.length && (s = Y("NON_CONFORMING_NAMESPACES", `${t} namespaces keys don't satisfy requiredNamespaces.
      Required: ${p.toString()}
      Received: ${Object.keys(e).toString()}`)), _i(o, c) || (s = Y("NON_CONFORMING_NAMESPACES", `${t} namespaces chains don't satisfy required namespaces.
      Required: ${o.toString()}
      Approved: ${c.toString()}`)), Object.keys(e).forEach((w) => {
    if (!w.includes(":") || s)
      return;
    const D = Mi(e[w].accounts);
    D.includes(w) || (s = Y("NON_CONFORMING_NAMESPACES", `${t} namespaces accounts don't satisfy namespace accounts for ${w}
        Required: ${w}
        Approved: ${D.toString()}`));
  }), o.forEach((w) => {
    s || (_i(r[w].methods, n[w].methods) ? _i(r[w].events, n[w].events) || (s = Y("NON_CONFORMING_NAMESPACES", `${t} namespaces events don't satisfy namespace events for ${w}`)) : s = Y("NON_CONFORMING_NAMESPACES", `${t} namespaces methods don't satisfy namespace methods for ${w}`));
  }), s;
}
function ng(i) {
  const e = {};
  return Object.keys(i).forEach((t) => {
    var s;
    t.includes(":") ? e[t] = i[t] : (s = i[t].chains) == null || s.forEach((r) => {
      e[r] = { methods: i[t].methods, events: i[t].events };
    });
  }), e;
}
function jo(i) {
  return [...new Set(i.map((e) => e.includes(":") ? e.split(":")[0] : e))];
}
function og(i) {
  const e = {};
  return Object.keys(i).forEach((t) => {
    t.includes(":") ? e[t] = i[t] : Mi(i[t].accounts)?.forEach((r) => {
      e[r] = { accounts: i[t].accounts.filter((n) => n.includes(`${r}:`)), methods: i[t].methods, events: i[t].events };
    });
  }), e;
}
function ag(i, e) {
  return mn(i, !1) && i <= e.max && i >= e.min;
}
function zo() {
  const i = _s();
  return new Promise((e) => {
    switch (i) {
      case Ot.browser:
        e(cg());
        break;
      case Ot.reactNative:
        e(hg());
        break;
      case Ot.node:
        e(ug());
        break;
      default:
        e(!0);
    }
  });
}
function cg() {
  return vs() && navigator?.onLine;
}
async function hg() {
  return hr() && typeof global < "u" && global != null && global.NetInfo ? (await (global == null ? void 0 : global.NetInfo.fetch()))?.isConnected : !0;
}
function ug() {
  return !0;
}
function lg(i) {
  switch (_s()) {
    case Ot.browser:
      dg(i);
      break;
    case Ot.reactNative:
      fg(i);
      break;
  }
}
function dg(i) {
  vs() && (window.addEventListener("online", () => i(!0)), window.addEventListener("offline", () => i(!1)));
}
function fg(i) {
  hr() && typeof global < "u" && global != null && global.NetInfo && global?.NetInfo.addEventListener((e) => i(e?.isConnected));
}
const Dr = {};
let $s = class {
  static get(e) {
    return Dr[e];
  }
  static set(e, t) {
    Dr[e] = t;
  }
  static delete(e) {
    delete Dr[e];
  }
};
const pg = "PARSE_ERROR", gg = "INVALID_REQUEST", yg = "METHOD_NOT_FOUND", mg = "INVALID_PARAMS", Bc = "INTERNAL_ERROR", wn = "SERVER_ERROR", wg = [-32700, -32600, -32601, -32602, -32603], hs = {
  [pg]: { code: -32700, message: "Parse error" },
  [gg]: { code: -32600, message: "Invalid Request" },
  [yg]: { code: -32601, message: "Method not found" },
  [mg]: { code: -32602, message: "Invalid params" },
  [Bc]: { code: -32603, message: "Internal error" },
  [wn]: { code: -32e3, message: "Server error" }
}, kc = wn;
function bg(i) {
  return wg.includes(i);
}
function Ko(i) {
  return Object.keys(hs).includes(i) ? hs[i] : hs[kc];
}
function vg(i) {
  const e = Object.values(hs).find((t) => t.code === i);
  return e || hs[kc];
}
function _g(i, e, t) {
  return i.message.includes("getaddrinfo ENOTFOUND") || i.message.includes("connect ECONNREFUSED") ? new Error(`Unavailable ${t} RPC url at ${e}`) : i;
}
var Hc = {}, Qt = {}, Vo;
function Eg() {
  if (Vo)
    return Qt;
  Vo = 1, Object.defineProperty(Qt, "__esModule", { value: !0 }), Qt.isBrowserCryptoAvailable = Qt.getSubtleCrypto = Qt.getBrowerCrypto = void 0;
  function i() {
    return (mt === null || mt === void 0 ? void 0 : mt.crypto) || (mt === null || mt === void 0 ? void 0 : mt.msCrypto) || {};
  }
  Qt.getBrowerCrypto = i;
  function e() {
    const s = i();
    return s.subtle || s.webkitSubtle;
  }
  Qt.getSubtleCrypto = e;
  function t() {
    return !!i() && !!e();
  }
  return Qt.isBrowserCryptoAvailable = t, Qt;
}
var Xt = {}, Bo;
function Sg() {
  if (Bo)
    return Xt;
  Bo = 1, Object.defineProperty(Xt, "__esModule", { value: !0 }), Xt.isBrowser = Xt.isNode = Xt.isReactNative = void 0;
  function i() {
    return typeof document > "u" && typeof navigator < "u" && navigator.product === "ReactNative";
  }
  Xt.isReactNative = i;
  function e() {
    return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
  }
  Xt.isNode = e;
  function t() {
    return !i() && !e();
  }
  return Xt.isBrowser = t, Xt;
}
(function(i) {
  Object.defineProperty(i, "__esModule", { value: !0 });
  const e = Ft;
  e.__exportStar(Eg(), i), e.__exportStar(Sg(), i);
})(Hc);
function bn(i = 3) {
  const e = Date.now() * Math.pow(10, i), t = Math.floor(Math.random() * Math.pow(10, i));
  return e + t;
}
function vn(i = 6) {
  return BigInt(bn(i));
}
function ti(i, e, t) {
  return {
    id: t || bn(),
    jsonrpc: "2.0",
    method: i,
    params: e
  };
}
function xi(i, e) {
  return {
    id: i,
    jsonrpc: "2.0",
    result: e
  };
}
function qi(i, e, t) {
  return {
    id: i,
    jsonrpc: "2.0",
    error: Ig(e, t)
  };
}
function Ig(i, e) {
  return typeof i > "u" ? Ko(Bc) : (typeof i == "string" && (i = Object.assign(Object.assign({}, Ko(wn)), { message: i })), typeof e < "u" && (i.data = e), bg(i.code) && (i = vg(i.code)), i);
}
class Gc {
}
class Dg extends Gc {
  constructor(e) {
    super();
  }
}
class xg extends Gc {
  constructor() {
    super();
  }
}
class Og extends xg {
  constructor(e) {
    super();
  }
}
const Ng = "^wss?:";
function Pg(i) {
  const e = i.match(new RegExp(/^\w+:/, "gi"));
  if (!(!e || !e.length))
    return e[0];
}
function Rg(i, e) {
  const t = Pg(i);
  return typeof t > "u" ? !1 : new RegExp(e).test(t);
}
function ko(i) {
  return Rg(i, Ng);
}
function Cg(i) {
  return new RegExp("wss?://localhost(:d{2,5})?").test(i);
}
function Wc(i) {
  return typeof i == "object" && "id" in i && "jsonrpc" in i && i.jsonrpc === "2.0";
}
function ji(i) {
  return Wc(i) && "method" in i;
}
function Oi(i) {
  return Wc(i) && (ht(i) || Ge(i));
}
function ht(i) {
  return "result" in i;
}
function Ge(i) {
  return "error" in i;
}
class _n extends Og {
  constructor(e) {
    super(e), this.events = new We.EventEmitter(), this.hasRegisteredEventListeners = !1, this.connection = this.setConnection(e), this.connection.connected && this.registerEventListeners();
  }
  async connect(e = this.connection) {
    await this.open(e);
  }
  async disconnect() {
    await this.close();
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async request(e, t) {
    return this.requestStrict(ti(e.method, e.params || [], e.id || vn().toString()), t);
  }
  async requestStrict(e, t) {
    return new Promise(async (s, r) => {
      if (!this.connection.connected)
        try {
          await this.open();
        } catch (n) {
          r(n);
        }
      this.events.on(`${e.id}`, (n) => {
        Ge(n) ? r(n.error) : s(n.result);
      });
      try {
        await this.connection.send(e, t);
      } catch (n) {
        r(n);
      }
    });
  }
  setConnection(e = this.connection) {
    return e;
  }
  onPayload(e) {
    this.events.emit("payload", e), Oi(e) ? this.events.emit(`${e.id}`, e) : this.events.emit("message", {
      type: e.method,
      data: e.params
    });
  }
  onClose(e) {
    e && e.code === 3e3 && this.events.emit("error", new Error(`WebSocket connection closed abnormally with code: ${e.code} ${e.reason ? `(${e.reason})` : ""}`)), this.events.emit("disconnect");
  }
  async open(e = this.connection) {
    this.connection === e && this.connection.connected || (this.connection.connected && this.close(), typeof e == "string" && (await this.connection.open(e), e = this.connection), this.connection = this.setConnection(e), await this.connection.open(), this.registerEventListeners(), this.events.emit("connect"));
  }
  async close() {
    await this.connection.close();
  }
  registerEventListeners() {
    this.hasRegisteredEventListeners || (this.connection.on("payload", (e) => this.onPayload(e)), this.connection.on("close", (e) => this.onClose(e)), this.connection.on("error", (e) => this.events.emit("error", e)), this.connection.on("register_error", (e) => this.onClose()), this.hasRegisteredEventListeners = !0);
  }
}
const Ag = () => typeof WebSocket < "u" ? WebSocket : typeof global < "u" && typeof global.WebSocket < "u" ? global.WebSocket : typeof window < "u" && typeof window.WebSocket < "u" ? window.WebSocket : typeof self < "u" && typeof self.WebSocket < "u" ? self.WebSocket : require("ws"), Tg = () => typeof WebSocket < "u" || typeof global < "u" && typeof global.WebSocket < "u" || typeof window < "u" && typeof window.WebSocket < "u" || typeof self < "u" && typeof self.WebSocket < "u", Ho = (i) => i.split("?")[0], Go = 10, $g = Ag();
class Yc {
  constructor(e) {
    if (this.url = e, this.events = new We.EventEmitter(), this.registering = !1, !ko(e))
      throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);
    this.url = e;
  }
  get connected() {
    return typeof this.socket < "u";
  }
  get connecting() {
    return this.registering;
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async open(e = this.url) {
    await this.register(e);
  }
  async close() {
    return new Promise((e, t) => {
      if (typeof this.socket > "u") {
        t(new Error("Connection already closed"));
        return;
      }
      this.socket.onclose = (s) => {
        this.onClose(s), e();
      }, this.socket.close();
    });
  }
  async send(e, t) {
    typeof this.socket > "u" && (this.socket = await this.register());
    try {
      this.socket.send(sr(e));
    } catch (s) {
      this.onError(e.id, s);
    }
  }
  register(e = this.url) {
    if (!ko(e))
      throw new Error(`Provided URL is not compatible with WebSocket connection: ${e}`);
    if (this.registering) {
      const t = this.events.getMaxListeners();
      return (this.events.listenerCount("register_error") >= t || this.events.listenerCount("open") >= t) && this.events.setMaxListeners(t + 1), new Promise((s, r) => {
        this.events.once("register_error", (n) => {
          this.resetMaxListeners(), r(n);
        }), this.events.once("open", () => {
          if (this.resetMaxListeners(), typeof this.socket > "u")
            return r(new Error("WebSocket connection is missing or invalid"));
          s(this.socket);
        });
      });
    }
    return this.url = e, this.registering = !0, new Promise((t, s) => {
      const r = Hc.isReactNative() ? void 0 : { rejectUnauthorized: !Cg(e) }, n = new $g(e, [], r);
      Tg() ? n.onerror = (o) => {
        const c = o;
        s(this.emitError(c.error));
      } : n.on("error", (o) => {
        s(this.emitError(o));
      }), n.onopen = () => {
        this.onOpen(n), t(n);
      };
    });
  }
  onOpen(e) {
    e.onmessage = (t) => this.onPayload(t), e.onclose = (t) => this.onClose(t), this.socket = e, this.registering = !1, this.events.emit("open");
  }
  onClose(e) {
    this.socket = void 0, this.registering = !1, this.events.emit("close", e);
  }
  onPayload(e) {
    if (typeof e.data > "u")
      return;
    const t = typeof e.data == "string" ? rn(e.data) : e.data;
    this.events.emit("payload", t);
  }
  onError(e, t) {
    const s = this.parseError(t), r = s.message || s.toString(), n = qi(e, r);
    this.events.emit("payload", n);
  }
  parseError(e, t = this.url) {
    return _g(e, Ho(t), "WS");
  }
  resetMaxListeners() {
    this.events.getMaxListeners() > Go && this.events.setMaxListeners(Go);
  }
  emitError(e) {
    const t = this.parseError(new Error(e?.message || `WebSocket connection failed for host: ${Ho(this.url)}`));
    return this.events.emit("register_error", t), t;
  }
}
var Js = { exports: {} };
Js.exports;
(function(i, e) {
  var t = 200, s = "__lodash_hash_undefined__", r = 1, n = 2, o = 9007199254740991, c = "[object Arguments]", u = "[object Array]", d = "[object AsyncFunction]", p = "[object Boolean]", w = "[object Date]", D = "[object Error]", x = "[object Function]", E = "[object GeneratorFunction]", C = "[object Map]", F = "[object Number]", K = "[object Null]", I = "[object Object]", O = "[object Promise]", y = "[object Proxy]", b = "[object RegExp]", f = "[object Set]", a = "[object String]", l = "[object Symbol]", L = "[object Undefined]", v = "[object WeakMap]", R = "[object ArrayBuffer]", $ = "[object DataView]", q = "[object Float32Array]", m = "[object Float64Array]", _ = "[object Int8Array]", B = "[object Int16Array]", z = "[object Int32Array]", j = "[object Uint8Array]", U = "[object Uint8ClampedArray]", M = "[object Uint16Array]", H = "[object Uint32Array]", te = /[\\^$.*+?()[\]{}|]/g, G = /^\[object .+?Constructor\]$/, ie = /^(?:0|[1-9]\d*)$/, Q = {};
  Q[q] = Q[m] = Q[_] = Q[B] = Q[z] = Q[j] = Q[U] = Q[M] = Q[H] = !0, Q[c] = Q[u] = Q[R] = Q[p] = Q[$] = Q[w] = Q[D] = Q[x] = Q[C] = Q[F] = Q[I] = Q[b] = Q[f] = Q[a] = Q[v] = !1;
  var se = typeof mt == "object" && mt && mt.Object === Object && mt, T = typeof self == "object" && self && self.Object === Object && self, A = se || T || Function("return this")(), N = e && !e.nodeType && e, h = N && !0 && i && !i.nodeType && i, S = h && h.exports === N, W = S && se.process, X = function() {
    try {
      return W && W.binding && W.binding("util");
    } catch {
    }
  }(), fe = X && X.isTypedArray;
  function ve(g, P) {
    for (var k = -1, Z = g == null ? 0 : g.length, Re = 0, ae = []; ++k < Z; ) {
      var Le = g[k];
      P(Le, k, g) && (ae[Re++] = Le);
    }
    return ae;
  }
  function ge(g, P) {
    for (var k = -1, Z = P.length, Re = g.length; ++k < Z; )
      g[Re + k] = P[k];
    return g;
  }
  function Se(g, P) {
    for (var k = -1, Z = g == null ? 0 : g.length; ++k < Z; )
      if (P(g[k], k, g))
        return !0;
    return !1;
  }
  function Me(g, P) {
    for (var k = -1, Z = Array(g); ++k < g; )
      Z[k] = P(k);
    return Z;
  }
  function $e(g) {
    return function(P) {
      return g(P);
    };
  }
  function we(g, P) {
    return g.has(P);
  }
  function ye(g, P) {
    return g?.[P];
  }
  function pe(g) {
    var P = -1, k = Array(g.size);
    return g.forEach(function(Z, Re) {
      k[++P] = [Re, Z];
    }), k;
  }
  function le(g, P) {
    return function(k) {
      return g(P(k));
    };
  }
  function ue(g) {
    var P = -1, k = Array(g.size);
    return g.forEach(function(Z) {
      k[++P] = Z;
    }), k;
  }
  var he = Array.prototype, ce = Function.prototype, re = Object.prototype, de = A["__core-js_shared__"], me = ce.toString, ne = re.hasOwnProperty, _e = function() {
    var g = /[^.]+$/.exec(de && de.keys && de.keys.IE_PROTO || "");
    return g ? "Symbol(src)_1." + g : "";
  }(), Ee = re.toString, De = RegExp(
    "^" + me.call(ne).replace(te, "\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g, "$1.*?") + "$"
  ), xe = S ? A.Buffer : void 0, Ie = A.Symbol, Ut = A.Uint8Array, qt = re.propertyIsEnumerable, si = he.splice, Dt = Ie ? Ie.toStringTag : void 0, fi = Object.getOwnPropertySymbols, Ki = xe ? xe.isBuffer : void 0, Os = le(Object.keys, Object), qe = Pi(A, "DataView"), Fe = Pi(A, "Map"), je = Pi(A, "Promise"), ze = Pi(A, "Set"), Ke = Pi(A, "WeakMap"), Ue = Pi(Object, "create"), Qe = gi(qe), Xe = gi(Fe), Ze = gi(je), et = gi(ze), tt = gi(Ke), Ye = Ie ? Ie.prototype : void 0, Ve = Ye ? Ye.valueOf : void 0;
  function Ae(g) {
    var P = -1, k = g == null ? 0 : g.length;
    for (this.clear(); ++P < k; ) {
      var Z = g[P];
      this.set(Z[0], Z[1]);
    }
  }
  function it() {
    this.__data__ = Ue ? Ue(null) : {}, this.size = 0;
  }
  function st(g) {
    var P = this.has(g) && delete this.__data__[g];
    return this.size -= P ? 1 : 0, P;
  }
  function Hh(g) {
    var P = this.__data__;
    if (Ue) {
      var k = P[g];
      return k === s ? void 0 : k;
    }
    return ne.call(P, g) ? P[g] : void 0;
  }
  function Gh(g) {
    var P = this.__data__;
    return Ue ? P[g] !== void 0 : ne.call(P, g);
  }
  function Wh(g, P) {
    var k = this.__data__;
    return this.size += this.has(g) ? 0 : 1, k[g] = Ue && P === void 0 ? s : P, this;
  }
  Ae.prototype.clear = it, Ae.prototype.delete = st, Ae.prototype.get = Hh, Ae.prototype.has = Gh, Ae.prototype.set = Wh;
  function Yt(g) {
    var P = -1, k = g == null ? 0 : g.length;
    for (this.clear(); ++P < k; ) {
      var Z = g[P];
      this.set(Z[0], Z[1]);
    }
  }
  function Yh() {
    this.__data__ = [], this.size = 0;
  }
  function Jh(g) {
    var P = this.__data__, k = Ps(P, g);
    if (k < 0)
      return !1;
    var Z = P.length - 1;
    return k == Z ? P.pop() : si.call(P, k, 1), --this.size, !0;
  }
  function Qh(g) {
    var P = this.__data__, k = Ps(P, g);
    return k < 0 ? void 0 : P[k][1];
  }
  function Xh(g) {
    return Ps(this.__data__, g) > -1;
  }
  function Zh(g, P) {
    var k = this.__data__, Z = Ps(k, g);
    return Z < 0 ? (++this.size, k.push([g, P])) : k[Z][1] = P, this;
  }
  Yt.prototype.clear = Yh, Yt.prototype.delete = Jh, Yt.prototype.get = Qh, Yt.prototype.has = Xh, Yt.prototype.set = Zh;
  function pi(g) {
    var P = -1, k = g == null ? 0 : g.length;
    for (this.clear(); ++P < k; ) {
      var Z = g[P];
      this.set(Z[0], Z[1]);
    }
  }
  function eu() {
    this.size = 0, this.__data__ = {
      hash: new Ae(),
      map: new (Fe || Yt)(),
      string: new Ae()
    };
  }
  function tu(g) {
    var P = Rs(this, g).delete(g);
    return this.size -= P ? 1 : 0, P;
  }
  function iu(g) {
    return Rs(this, g).get(g);
  }
  function su(g) {
    return Rs(this, g).has(g);
  }
  function ru(g, P) {
    var k = Rs(this, g), Z = k.size;
    return k.set(g, P), this.size += k.size == Z ? 0 : 1, this;
  }
  pi.prototype.clear = eu, pi.prototype.delete = tu, pi.prototype.get = iu, pi.prototype.has = su, pi.prototype.set = ru;
  function Ns(g) {
    var P = -1, k = g == null ? 0 : g.length;
    for (this.__data__ = new pi(); ++P < k; )
      this.add(g[P]);
  }
  function nu(g) {
    return this.__data__.set(g, s), this;
  }
  function ou(g) {
    return this.__data__.has(g);
  }
  Ns.prototype.add = Ns.prototype.push = nu, Ns.prototype.has = ou;
  function ri(g) {
    var P = this.__data__ = new Yt(g);
    this.size = P.size;
  }
  function au() {
    this.__data__ = new Yt(), this.size = 0;
  }
  function cu(g) {
    var P = this.__data__, k = P.delete(g);
    return this.size = P.size, k;
  }
  function hu(g) {
    return this.__data__.get(g);
  }
  function uu(g) {
    return this.__data__.has(g);
  }
  function lu(g, P) {
    var k = this.__data__;
    if (k instanceof Yt) {
      var Z = k.__data__;
      if (!Fe || Z.length < t - 1)
        return Z.push([g, P]), this.size = ++k.size, this;
      k = this.__data__ = new pi(Z);
    }
    return k.set(g, P), this.size = k.size, this;
  }
  ri.prototype.clear = au, ri.prototype.delete = cu, ri.prototype.get = hu, ri.prototype.has = uu, ri.prototype.set = lu;
  function du(g, P) {
    var k = Cs(g), Z = !k && Ou(g), Re = !k && !Z && pr(g), ae = !k && !Z && !Re && Kn(g), Le = k || Z || Re || ae, rt = Le ? Me(g.length, String) : [], ct = rt.length;
    for (var Te in g)
      (P || ne.call(g, Te)) && !(Le && // Safari 9 has enumerable `arguments.length` in strict mode.
      (Te == "length" || // Node.js 0.10 has enumerable non-index properties on buffers.
      Re && (Te == "offset" || Te == "parent") || // PhantomJS 2 has enumerable non-index properties on typed arrays.
      ae && (Te == "buffer" || Te == "byteLength" || Te == "byteOffset") || // Skip index properties.
      Eu(Te, ct))) && rt.push(Te);
    return rt;
  }
  function Ps(g, P) {
    for (var k = g.length; k--; )
      if (Mn(g[k][0], P))
        return k;
    return -1;
  }
  function fu(g, P, k) {
    var Z = P(g);
    return Cs(g) ? Z : ge(Z, k(g));
  }
  function Vi(g) {
    return g == null ? g === void 0 ? L : K : Dt && Dt in Object(g) ? vu(g) : xu(g);
  }
  function $n(g) {
    return Bi(g) && Vi(g) == c;
  }
  function Fn(g, P, k, Z, Re) {
    return g === P ? !0 : g == null || P == null || !Bi(g) && !Bi(P) ? g !== g && P !== P : pu(g, P, k, Z, Fn, Re);
  }
  function pu(g, P, k, Z, Re, ae) {
    var Le = Cs(g), rt = Cs(P), ct = Le ? u : ni(g), Te = rt ? u : ni(P);
    ct = ct == c ? I : ct, Te = Te == c ? I : Te;
    var xt = ct == I, Lt = Te == I, ft = ct == Te;
    if (ft && pr(g)) {
      if (!pr(P))
        return !1;
      Le = !0, xt = !1;
    }
    if (ft && !xt)
      return ae || (ae = new ri()), Le || Kn(g) ? Un(g, P, k, Z, Re, ae) : wu(g, P, ct, k, Z, Re, ae);
    if (!(k & r)) {
      var Rt = xt && ne.call(g, "__wrapped__"), Ct = Lt && ne.call(P, "__wrapped__");
      if (Rt || Ct) {
        var oi = Rt ? g.value() : g, Jt = Ct ? P.value() : P;
        return ae || (ae = new ri()), Re(oi, Jt, k, Z, ae);
      }
    }
    return ft ? (ae || (ae = new ri()), bu(g, P, k, Z, Re, ae)) : !1;
  }
  function gu(g) {
    if (!zn(g) || Iu(g))
      return !1;
    var P = qn(g) ? De : G;
    return P.test(gi(g));
  }
  function yu(g) {
    return Bi(g) && jn(g.length) && !!Q[Vi(g)];
  }
  function mu(g) {
    if (!Du(g))
      return Os(g);
    var P = [];
    for (var k in Object(g))
      ne.call(g, k) && k != "constructor" && P.push(k);
    return P;
  }
  function Un(g, P, k, Z, Re, ae) {
    var Le = k & r, rt = g.length, ct = P.length;
    if (rt != ct && !(Le && ct > rt))
      return !1;
    var Te = ae.get(g);
    if (Te && ae.get(P))
      return Te == P;
    var xt = -1, Lt = !0, ft = k & n ? new Ns() : void 0;
    for (ae.set(g, P), ae.set(P, g); ++xt < rt; ) {
      var Rt = g[xt], Ct = P[xt];
      if (Z)
        var oi = Le ? Z(Ct, Rt, xt, P, g, ae) : Z(Rt, Ct, xt, g, P, ae);
      if (oi !== void 0) {
        if (oi)
          continue;
        Lt = !1;
        break;
      }
      if (ft) {
        if (!Se(P, function(Jt, yi) {
          if (!we(ft, yi) && (Rt === Jt || Re(Rt, Jt, k, Z, ae)))
            return ft.push(yi);
        })) {
          Lt = !1;
          break;
        }
      } else if (!(Rt === Ct || Re(Rt, Ct, k, Z, ae))) {
        Lt = !1;
        break;
      }
    }
    return ae.delete(g), ae.delete(P), Lt;
  }
  function wu(g, P, k, Z, Re, ae, Le) {
    switch (k) {
      case $:
        if (g.byteLength != P.byteLength || g.byteOffset != P.byteOffset)
          return !1;
        g = g.buffer, P = P.buffer;
      case R:
        return !(g.byteLength != P.byteLength || !ae(new Ut(g), new Ut(P)));
      case p:
      case w:
      case F:
        return Mn(+g, +P);
      case D:
        return g.name == P.name && g.message == P.message;
      case b:
      case a:
        return g == P + "";
      case C:
        var rt = pe;
      case f:
        var ct = Z & r;
        if (rt || (rt = ue), g.size != P.size && !ct)
          return !1;
        var Te = Le.get(g);
        if (Te)
          return Te == P;
        Z |= n, Le.set(g, P);
        var xt = Un(rt(g), rt(P), Z, Re, ae, Le);
        return Le.delete(g), xt;
      case l:
        if (Ve)
          return Ve.call(g) == Ve.call(P);
    }
    return !1;
  }
  function bu(g, P, k, Z, Re, ae) {
    var Le = k & r, rt = Ln(g), ct = rt.length, Te = Ln(P), xt = Te.length;
    if (ct != xt && !Le)
      return !1;
    for (var Lt = ct; Lt--; ) {
      var ft = rt[Lt];
      if (!(Le ? ft in P : ne.call(P, ft)))
        return !1;
    }
    var Rt = ae.get(g);
    if (Rt && ae.get(P))
      return Rt == P;
    var Ct = !0;
    ae.set(g, P), ae.set(P, g);
    for (var oi = Le; ++Lt < ct; ) {
      ft = rt[Lt];
      var Jt = g[ft], yi = P[ft];
      if (Z)
        var Vn = Le ? Z(yi, Jt, ft, P, g, ae) : Z(Jt, yi, ft, g, P, ae);
      if (!(Vn === void 0 ? Jt === yi || Re(Jt, yi, k, Z, ae) : Vn)) {
        Ct = !1;
        break;
      }
      oi || (oi = ft == "constructor");
    }
    if (Ct && !oi) {
      var As = g.constructor, Ts = P.constructor;
      As != Ts && "constructor" in g && "constructor" in P && !(typeof As == "function" && As instanceof As && typeof Ts == "function" && Ts instanceof Ts) && (Ct = !1);
    }
    return ae.delete(g), ae.delete(P), Ct;
  }
  function Ln(g) {
    return fu(g, Ru, _u);
  }
  function Rs(g, P) {
    var k = g.__data__;
    return Su(P) ? k[typeof P == "string" ? "string" : "hash"] : k.map;
  }
  function Pi(g, P) {
    var k = ye(g, P);
    return gu(k) ? k : void 0;
  }
  function vu(g) {
    var P = ne.call(g, Dt), k = g[Dt];
    try {
      g[Dt] = void 0;
      var Z = !0;
    } catch {
    }
    var Re = Ee.call(g);
    return Z && (P ? g[Dt] = k : delete g[Dt]), Re;
  }
  var _u = fi ? function(g) {
    return g == null ? [] : (g = Object(g), ve(fi(g), function(P) {
      return qt.call(g, P);
    }));
  } : Cu, ni = Vi;
  (qe && ni(new qe(new ArrayBuffer(1))) != $ || Fe && ni(new Fe()) != C || je && ni(je.resolve()) != O || ze && ni(new ze()) != f || Ke && ni(new Ke()) != v) && (ni = function(g) {
    var P = Vi(g), k = P == I ? g.constructor : void 0, Z = k ? gi(k) : "";
    if (Z)
      switch (Z) {
        case Qe:
          return $;
        case Xe:
          return C;
        case Ze:
          return O;
        case et:
          return f;
        case tt:
          return v;
      }
    return P;
  });
  function Eu(g, P) {
    return P = P ?? o, !!P && (typeof g == "number" || ie.test(g)) && g > -1 && g % 1 == 0 && g < P;
  }
  function Su(g) {
    var P = typeof g;
    return P == "string" || P == "number" || P == "symbol" || P == "boolean" ? g !== "__proto__" : g === null;
  }
  function Iu(g) {
    return !!_e && _e in g;
  }
  function Du(g) {
    var P = g && g.constructor, k = typeof P == "function" && P.prototype || re;
    return g === k;
  }
  function xu(g) {
    return Ee.call(g);
  }
  function gi(g) {
    if (g != null) {
      try {
        return me.call(g);
      } catch {
      }
      try {
        return g + "";
      } catch {
      }
    }
    return "";
  }
  function Mn(g, P) {
    return g === P || g !== g && P !== P;
  }
  var Ou = $n(function() {
    return arguments;
  }()) ? $n : function(g) {
    return Bi(g) && ne.call(g, "callee") && !qt.call(g, "callee");
  }, Cs = Array.isArray;
  function Nu(g) {
    return g != null && jn(g.length) && !qn(g);
  }
  var pr = Ki || Au;
  function Pu(g, P) {
    return Fn(g, P);
  }
  function qn(g) {
    if (!zn(g))
      return !1;
    var P = Vi(g);
    return P == x || P == E || P == d || P == y;
  }
  function jn(g) {
    return typeof g == "number" && g > -1 && g % 1 == 0 && g <= o;
  }
  function zn(g) {
    var P = typeof g;
    return g != null && (P == "object" || P == "function");
  }
  function Bi(g) {
    return g != null && typeof g == "object";
  }
  var Kn = fe ? $e(fe) : yu;
  function Ru(g) {
    return Nu(g) ? du(g) : mu(g);
  }
  function Cu() {
    return [];
  }
  function Au() {
    return !1;
  }
  i.exports = Pu;
})(Js, Js.exports);
var Fg = Js.exports;
const Jc = /* @__PURE__ */ Wa(Fg);
function Ug(i, e) {
  if (i.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), s = 0; s < t.length; s++)
    t[s] = 255;
  for (var r = 0; r < i.length; r++) {
    var n = i.charAt(r), o = n.charCodeAt(0);
    if (t[o] !== 255)
      throw new TypeError(n + " is ambiguous");
    t[o] = r;
  }
  var c = i.length, u = i.charAt(0), d = Math.log(c) / Math.log(256), p = Math.log(256) / Math.log(c);
  function w(E) {
    if (E instanceof Uint8Array || (ArrayBuffer.isView(E) ? E = new Uint8Array(E.buffer, E.byteOffset, E.byteLength) : Array.isArray(E) && (E = Uint8Array.from(E))), !(E instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (E.length === 0)
      return "";
    for (var C = 0, F = 0, K = 0, I = E.length; K !== I && E[K] === 0; )
      K++, C++;
    for (var O = (I - K) * p + 1 >>> 0, y = new Uint8Array(O); K !== I; ) {
      for (var b = E[K], f = 0, a = O - 1; (b !== 0 || f < F) && a !== -1; a--, f++)
        b += 256 * y[a] >>> 0, y[a] = b % c >>> 0, b = b / c >>> 0;
      if (b !== 0)
        throw new Error("Non-zero carry");
      F = f, K++;
    }
    for (var l = O - F; l !== O && y[l] === 0; )
      l++;
    for (var L = u.repeat(C); l < O; ++l)
      L += i.charAt(y[l]);
    return L;
  }
  function D(E) {
    if (typeof E != "string")
      throw new TypeError("Expected String");
    if (E.length === 0)
      return new Uint8Array();
    var C = 0;
    if (E[C] !== " ") {
      for (var F = 0, K = 0; E[C] === u; )
        F++, C++;
      for (var I = (E.length - C) * d + 1 >>> 0, O = new Uint8Array(I); E[C]; ) {
        var y = t[E.charCodeAt(C)];
        if (y === 255)
          return;
        for (var b = 0, f = I - 1; (y !== 0 || b < K) && f !== -1; f--, b++)
          y += c * O[f] >>> 0, O[f] = y % 256 >>> 0, y = y / 256 >>> 0;
        if (y !== 0)
          throw new Error("Non-zero carry");
        K = b, C++;
      }
      if (E[C] !== " ") {
        for (var a = I - K; a !== I && O[a] === 0; )
          a++;
        for (var l = new Uint8Array(F + (I - a)), L = F; a !== I; )
          l[L++] = O[a++];
        return l;
      }
    }
  }
  function x(E) {
    var C = D(E);
    if (C)
      return C;
    throw new Error(`Non-${e} character`);
  }
  return { encode: w, decodeUnsafe: D, decode: x };
}
var Lg = Ug, Mg = Lg;
const Qc = (i) => {
  if (i instanceof Uint8Array && i.constructor.name === "Uint8Array")
    return i;
  if (i instanceof ArrayBuffer)
    return new Uint8Array(i);
  if (ArrayBuffer.isView(i))
    return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);
  throw new Error("Unknown type, must be binary type");
}, qg = (i) => new TextEncoder().encode(i), jg = (i) => new TextDecoder().decode(i);
let zg = class {
  constructor(e, t, s) {
    this.name = e, this.prefix = t, this.baseEncode = s;
  }
  encode(e) {
    if (e instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
}, Kg = class {
  constructor(e, t, s) {
    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e) {
    return Xc(this, e);
  }
}, Vg = class {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return Xc(this, e);
  }
  decode(e) {
    const t = e[0], s = this.decoders[t];
    if (s)
      return s.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
};
const Xc = (i, e) => new Vg({ ...i.decoders || { [i.prefix]: i }, ...e.decoders || { [e.prefix]: e } });
let Bg = class {
  constructor(e, t, s, r) {
    this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = r, this.encoder = new zg(e, t, s), this.decoder = new Kg(e, t, r);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
};
const ur = ({ name: i, prefix: e, encode: t, decode: s }) => new Bg(i, e, t, s), Ss = ({ prefix: i, name: e, alphabet: t }) => {
  const { encode: s, decode: r } = Mg(t, e);
  return ur({ prefix: i, name: e, encode: s, decode: (n) => Qc(r(n)) });
}, kg = (i, e, t, s) => {
  const r = {};
  for (let p = 0; p < e.length; ++p)
    r[e[p]] = p;
  let n = i.length;
  for (; i[n - 1] === "="; )
    --n;
  const o = new Uint8Array(n * t / 8 | 0);
  let c = 0, u = 0, d = 0;
  for (let p = 0; p < n; ++p) {
    const w = r[i[p]];
    if (w === void 0)
      throw new SyntaxError(`Non-${s} character`);
    u = u << t | w, c += t, c >= 8 && (c -= 8, o[d++] = 255 & u >> c);
  }
  if (c >= t || 255 & u << 8 - c)
    throw new SyntaxError("Unexpected end of data");
  return o;
}, Hg = (i, e, t) => {
  const s = e[e.length - 1] === "=", r = (1 << t) - 1;
  let n = "", o = 0, c = 0;
  for (let u = 0; u < i.length; ++u)
    for (c = c << 8 | i[u], o += 8; o > t; )
      o -= t, n += e[r & c >> o];
  if (o && (n += e[r & c << t - o]), s)
    for (; n.length * t & 7; )
      n += "=";
  return n;
}, lt = ({ name: i, prefix: e, bitsPerChar: t, alphabet: s }) => ur({ prefix: e, name: i, encode(r) {
  return Hg(r, s, t);
}, decode(r) {
  return kg(r, s, t, i);
} }), Gg = ur({ prefix: "\0", name: "identity", encode: (i) => jg(i), decode: (i) => qg(i) });
var Wg = Object.freeze({ __proto__: null, identity: Gg });
const Yg = lt({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var Jg = Object.freeze({ __proto__: null, base2: Yg });
const Qg = lt({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var Xg = Object.freeze({ __proto__: null, base8: Qg });
const Zg = Ss({ prefix: "9", name: "base10", alphabet: "0123456789" });
var ey = Object.freeze({ __proto__: null, base10: Zg });
const ty = lt({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 }), iy = lt({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var sy = Object.freeze({ __proto__: null, base16: ty, base16upper: iy });
const ry = lt({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 }), ny = lt({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 }), oy = lt({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 }), ay = lt({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 }), cy = lt({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 }), hy = lt({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 }), uy = lt({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 }), ly = lt({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 }), dy = lt({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var fy = Object.freeze({ __proto__: null, base32: ry, base32upper: ny, base32pad: oy, base32padupper: ay, base32hex: cy, base32hexupper: hy, base32hexpad: uy, base32hexpadupper: ly, base32z: dy });
const py = Ss({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" }), gy = Ss({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var yy = Object.freeze({ __proto__: null, base36: py, base36upper: gy });
const my = Ss({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" }), wy = Ss({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var by = Object.freeze({ __proto__: null, base58btc: my, base58flickr: wy });
const vy = lt({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 }), _y = lt({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 }), Ey = lt({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 }), Sy = lt({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Iy = Object.freeze({ __proto__: null, base64: vy, base64pad: _y, base64url: Ey, base64urlpad: Sy });
const Zc = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂"), Dy = Zc.reduce((i, e, t) => (i[t] = e, i), []), xy = Zc.reduce((i, e, t) => (i[e.codePointAt(0)] = t, i), []);
function Oy(i) {
  return i.reduce((e, t) => (e += Dy[t], e), "");
}
function Ny(i) {
  const e = [];
  for (const t of i) {
    const s = xy[t.codePointAt(0)];
    if (s === void 0)
      throw new Error(`Non-base256emoji character: ${t}`);
    e.push(s);
  }
  return new Uint8Array(e);
}
const Py = ur({ prefix: "🚀", name: "base256emoji", encode: Oy, decode: Ny });
var Ry = Object.freeze({ __proto__: null, base256emoji: Py }), Cy = eh, Wo = 128, Ay = 127, Ty = ~Ay, $y = Math.pow(2, 31);
function eh(i, e, t) {
  e = e || [], t = t || 0;
  for (var s = t; i >= $y; )
    e[t++] = i & 255 | Wo, i /= 128;
  for (; i & Ty; )
    e[t++] = i & 255 | Wo, i >>>= 7;
  return e[t] = i | 0, eh.bytes = t - s + 1, e;
}
var Fy = Wr, Uy = 128, Yo = 127;
function Wr(i, s) {
  var t = 0, s = s || 0, r = 0, n = s, o, c = i.length;
  do {
    if (n >= c)
      throw Wr.bytes = 0, new RangeError("Could not decode varint");
    o = i[n++], t += r < 28 ? (o & Yo) << r : (o & Yo) * Math.pow(2, r), r += 7;
  } while (o >= Uy);
  return Wr.bytes = n - s, t;
}
var Ly = Math.pow(2, 7), My = Math.pow(2, 14), qy = Math.pow(2, 21), jy = Math.pow(2, 28), zy = Math.pow(2, 35), Ky = Math.pow(2, 42), Vy = Math.pow(2, 49), By = Math.pow(2, 56), ky = Math.pow(2, 63), Hy = function(i) {
  return i < Ly ? 1 : i < My ? 2 : i < qy ? 3 : i < jy ? 4 : i < zy ? 5 : i < Ky ? 6 : i < Vy ? 7 : i < By ? 8 : i < ky ? 9 : 10;
}, Gy = { encode: Cy, decode: Fy, encodingLength: Hy }, th = Gy;
const Jo = (i, e, t = 0) => (th.encode(i, e, t), e), Qo = (i) => th.encodingLength(i), Yr = (i, e) => {
  const t = e.byteLength, s = Qo(i), r = s + Qo(t), n = new Uint8Array(r + t);
  return Jo(i, n, 0), Jo(t, n, s), n.set(e, r), new Wy(i, t, e, n);
};
let Wy = class {
  constructor(e, t, s, r) {
    this.code = e, this.size = t, this.digest = s, this.bytes = r;
  }
};
const ih = ({ name: i, code: e, encode: t }) => new Yy(i, e, t);
let Yy = class {
  constructor(e, t, s) {
    this.name = e, this.code = t, this.encode = s;
  }
  digest(e) {
    if (e instanceof Uint8Array) {
      const t = this.encode(e);
      return t instanceof Uint8Array ? Yr(this.code, t) : t.then((s) => Yr(this.code, s));
    } else
      throw Error("Unknown type, must be binary type");
  }
};
const sh = (i) => async (e) => new Uint8Array(await crypto.subtle.digest(i, e)), Jy = ih({ name: "sha2-256", code: 18, encode: sh("SHA-256") }), Qy = ih({ name: "sha2-512", code: 19, encode: sh("SHA-512") });
var Xy = Object.freeze({ __proto__: null, sha256: Jy, sha512: Qy });
const rh = 0, Zy = "identity", nh = Qc, e1 = (i) => Yr(rh, nh(i)), t1 = { code: rh, name: Zy, encode: nh, digest: e1 };
var i1 = Object.freeze({ __proto__: null, identity: t1 });
new TextEncoder(), new TextDecoder();
const Xo = { ...Wg, ...Jg, ...Xg, ...ey, ...sy, ...fy, ...yy, ...by, ...Iy, ...Ry };
({ ...Xy, ...i1 });
function oh(i) {
  return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;
}
function s1(i = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? oh(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);
}
function ah(i, e, t, s) {
  return { name: i, prefix: e, encoder: { name: i, prefix: e, encode: t }, decoder: { decode: s } };
}
const Zo = ah("utf8", "u", (i) => "u" + new TextDecoder("utf8").decode(i), (i) => new TextEncoder().encode(i.substring(1))), xr = ah("ascii", "a", (i) => {
  let e = "a";
  for (let t = 0; t < i.length; t++)
    e += String.fromCharCode(i[t]);
  return e;
}, (i) => {
  i = i.substring(1);
  const e = s1(i.length);
  for (let t = 0; t < i.length; t++)
    e[t] = i.charCodeAt(t);
  return e;
}), r1 = { utf8: Zo, "utf-8": Zo, hex: Xo.base16, latin1: xr, ascii: xr, binary: xr, ...Xo };
function n1(i, e = "utf8") {
  const t = r1[e];
  if (!t)
    throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? oh(globalThis.Buffer.from(i, "utf-8")) : t.decoder.decode(`${t.prefix}${i}`);
}
const ch = "wc", o1 = 2, En = "core", hi = `${ch}@2:${En}:`, a1 = { name: En, logger: "error" }, c1 = { database: ":memory:" }, h1 = "crypto", ea = "client_ed25519_seed", u1 = V.ONE_DAY, l1 = "keychain", d1 = "0.3", f1 = "messages", p1 = "0.3", g1 = V.SIX_HOURS, y1 = "publisher", hh = "irn", m1 = "error", uh = "wss://relay.walletconnect.com", ta = "wss://relay.walletconnect.org", w1 = "relayer", gt = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" }, b1 = "_subscription", Zt = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" }, v1 = V.ONE_SECOND, _1 = "2.10.1", E1 = 1e4, S1 = "0.3", I1 = "WALLETCONNECT_CLIENT_ID", Vt = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" }, D1 = "subscription", x1 = "0.3", O1 = V.FIVE_SECONDS * 1e3, N1 = "pairing", P1 = "0.3", Xi = { wc_pairingDelete: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1e3 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1001 } }, wc_pairingPing: { req: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1002 }, res: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1003 } }, unregistered_method: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 0 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 0 } } }, os = { create: "pairing_create", expire: "pairing_expire", delete: "pairing_delete", ping: "pairing_ping" }, zt = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" }, R1 = "history", C1 = "0.3", A1 = "expirer", Tt = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" }, T1 = "0.3", Or = "verify-api", zs = "https://verify.walletconnect.com", ia = "https://verify.walletconnect.org";
let $1 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, this.keychain = /* @__PURE__ */ new Map(), this.name = l1, this.version = d1, this.initialized = !1, this.storagePrefix = hi, this.init = async () => {
      if (!this.initialized) {
        const s = await this.getKeyChain();
        typeof s < "u" && (this.keychain = s), this.initialized = !0;
      }
    }, this.has = (s) => (this.isInitialized(), this.keychain.has(s)), this.set = async (s, r) => {
      this.isInitialized(), this.keychain.set(s, r), await this.persist();
    }, this.get = (s) => {
      this.isInitialized();
      const r = this.keychain.get(s);
      if (typeof r > "u") {
        const { message: n } = Y("NO_MATCHING_KEY", `${this.name}: ${s}`);
        throw new Error(n);
      }
      return r;
    }, this.del = async (s) => {
      this.isInitialized(), this.keychain.delete(s), await this.persist();
    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  async setKeyChain(e) {
    await this.core.storage.setItem(this.storageKey, Mc(e));
  }
  async getKeyChain() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? qc(e) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Y("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}, F1 = class {
  constructor(e, t, s) {
    this.core = e, this.logger = t, this.name = h1, this.initialized = !1, this.init = async () => {
      this.initialized || (await this.keychain.init(), this.initialized = !0);
    }, this.hasKeys = (r) => (this.isInitialized(), this.keychain.has(r)), this.getClientId = async () => {
      this.isInitialized();
      const r = await this.getClientSeed(), n = Gs(r);
      return an(n.publicKey);
    }, this.generateKeyPair = () => {
      this.isInitialized();
      const r = tp();
      return this.setPrivateKey(r.publicKey, r.privateKey);
    }, this.signJWT = async (r) => {
      this.isInitialized();
      const n = await this.getClientSeed(), o = Gs(n), c = Hr();
      return await Dc(c, r, u1, o);
    }, this.generateSharedKey = (r, n, o) => {
      this.isInitialized();
      const c = this.getPrivateKey(r), u = ip(c, n);
      return this.setSymKey(u, o);
    }, this.setSymKey = async (r, n) => {
      this.isInitialized();
      const o = n || sp(r);
      return await this.keychain.set(o, r), o;
    }, this.deleteKeyPair = async (r) => {
      this.isInitialized(), await this.keychain.del(r);
    }, this.deleteSymKey = async (r) => {
      this.isInitialized(), await this.keychain.del(r);
    }, this.encode = async (r, n, o) => {
      this.isInitialized();
      const c = Lc(o), u = sr(n);
      if (Co(c)) {
        const D = c.senderPublicKey, x = c.receiverPublicKey;
        r = await this.generateSharedKey(D, x);
      }
      const d = this.getSymKey(r), { type: p, senderPublicKey: w } = c;
      return np({ type: p, symKey: d, message: u, senderPublicKey: w });
    }, this.decode = async (r, n, o) => {
      this.isInitialized();
      const c = cp(n, o);
      if (Co(c)) {
        const u = c.receiverPublicKey, d = c.senderPublicKey;
        r = await this.generateSharedKey(u, d);
      }
      try {
        const u = this.getSymKey(r), d = op({ symKey: u, encoded: n });
        return rn(d);
      } catch (u) {
        this.logger.error(`Failed to decode message from topic: '${r}', clientId: '${await this.getClientId()}'`), this.logger.error(u);
      }
    }, this.getPayloadType = (r) => {
      const n = Ws(r);
      return bs(n.type);
    }, this.getPayloadSenderPublicKey = (r) => {
      const n = Ws(r);
      return n.senderPublicKey ? Ne(n.senderPublicKey, vt) : void 0;
    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.keychain = s || new $1(this.core, this.logger);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  async setPrivateKey(e, t) {
    return await this.keychain.set(e, t), e;
  }
  getPrivateKey(e) {
    return this.keychain.get(e);
  }
  async getClientSeed() {
    let e = "";
    try {
      e = this.keychain.get(ea);
    } catch {
      e = Hr(), await this.keychain.set(ea, e);
    }
    return n1(e, "base16");
  }
  getSymKey(e) {
    return this.keychain.get(e);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Y("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}, U1 = class extends gl {
  constructor(e, t) {
    super(e, t), this.logger = e, this.core = t, this.messages = /* @__PURE__ */ new Map(), this.name = f1, this.version = p1, this.initialized = !1, this.storagePrefix = hi, this.init = async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const s = await this.getRelayerMessages();
          typeof s < "u" && (this.messages = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (s) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s);
        } finally {
          this.initialized = !0;
        }
      }
    }, this.set = async (s, r) => {
      this.isInitialized();
      const n = Fi(r);
      let o = this.messages.get(s);
      return typeof o > "u" && (o = {}), typeof o[n] < "u" || (o[n] = r, this.messages.set(s, o), await this.persist()), n;
    }, this.get = (s) => {
      this.isInitialized();
      let r = this.messages.get(s);
      return typeof r > "u" && (r = {}), r;
    }, this.has = (s, r) => {
      this.isInitialized();
      const n = this.get(s), o = Fi(r);
      return typeof n[o] < "u";
    }, this.del = async (s) => {
      this.isInitialized(), this.messages.delete(s), await this.persist();
    }, this.logger = ee.generateChildLogger(e, this.name), this.core = t;
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  async setRelayerMessages(e) {
    await this.core.storage.setItem(this.storageKey, Mc(e));
  }
  async getRelayerMessages() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? qc(e) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Y("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}, L1 = class extends yl {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, this.events = new We.EventEmitter(), this.name = y1, this.queue = /* @__PURE__ */ new Map(), this.publishTimeout = V.toMiliseconds(V.TEN_SECONDS), this.needsTransportRestart = !1, this.publish = async (s, r, n) => {
      var o;
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s, message: r, opts: n } });
      try {
        const c = n?.ttl || g1, u = Gr(n), d = n?.prompt || !1, p = n?.tag || 0, w = n?.id || vn().toString(), D = { topic: s, message: r, opts: { ttl: c, relay: u, prompt: d, tag: p, id: w } }, x = setTimeout(() => this.queue.set(w, D), this.publishTimeout);
        try {
          await await ds(this.rpcPublish(s, r, c, u, d, p, w), this.publishTimeout, "Failed to publish payload, please try again."), this.removeRequestFromQueue(w), this.relayer.events.emit(gt.publish, D);
        } catch (E) {
          if (this.logger.debug("Publishing Payload stalled"), this.needsTransportRestart = !0, (o = n?.internal) != null && o.throwOnFailedPublish)
            throw this.removeRequestFromQueue(w), E;
          return;
        } finally {
          clearTimeout(x);
        }
        this.logger.debug("Successfully Published Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s, message: r, opts: n } });
      } catch (c) {
        throw this.logger.debug("Failed to Publish Payload"), this.logger.error(c), c;
      }
    }, this.on = (s, r) => {
      this.events.on(s, r);
    }, this.once = (s, r) => {
      this.events.once(s, r);
    }, this.off = (s, r) => {
      this.events.off(s, r);
    }, this.removeListener = (s, r) => {
      this.events.removeListener(s, r);
    }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.registerEventListeners();
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  rpcPublish(e, t, s, r, n, o, c) {
    var u, d, p, w;
    const D = { method: qs(r.protocol).publish, params: { topic: e, message: t, ttl: s, prompt: n, tag: o }, id: c };
    return wt((u = D.params) == null ? void 0 : u.prompt) && ((d = D.params) == null || delete d.prompt), wt((p = D.params) == null ? void 0 : p.tag) && ((w = D.params) == null || delete w.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: D }), this.relayer.request(D);
  }
  removeRequestFromQueue(e) {
    this.queue.delete(e);
  }
  checkQueue() {
    this.queue.forEach(async (e) => {
      const { topic: t, message: s, opts: r } = e;
      await this.publish(t, s, r);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, () => {
      if (this.needsTransportRestart) {
        this.needsTransportRestart = !1, this.relayer.events.emit(gt.connection_stalled);
        return;
      }
      this.checkQueue();
    }), this.relayer.on(gt.message_ack, (e) => {
      this.removeRequestFromQueue(e.id.toString());
    });
  }
}, M1 = class {
  constructor() {
    this.map = /* @__PURE__ */ new Map(), this.set = (e, t) => {
      const s = this.get(e);
      this.exists(e, t) || this.map.set(e, [...s, t]);
    }, this.get = (e) => this.map.get(e) || [], this.exists = (e, t) => this.get(e).includes(t), this.delete = (e, t) => {
      if (typeof t > "u") {
        this.map.delete(e);
        return;
      }
      if (!this.map.has(e))
        return;
      const s = this.get(e);
      if (!this.exists(e, t))
        return;
      const r = s.filter((n) => n !== t);
      if (!r.length) {
        this.map.delete(e);
        return;
      }
      this.map.set(e, r);
    }, this.clear = () => {
      this.map.clear();
    };
  }
  get topics() {
    return Array.from(this.map.keys());
  }
};
var q1 = Object.defineProperty, j1 = Object.defineProperties, z1 = Object.getOwnPropertyDescriptors, sa = Object.getOwnPropertySymbols, K1 = Object.prototype.hasOwnProperty, V1 = Object.prototype.propertyIsEnumerable, ra = (i, e, t) => e in i ? q1(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, Zi = (i, e) => {
  for (var t in e || (e = {}))
    K1.call(e, t) && ra(i, t, e[t]);
  if (sa)
    for (var t of sa(e))
      V1.call(e, t) && ra(i, t, e[t]);
  return i;
}, Nr = (i, e) => j1(i, z1(e));
let B1 = class extends bl {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, this.subscriptions = /* @__PURE__ */ new Map(), this.topicMap = new M1(), this.events = new We.EventEmitter(), this.name = D1, this.version = x1, this.pending = /* @__PURE__ */ new Map(), this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = "pending_sub_watch_label", this.pollingInterval = 20, this.storagePrefix = hi, this.subscribeTimeout = 1e4, this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), this.registerEventListeners(), this.clientId = await this.relayer.core.crypto.getClientId());
    }, this.subscribe = async (s, r) => {
      await this.restartToComplete(), this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s, opts: r } });
      try {
        const n = Gr(r), o = { topic: s, relay: n };
        this.pending.set(s, o);
        const c = await this.rpcSubscribe(s, n);
        return this.onSubscribe(c, o), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s, opts: r } }), c;
      } catch (n) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(n), n;
      }
    }, this.unsubscribe = async (s, r) => {
      await this.restartToComplete(), this.isInitialized(), typeof r?.id < "u" ? await this.unsubscribeById(s, r.id, r) : await this.unsubscribeByTopic(s, r);
    }, this.isSubscribed = async (s) => this.topics.includes(s) ? !0 : await new Promise((r, n) => {
      const o = new V.Watch();
      o.start(this.pendingSubscriptionWatchLabel);
      const c = setInterval(() => {
        !this.pending.has(s) && this.topics.includes(s) && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), r(!0)), o.elapsed(this.pendingSubscriptionWatchLabel) >= O1 && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), n(new Error("Subscription resolution timeout")));
      }, this.pollingInterval);
    }).catch(() => !1), this.on = (s, r) => {
      this.events.on(s, r);
    }, this.once = (s, r) => {
      this.events.once(s, r);
    }, this.off = (s, r) => {
      this.events.off(s, r);
    }, this.removeListener = (s, r) => {
      this.events.removeListener(s, r);
    }, this.restart = async () => {
      this.restartInProgress = !0, await this.restore(), await this.reset(), this.restartInProgress = !1;
    }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.clientId = "";
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  hasSubscription(e, t) {
    let s = !1;
    try {
      s = this.getSubscription(e).topic === t;
    } catch {
    }
    return s;
  }
  onEnable() {
    this.cached = [], this.initialized = !0;
  }
  onDisable() {
    this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e, t) {
    const s = this.topicMap.get(e);
    await Promise.all(s.map(async (r) => await this.unsubscribeById(e, r, t)));
  }
  async unsubscribeById(e, t, s) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: s } });
    try {
      const r = Gr(s);
      await this.rpcUnsubscribe(e, t, r);
      const n = nt("USER_DISCONNECTED", `${this.name}, ${e}`);
      await this.onUnsubscribe(e, t, n), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: s } });
    } catch (r) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(r), r;
    }
  }
  async rpcSubscribe(e, t) {
    const s = { method: qs(t.protocol).subscribe, params: { topic: e } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s });
    try {
      await await ds(this.relayer.request(s), this.subscribeTimeout);
    } catch {
      this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(gt.connection_stalled);
    }
    return Fi(e + this.clientId);
  }
  async rpcBatchSubscribe(e) {
    if (!e.length)
      return;
    const t = e[0].relay, s = { method: qs(t.protocol).batchSubscribe, params: { topics: e.map((r) => r.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s });
    try {
      return await await ds(this.relayer.request(s), this.subscribeTimeout);
    } catch {
      this.logger.debug("Outgoing Relay Payload stalled"), this.relayer.events.emit(gt.connection_stalled);
    }
  }
  rpcUnsubscribe(e, t, s) {
    const r = { method: qs(s.protocol).unsubscribe, params: { topic: e, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: r }), this.relayer.request(r);
  }
  onSubscribe(e, t) {
    this.setSubscription(e, Nr(Zi({}, t), { id: e })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e) {
    e.length && e.forEach((t) => {
      this.setSubscription(t.id, Zi({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e, t, s) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);
  }
  async setRelayerSubscriptions(e) {
    await this.relayer.core.storage.setItem(this.storageKey, e);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e, t) {
    this.subscriptions.has(e) || (this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e, subscription: t }), this.addSubscription(e, t));
  }
  addSubscription(e, t) {
    this.subscriptions.set(e, Zi({}, t)), this.topicMap.set(t.topic, e), this.events.emit(Vt.created, t);
  }
  getSubscription(e) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e });
    const t = this.subscriptions.get(e);
    if (!t) {
      const { message: s } = Y("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(s);
    }
    return t;
  }
  deleteSubscription(e, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e, reason: t });
    const s = this.getSubscription(e);
    this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit(Vt.deleted, Nr(Zi({}, s), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit(Vt.sync);
  }
  async reset() {
    if (this.cached.length) {
      const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let t = 0; t < e; t++) {
        const s = this.cached.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s);
      }
    }
    this.events.emit(Vt.resubscribed);
  }
  async restore() {
    try {
      const e = await this.getRelayerSubscriptions();
      if (typeof e > "u" || !e.length)
        return;
      if (this.subscriptions.size) {
        const { message: t } = Y("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);
    }
  }
  async batchSubscribe(e) {
    if (!e.length)
      return;
    const t = await this.rpcBatchSubscribe(e);
    Es(t) && this.onBatchSubscribe(t.map((s, r) => Nr(Zi({}, e[r]), { id: s })));
  }
  async onConnect() {
    this.restartInProgress || (await this.restart(), this.onEnable());
  }
  onDisconnect() {
    this.onDisable();
  }
  async checkPending() {
    if (!this.initialized || this.relayer.transportExplicitlyClosed)
      return;
    const e = [];
    this.pending.forEach((t) => {
      e.push(t);
    }), await this.batchSubscribe(e);
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, async () => {
      await this.checkPending();
    }), this.relayer.on(gt.connect, async () => {
      await this.onConnect();
    }), this.relayer.on(gt.disconnect, () => {
      this.onDisconnect();
    }), this.events.on(Vt.created, async (e) => {
      const t = Vt.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), await this.persist();
    }), this.events.on(Vt.deleted, async (e) => {
      const t = Vt.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), await this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Y("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async restartToComplete() {
    this.restartInProgress && await new Promise((e) => {
      const t = setInterval(() => {
        this.restartInProgress || (clearInterval(t), e());
      }, this.pollingInterval);
    });
  }
};
var k1 = Object.defineProperty, na = Object.getOwnPropertySymbols, H1 = Object.prototype.hasOwnProperty, G1 = Object.prototype.propertyIsEnumerable, oa = (i, e, t) => e in i ? k1(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, W1 = (i, e) => {
  for (var t in e || (e = {}))
    H1.call(e, t) && oa(i, t, e[t]);
  if (na)
    for (var t of na(e))
      G1.call(e, t) && oa(i, t, e[t]);
  return i;
};
let Y1 = class extends ml {
  constructor(e) {
    super(e), this.protocol = "wc", this.version = 2, this.events = new We.EventEmitter(), this.name = w1, this.transportExplicitlyClosed = !1, this.initialized = !1, this.connectionAttemptInProgress = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = ["socket hang up", "socket stalled"], this.hasExperiencedNetworkDisruption = !1, this.request = async (t) => {
      this.logger.debug("Publishing Request Payload");
      try {
        return await this.toEstablishConnection(), await this.provider.request(t);
      } catch (s) {
        throw this.logger.debug("Failed to Publish Request"), this.logger.error(s), s;
      }
    }, this.onPayloadHandler = (t) => {
      this.onProviderPayload(t);
    }, this.onConnectHandler = () => {
      this.events.emit(gt.connect);
    }, this.onDisconnectHandler = () => {
      this.onProviderDisconnect();
    }, this.onProviderErrorHandler = (t) => {
      this.logger.error(t), this.events.emit(gt.error, t), this.logger.info("Fatal socket error received, closing transport"), this.transportClose();
    }, this.registerProviderListeners = () => {
      this.provider.on(Zt.payload, this.onPayloadHandler), this.provider.on(Zt.connect, this.onConnectHandler), this.provider.on(Zt.disconnect, this.onDisconnectHandler), this.provider.on(Zt.error, this.onProviderErrorHandler);
    }, this.core = e.core, this.logger = typeof e.logger < "u" && typeof e.logger != "string" ? ee.generateChildLogger(e.logger, this.name) : ee.pino(ee.getDefaultLoggerOptions({ level: e.logger || m1 })), this.messages = new U1(this.logger, e.core), this.subscriber = new B1(this, this.logger), this.publisher = new L1(this, this.logger), this.relayUrl = e?.relayUrl || uh, this.projectId = e.projectId, this.provider = {};
  }
  async init() {
    this.logger.trace("Initialized"), this.registerEventListeners(), await this.createProvider(), await Promise.all([this.messages.init(), this.subscriber.init()]);
    try {
      await this.transportOpen();
    } catch {
      this.logger.warn(`Connection via ${this.relayUrl} failed, attempting to connect via failover domain ${ta}...`), await this.restartTransport(ta);
    }
    this.initialized = !0, setTimeout(async () => {
      this.subscriber.topics.length === 0 && (this.logger.info("No topics subscribed to after init, closing transport"), await this.transportClose(), this.transportExplicitlyClosed = !1);
    }, E1);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get connected() {
    return this.provider.connection.connected;
  }
  get connecting() {
    return this.provider.connection.connecting;
  }
  async publish(e, t, s) {
    this.isInitialized(), await this.publisher.publish(e, t, s), await this.recordMessageEvent({ topic: e, message: t, publishedAt: Date.now() });
  }
  async subscribe(e, t) {
    var s;
    this.isInitialized();
    let r = ((s = this.subscriber.topicMap.get(e)) == null ? void 0 : s[0]) || "";
    return r || (await Promise.all([new Promise((n) => {
      this.subscriber.once(Vt.created, (o) => {
        o.topic === e && n();
      });
    }), new Promise(async (n) => {
      r = await this.subscriber.subscribe(e, t), n();
    })]), r);
  }
  async unsubscribe(e, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e, t);
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async transportClose() {
    this.transportExplicitlyClosed = !0, this.hasExperiencedNetworkDisruption && this.connected ? await ds(this.provider.disconnect(), 1e3, "provider.disconnect()").catch(() => this.onProviderDisconnect()) : this.connected && await this.provider.disconnect();
  }
  async transportOpen(e) {
    if (this.transportExplicitlyClosed = !1, await this.confirmOnlineStateOrThrow(), !this.connectionAttemptInProgress) {
      e && e !== this.relayUrl && (this.relayUrl = e, await this.transportClose(), await this.createProvider()), this.connectionAttemptInProgress = !0;
      try {
        await Promise.all([new Promise((t) => {
          if (!this.initialized)
            return t();
          this.subscriber.once(Vt.resubscribed, () => {
            t();
          });
        }), new Promise(async (t, s) => {
          try {
            await ds(this.provider.connect(), 1e4, `Socket stalled when trying to connect to ${this.relayUrl}`);
          } catch (r) {
            s(r);
            return;
          }
          t();
        })]);
      } catch (t) {
        this.logger.error(t);
        const s = t;
        if (!this.isConnectionStalled(s.message))
          throw t;
        this.provider.events.emit(Zt.disconnect);
      } finally {
        this.connectionAttemptInProgress = !1, this.hasExperiencedNetworkDisruption = !1;
      }
    }
  }
  async restartTransport(e) {
    await this.confirmOnlineStateOrThrow(), !this.connectionAttemptInProgress && (this.relayUrl = e || this.relayUrl, await this.transportClose(), await this.createProvider(), await this.transportOpen());
  }
  async confirmOnlineStateOrThrow() {
    if (!await zo())
      throw new Error("No internet connection detected. Please restart your network and try again.");
  }
  isConnectionStalled(e) {
    return this.staleConnectionErrors.some((t) => e.includes(t));
  }
  async createProvider() {
    this.provider.connection && this.unregisterProviderListeners();
    const e = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new _n(new Yc(bp({ sdkVersion: _1, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e, useOnCloseEvent: !0 }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e) {
    const { topic: t, message: s } = e;
    await this.messages.set(t, s);
  }
  async shouldIgnoreMessageEvent(e) {
    const { topic: t, message: s } = e;
    if (!s || s.length === 0)
      return this.logger.debug(`Ignoring invalid/empty message: ${s}`), !0;
    if (!await this.subscriber.isSubscribed(t))
      return this.logger.debug(`Ignoring message for non-subscribed topic ${t}`), !0;
    const r = this.messages.has(t, s);
    return r && this.logger.debug(`Ignoring duplicate message: ${s}`), r;
  }
  async onProviderPayload(e) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e }), ji(e)) {
      if (!e.method.endsWith(b1))
        return;
      const t = e.params, { topic: s, message: r, publishedAt: n } = t.data, o = { topic: s, message: r, publishedAt: n };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(W1({ type: "event", event: t.id }, o)), this.events.emit(t.id, o), await this.acknowledgePayload(e), await this.onMessageEvent(o);
    } else
      Oi(e) && this.events.emit(gt.message_ack, e);
  }
  async onMessageEvent(e) {
    await this.shouldIgnoreMessageEvent(e) || (this.events.emit(gt.message, e), await this.recordMessageEvent(e));
  }
  async acknowledgePayload(e) {
    const t = xi(e.id, !0);
    await this.provider.connection.send(t);
  }
  unregisterProviderListeners() {
    this.provider.off(Zt.payload, this.onPayloadHandler), this.provider.off(Zt.connect, this.onConnectHandler), this.provider.off(Zt.disconnect, this.onDisconnectHandler), this.provider.off(Zt.error, this.onProviderErrorHandler);
  }
  async registerEventListeners() {
    this.events.on(gt.connection_stalled, () => {
      this.restartTransport().catch((t) => this.logger.error(t));
    });
    let e = await zo();
    lg(async (t) => {
      this.initialized && e !== t && (e = t, t ? await this.restartTransport().catch((s) => this.logger.error(s)) : (this.hasExperiencedNetworkDisruption = !0, await this.transportClose().catch((s) => this.logger.error(s))));
    });
  }
  onProviderDisconnect() {
    this.events.emit(gt.disconnect), this.attemptToReconnect();
  }
  attemptToReconnect() {
    this.transportExplicitlyClosed || (this.logger.info("attemptToReconnect called. Connecting..."), setTimeout(async () => {
      await this.restartTransport().catch((e) => this.logger.error(e));
    }, V.toMiliseconds(v1)));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Y("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async toEstablishConnection() {
    if (await this.confirmOnlineStateOrThrow(), !this.connected) {
      if (this.connectionAttemptInProgress)
        return await new Promise((e) => {
          const t = setInterval(() => {
            this.connected && (clearInterval(t), e());
          }, this.connectionStatusPollingInterval);
        });
      await this.restartTransport();
    }
  }
};
var J1 = Object.defineProperty, aa = Object.getOwnPropertySymbols, Q1 = Object.prototype.hasOwnProperty, X1 = Object.prototype.propertyIsEnumerable, ca = (i, e, t) => e in i ? J1(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, ha = (i, e) => {
  for (var t in e || (e = {}))
    Q1.call(e, t) && ca(i, t, e[t]);
  if (aa)
    for (var t of aa(e))
      X1.call(e, t) && ca(i, t, e[t]);
  return i;
};
let lr = class extends wl {
  constructor(e, t, s, r = hi, n = void 0) {
    super(e, t, s, r), this.core = e, this.logger = t, this.name = s, this.map = /* @__PURE__ */ new Map(), this.version = S1, this.cached = [], this.initialized = !1, this.storagePrefix = hi, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o) => {
        this.getKey && o !== null && !wt(o) ? this.map.set(this.getKey(o), o) : Kp(o) ? this.map.set(o.id, o) : Vp(o) && this.map.set(o.topic, o);
      }), this.cached = [], this.initialized = !0);
    }, this.set = async (o, c) => {
      this.isInitialized(), this.map.has(o) ? await this.update(o, c) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o, value: c }), this.map.set(o, c), await this.persist());
    }, this.get = (o) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o }), this.getData(o)), this.getAll = (o) => (this.isInitialized(), o ? this.values.filter((c) => Object.keys(o).every((u) => Jc(c[u], o[u]))) : this.values), this.update = async (o, c) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o, update: c });
      const u = ha(ha({}, this.getData(o)), c);
      this.map.set(o, u), await this.persist();
    }, this.delete = async (o, c) => {
      this.isInitialized(), this.map.has(o) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o, reason: c }), this.map.delete(o), await this.persist());
    }, this.logger = ee.generateChildLogger(t, this.name), this.storagePrefix = r, this.getKey = n;
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  async setDataStore(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e) {
    const t = this.map.get(e);
    if (!t) {
      const { message: s } = Y("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.error(s), new Error(s);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e = await this.getDataStore();
      if (typeof e > "u" || !e.length)
        return;
      if (this.map.size) {
        const { message: t } = Y("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Y("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}, Z1 = class {
  constructor(e, t) {
    this.core = e, this.logger = t, this.name = N1, this.version = P1, this.events = new tr(), this.initialized = !1, this.storagePrefix = hi, this.ignoredPayloadTypes = [Di], this.registeredMethods = [], this.init = async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace("Initialized"));
    }, this.register = ({ methods: s }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...s])];
    }, this.create = async () => {
      this.isInitialized();
      const s = Hr(), r = await this.core.crypto.setSymKey(s), n = Mt(V.FIVE_MINUTES), o = { protocol: hh }, c = { topic: r, expiry: n, relay: o, active: !1 }, u = Ap({ protocol: this.core.protocol, version: this.core.version, topic: r, symKey: s, relay: o });
      return await this.pairings.set(r, c), await this.core.relayer.subscribe(r), this.core.expirer.set(r, n), { topic: r, uri: u };
    }, this.pair = async (s) => {
      this.isInitialized(), this.isValidPair(s);
      const { topic: r, symKey: n, relay: o } = Pp(s.uri);
      let c;
      if (this.pairings.keys.includes(r) && (c = this.pairings.get(r), c.active))
        throw new Error(`Pairing already exists: ${r}. Please try again with a new connection URI.`);
      this.core.crypto.keychain.has(r) || (await this.core.crypto.setSymKey(n, r), await this.core.relayer.subscribe(r, { relay: o }));
      const u = Mt(V.FIVE_MINUTES), d = { topic: r, relay: o, expiry: u, active: !1 };
      return await this.pairings.set(r, d), this.core.expirer.set(r, u), s.activatePairing && await this.activate({ topic: r }), this.events.emit(os.create, d), d;
    }, this.activate = async ({ topic: s }) => {
      this.isInitialized();
      const r = Mt(V.THIRTY_DAYS);
      await this.pairings.update(s, { active: !0, expiry: r }), this.core.expirer.set(s, r);
    }, this.ping = async (s) => {
      this.isInitialized(), await this.isValidPing(s);
      const { topic: r } = s;
      if (this.pairings.keys.includes(r)) {
        const n = await this.sendRequest(r, "wc_pairingPing", {}), { done: o, resolve: c, reject: u } = Ai();
        this.events.once(Be("pairing_ping", n), ({ error: d }) => {
          d ? u(d) : c();
        }), await o();
      }
    }, this.updateExpiry = async ({ topic: s, expiry: r }) => {
      this.isInitialized(), await this.pairings.update(s, { expiry: r });
    }, this.updateMetadata = async ({ topic: s, metadata: r }) => {
      this.isInitialized(), await this.pairings.update(s, { peerMetadata: r });
    }, this.getPairings = () => (this.isInitialized(), this.pairings.values), this.disconnect = async (s) => {
      this.isInitialized(), await this.isValidDisconnect(s);
      const { topic: r } = s;
      this.pairings.keys.includes(r) && (await this.sendRequest(r, "wc_pairingDelete", nt("USER_DISCONNECTED")), await this.deletePairing(r));
    }, this.sendRequest = async (s, r, n) => {
      const o = ti(r, n), c = await this.core.crypto.encode(s, o), u = Xi[r].req;
      return this.core.history.set(s, o), this.core.relayer.publish(s, c, u), o.id;
    }, this.sendResult = async (s, r, n) => {
      const o = xi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = Xi[u.request.method].res;
      await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);
    }, this.sendError = async (s, r, n) => {
      const o = qi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = Xi[u.request.method] ? Xi[u.request.method].res : Xi.unregistered_method.res;
      await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);
    }, this.deletePairing = async (s, r) => {
      await this.core.relayer.unsubscribe(s), await Promise.all([this.pairings.delete(s, nt("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(s), r ? Promise.resolve() : this.core.expirer.del(s)]);
    }, this.cleanup = async () => {
      const s = this.pairings.getAll().filter((r) => ai(r.expiry));
      await Promise.all(s.map((r) => this.deletePairing(r.topic)));
    }, this.onRelayEventRequest = (s) => {
      const { topic: r, payload: n } = s;
      switch (n.method) {
        case "wc_pairingPing":
          return this.onPairingPingRequest(r, n);
        case "wc_pairingDelete":
          return this.onPairingDeleteRequest(r, n);
        default:
          return this.onUnknownRpcMethodRequest(r, n);
      }
    }, this.onRelayEventResponse = async (s) => {
      const { topic: r, payload: n } = s, o = (await this.core.history.get(r, n.id)).request.method;
      switch (o) {
        case "wc_pairingPing":
          return this.onPairingPingResponse(r, n);
        default:
          return this.onUnknownRpcMethodResponse(o);
      }
    }, this.onPairingPingRequest = async (s, r) => {
      const { id: n } = r;
      try {
        this.isValidPing({ topic: s }), await this.sendResult(n, s, !0), this.events.emit(os.ping, { id: n, topic: s });
      } catch (o) {
        await this.sendError(n, s, o), this.logger.error(o);
      }
    }, this.onPairingPingResponse = (s, r) => {
      const { id: n } = r;
      setTimeout(() => {
        ht(r) ? this.events.emit(Be("pairing_ping", n), {}) : Ge(r) && this.events.emit(Be("pairing_ping", n), { error: r.error });
      }, 500);
    }, this.onPairingDeleteRequest = async (s, r) => {
      const { id: n } = r;
      try {
        this.isValidDisconnect({ topic: s }), await this.deletePairing(s), this.events.emit(os.delete, { id: n, topic: s });
      } catch (o) {
        await this.sendError(n, s, o), this.logger.error(o);
      }
    }, this.onUnknownRpcMethodRequest = async (s, r) => {
      const { id: n, method: o } = r;
      try {
        if (this.registeredMethods.includes(o))
          return;
        const c = nt("WC_METHOD_UNSUPPORTED", o);
        await this.sendError(n, s, c), this.logger.error(c);
      } catch (c) {
        await this.sendError(n, s, c), this.logger.error(c);
      }
    }, this.onUnknownRpcMethodResponse = (s) => {
      this.registeredMethods.includes(s) || this.logger.error(nt("WC_METHOD_UNSUPPORTED", s));
    }, this.isValidPair = (s) => {
      if (!St(s)) {
        const { message: r } = Y("MISSING_OR_INVALID", `pair() params: ${s}`);
        throw new Error(r);
      }
      if (!zp(s.uri)) {
        const { message: r } = Y("MISSING_OR_INVALID", `pair() uri: ${s.uri}`);
        throw new Error(r);
      }
    }, this.isValidPing = async (s) => {
      if (!St(s)) {
        const { message: n } = Y("MISSING_OR_INVALID", `ping() params: ${s}`);
        throw new Error(n);
      }
      const { topic: r } = s;
      await this.isValidPairingTopic(r);
    }, this.isValidDisconnect = async (s) => {
      if (!St(s)) {
        const { message: n } = Y("MISSING_OR_INVALID", `disconnect() params: ${s}`);
        throw new Error(n);
      }
      const { topic: r } = s;
      await this.isValidPairingTopic(r);
    }, this.isValidPairingTopic = async (s) => {
      if (!ot(s, !1)) {
        const { message: r } = Y("MISSING_OR_INVALID", `pairing topic should be a string: ${s}`);
        throw new Error(r);
      }
      if (!this.pairings.keys.includes(s)) {
        const { message: r } = Y("NO_MATCHING_KEY", `pairing topic doesn't exist: ${s}`);
        throw new Error(r);
      }
      if (ai(this.pairings.get(s).expiry)) {
        await this.deletePairing(s);
        const { message: r } = Y("EXPIRED", `pairing topic: ${s}`);
        throw new Error(r);
      }
    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.pairings = new lr(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Y("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(gt.message, async (e) => {
      const { topic: t, message: s } = e;
      if (!this.pairings.keys.includes(t) || this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s)))
        return;
      const r = await this.core.crypto.decode(t, s);
      try {
        ji(r) ? (this.core.history.set(t, r), this.onRelayEventRequest({ topic: t, payload: r })) : Oi(r) && (await this.core.history.resolve(r), await this.onRelayEventResponse({ topic: t, payload: r }), this.core.history.delete(t, r.id));
      } catch (n) {
        this.logger.error(n);
      }
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on(Tt.expired, async (e) => {
      const { topic: t } = zc(e.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit(os.expire, { topic: t }));
    });
  }
}, em = class extends pl {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = R1, this.version = C1, this.cached = [], this.initialized = !1, this.storagePrefix = hi, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s) => this.records.set(s.id, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);
    }, this.set = (s, r, n) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: s, request: r, chainId: n }), this.records.has(r.id))
        return;
      const o = { id: r.id, topic: s, request: { method: r.method, params: r.params || null }, chainId: n, expiry: Mt(V.THIRTY_DAYS) };
      this.records.set(o.id, o), this.events.emit(zt.created, o);
    }, this.resolve = async (s) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: s }), !this.records.has(s.id))
        return;
      const r = await this.getRecord(s.id);
      typeof r.response > "u" && (r.response = Ge(s) ? { error: s.error } : { result: s.result }, this.records.set(r.id, r), this.events.emit(zt.updated, r));
    }, this.get = async (s, r) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: s, id: r }), await this.getRecord(r)), this.delete = (s, r) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: r }), this.values.forEach((n) => {
        if (n.topic === s) {
          if (typeof r < "u" && n.id !== r)
            return;
          this.records.delete(n.id), this.events.emit(zt.deleted, n);
        }
      });
    }, this.exists = async (s, r) => (this.isInitialized(), this.records.has(r) ? (await this.getRecord(r)).topic === s : !1), this.on = (s, r) => {
      this.events.on(s, r);
    }, this.once = (s, r) => {
      this.events.once(s, r);
    }, this.off = (s, r) => {
      this.events.off(s, r);
    }, this.removeListener = (s, r) => {
      this.events.removeListener(s, r);
    }, this.logger = ee.generateChildLogger(t, this.name);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u")
        return;
      const s = { topic: t.topic, request: ti(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e.push(s);
    }), e;
  }
  async setJsonRpcRecords(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e) {
    this.isInitialized();
    const t = this.records.get(e);
    if (!t) {
      const { message: s } = Y("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(s);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(zt.sync);
  }
  async restore() {
    try {
      const e = await this.getJsonRpcRecords();
      if (typeof e > "u" || !e.length)
        return;
      if (this.records.size) {
        const { message: t } = Y("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);
    }
  }
  registerEventListeners() {
    this.events.on(zt.created, (e) => {
      const t = zt.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e }), this.persist();
    }), this.events.on(zt.updated, (e) => {
      const t = zt.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e }), this.persist();
    }), this.events.on(zt.deleted, (e) => {
      const t = zt.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e }), this.persist();
    }), this.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, () => {
      this.cleanup();
    });
  }
  cleanup() {
    try {
      this.records.forEach((e) => {
        V.toMiliseconds(e.expiry || 0) - Date.now() <= 0 && (this.logger.info(`Deleting expired history log: ${e.id}`), this.delete(e.topic, e.id));
      });
    } catch (e) {
      this.logger.warn(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Y("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}, tm = class extends vl {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, this.expirations = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = A1, this.version = T1, this.cached = [], this.initialized = !1, this.storagePrefix = hi, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s) => this.expirations.set(s.target, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);
    }, this.has = (s) => {
      try {
        const r = this.formatTarget(s);
        return typeof this.getExpiration(r) < "u";
      } catch {
        return !1;
      }
    }, this.set = (s, r) => {
      this.isInitialized();
      const n = this.formatTarget(s), o = { target: n, expiry: r };
      this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit(Tt.created, { target: n, expiration: o });
    }, this.get = (s) => {
      this.isInitialized();
      const r = this.formatTarget(s);
      return this.getExpiration(r);
    }, this.del = (s) => {
      if (this.isInitialized(), this.has(s)) {
        const r = this.formatTarget(s), n = this.getExpiration(r);
        this.expirations.delete(r), this.events.emit(Tt.deleted, { target: r, expiration: n });
      }
    }, this.on = (s, r) => {
      this.events.on(s, r);
    }, this.once = (s, r) => {
      this.events.once(s, r);
    }, this.off = (s, r) => {
      this.events.off(s, r);
    }, this.removeListener = (s, r) => {
      this.events.removeListener(s, r);
    }, this.logger = ee.generateChildLogger(t, this.name);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e) {
    if (typeof e == "string")
      return vp(e);
    if (typeof e == "number")
      return _p(e);
    const { message: t } = Y("UNKNOWN_TYPE", `Target type: ${typeof e}`);
    throw new Error(t);
  }
  async setExpirations(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit(Tt.sync);
  }
  async restore() {
    try {
      const e = await this.getExpirations();
      if (typeof e > "u" || !e.length)
        return;
      if (this.expirations.size) {
        const { message: t } = Y("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);
    }
  }
  getExpiration(e) {
    const t = this.expirations.get(e);
    if (!t) {
      const { message: s } = Y("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.error(s), new Error(s);
    }
    return t;
  }
  checkExpiry(e, t) {
    const { expiry: s } = t;
    V.toMiliseconds(s) - Date.now() <= 0 && this.expire(e, t);
  }
  expire(e, t) {
    this.expirations.delete(e), this.events.emit(Tt.expired, { target: e, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));
  }
  registerEventListeners() {
    this.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, () => this.checkExpirations()), this.events.on(Tt.created, (e) => {
      const t = Tt.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(Tt.expired, (e) => {
      const t = Tt.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on(Tt.deleted, (e) => {
      const t = Tt.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = Y("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}, im = class extends _l {
  constructor(e, t) {
    super(e, t), this.projectId = e, this.logger = t, this.name = Or, this.initialized = !1, this.queue = [], this.verifyDisabled = !1, this.init = async (s) => {
      if (this.verifyDisabled || hr() || !vs())
        return;
      const r = s?.verifyUrl || zs;
      this.verifyUrl !== r && this.removeIframe(), this.verifyUrl = r;
      try {
        await this.createIframe();
      } catch (n) {
        this.logger.info(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.info(n);
      }
      if (!this.initialized) {
        this.removeIframe(), this.verifyUrl = ia;
        try {
          await this.createIframe();
        } catch (n) {
          this.logger.info(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.info(n), this.verifyDisabled = !0;
        }
      }
    }, this.register = async (s) => {
      this.initialized ? this.sendPost(s.attestationId) : (this.addToQueue(s.attestationId), await this.init());
    }, this.resolve = async (s) => {
      if (this.isDevEnv)
        return "";
      const r = s?.verifyUrl || zs;
      let n;
      try {
        n = await this.fetchAttestation(s.attestationId, r);
      } catch (o) {
        this.logger.info(`failed to resolve attestation: ${s.attestationId} from url: ${r}`), this.logger.info(o), n = await this.fetchAttestation(s.attestationId, ia);
      }
      return n;
    }, this.fetchAttestation = async (s, r) => {
      this.logger.info(`resolving attestation: ${s} from url: ${r}`);
      const n = this.startAbortTimer(V.ONE_SECOND * 2), o = await fetch(`${r}/attestation/${s}`, { signal: this.abortController.signal });
      return clearTimeout(n), o.status === 200 ? await o.json() : void 0;
    }, this.addToQueue = (s) => {
      this.queue.push(s);
    }, this.processQueue = () => {
      this.queue.length !== 0 && (this.queue.forEach((s) => this.sendPost(s)), this.queue = []);
    }, this.sendPost = (s) => {
      var r;
      try {
        if (!this.iframe)
          return;
        (r = this.iframe.contentWindow) == null || r.postMessage(s, "*"), this.logger.info(`postMessage sent: ${s} ${this.verifyUrl}`);
      } catch {
      }
    }, this.createIframe = async () => {
      let s;
      const r = (n) => {
        n.data === "verify_ready" && (this.initialized = !0, this.processQueue(), window.removeEventListener("message", r), s());
      };
      await Promise.race([new Promise((n) => {
        if (document.getElementById(Or))
          return n();
        window.addEventListener("message", r);
        const o = document.createElement("iframe");
        o.id = Or, o.src = `${this.verifyUrl}/${this.projectId}`, o.style.display = "none", document.body.append(o), this.iframe = o, s = n;
      }), new Promise((n, o) => setTimeout(() => {
        window.removeEventListener("message", r), o("verify iframe load timeout");
      }, V.toMiliseconds(V.FIVE_SECONDS)))]);
    }, this.removeIframe = () => {
      this.iframe && (this.iframe.remove(), this.iframe = void 0, this.initialized = !1);
    }, this.logger = ee.generateChildLogger(t, this.name), this.verifyUrl = zs, this.abortController = new AbortController(), this.isDevEnv = yn() && process.env.IS_VITEST;
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  startAbortTimer(e) {
    return this.abortController = new AbortController(), setTimeout(() => this.abortController.abort(), V.toMiliseconds(e));
  }
};
var sm = Object.defineProperty, ua = Object.getOwnPropertySymbols, rm = Object.prototype.hasOwnProperty, nm = Object.prototype.propertyIsEnumerable, la = (i, e, t) => e in i ? sm(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, da = (i, e) => {
  for (var t in e || (e = {}))
    rm.call(e, t) && la(i, t, e[t]);
  if (ua)
    for (var t of ua(e))
      nm.call(e, t) && la(i, t, e[t]);
  return i;
};
let om = class lh extends fl {
  constructor(e) {
    super(e), this.protocol = ch, this.version = o1, this.name = En, this.events = new We.EventEmitter(), this.initialized = !1, this.on = (s, r) => this.events.on(s, r), this.once = (s, r) => this.events.once(s, r), this.off = (s, r) => this.events.off(s, r), this.removeListener = (s, r) => this.events.removeListener(s, r), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || uh;
    const t = typeof e?.logger < "u" && typeof e?.logger != "string" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({ level: e?.logger || a1.logger }));
    this.logger = ee.generateChildLogger(t, this.name), this.heartbeat = new Wt.HeartBeat(), this.crypto = new F1(this, this.logger, e?.keychain), this.history = new em(this, this.logger), this.expirer = new tm(this, this.logger), this.storage = e != null && e.storage ? e.storage : new oc(da(da({}, c1), e?.storageOptions)), this.relayer = new Y1({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new Z1(this, this.logger), this.verify = new im(this.projectId || "", this.logger);
  }
  static async init(e) {
    const t = new lh(e);
    await t.initialize();
    const s = await t.crypto.getClientId();
    return await t.storage.setItem(I1, s), t;
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.initialized = !0, this.logger.info("Core Initialization Success");
    } catch (e) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;
    }
  }
};
const am = om, dh = "wc", fh = 2, ph = "client", Sn = `${dh}@${fh}:${ph}:`, Pr = { name: ph, logger: "error", controller: !1, relayUrl: "wss://relay.walletconnect.com" }, fa = "WALLETCONNECT_DEEPLINK_CHOICE", cm = "proposal", hm = "Proposal expired", um = "session", Fs = V.SEVEN_DAYS, lm = "engine", es = { wc_sessionPropose: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1100 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1101 } }, wc_sessionSettle: { req: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1102 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1104 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1105 } }, wc_sessionExtend: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1106 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1107 } }, wc_sessionRequest: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1108 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1109 } }, wc_sessionEvent: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1110 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1111 } }, wc_sessionDelete: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1112 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1113 } }, wc_sessionPing: { req: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1114 }, res: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1115 } } }, Rr = { min: V.FIVE_MINUTES, max: V.SEVEN_DAYS }, ei = { idle: "IDLE", active: "ACTIVE" }, dm = "request", fm = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest"];
var pm = Object.defineProperty, gm = Object.defineProperties, ym = Object.getOwnPropertyDescriptors, pa = Object.getOwnPropertySymbols, mm = Object.prototype.hasOwnProperty, wm = Object.prototype.propertyIsEnumerable, ga = (i, e, t) => e in i ? pm(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, Et = (i, e) => {
  for (var t in e || (e = {}))
    mm.call(e, t) && ga(i, t, e[t]);
  if (pa)
    for (var t of pa(e))
      wm.call(e, t) && ga(i, t, e[t]);
  return i;
}, ts = (i, e) => gm(i, ym(e));
let bm = class extends Sl {
  constructor(e) {
    super(e), this.name = lm, this.events = new tr(), this.initialized = !1, this.ignoredPayloadTypes = [Di], this.requestQueue = { state: ei.idle, queue: [] }, this.sessionRequestQueue = { state: ei.idle, queue: [] }, this.requestQueueDelay = V.ONE_SECOND, this.init = async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.registerPairingEvents(), this.client.core.pairing.register({ methods: Object.keys(es) }), this.initialized = !0, setTimeout(() => {
        this.sessionRequestQueue.queue = this.getPendingSessionRequests(), this.processSessionRequestQueue();
      }, V.toMiliseconds(this.requestQueueDelay)));
    }, this.connect = async (t) => {
      await this.isInitialized();
      const s = ts(Et({}, t), { requiredNamespaces: t.requiredNamespaces || {}, optionalNamespaces: t.optionalNamespaces || {} });
      await this.isValidConnect(s);
      const { pairingTopic: r, requiredNamespaces: n, optionalNamespaces: o, sessionProperties: c, relays: u } = s;
      let d = r, p, w = !1;
      if (d && (w = this.client.core.pairing.pairings.get(d).active), !d || !w) {
        const { topic: O, uri: y } = await this.client.core.pairing.create();
        d = O, p = y;
      }
      const D = await this.client.core.crypto.generateKeyPair(), x = Et({ requiredNamespaces: n, optionalNamespaces: o, relays: u ?? [{ protocol: hh }], proposer: { publicKey: D, metadata: this.client.metadata } }, c && { sessionProperties: c }), { reject: E, resolve: C, done: F } = Ai(V.FIVE_MINUTES, hm);
      if (this.events.once(Be("session_connect"), async ({ error: O, session: y }) => {
        if (O)
          E(O);
        else if (y) {
          y.self.publicKey = D;
          const b = ts(Et({}, y), { requiredNamespaces: y.requiredNamespaces, optionalNamespaces: y.optionalNamespaces });
          await this.client.session.set(y.topic, b), await this.setExpiry(y.topic, y.expiry), d && await this.client.core.pairing.updateMetadata({ topic: d, metadata: y.peer.metadata }), C(b);
        }
      }), !d) {
        const { message: O } = Y("NO_MATCHING_KEY", `connect() pairing topic: ${d}`);
        throw new Error(O);
      }
      const K = await this.sendRequest({ topic: d, method: "wc_sessionPropose", params: x }), I = Mt(V.FIVE_MINUTES);
      return await this.setProposal(K, Et({ id: K, expiry: I }, x)), { uri: p, approval: F };
    }, this.pair = async (t) => (await this.isInitialized(), await this.client.core.pairing.pair(t)), this.approve = async (t) => {
      await this.isInitialized(), await this.isValidApprove(t);
      const { id: s, relayProtocol: r, namespaces: n, sessionProperties: o } = t, c = this.client.proposal.get(s);
      let { pairingTopic: u, proposer: d, requiredNamespaces: p, optionalNamespaces: w } = c;
      u = u || "", cs(p) || (p = Up(n, "approve()"));
      const D = await this.client.core.crypto.generateKeyPair(), x = d.publicKey, E = await this.client.core.crypto.generateSharedKey(D, x);
      u && s && (await this.client.core.pairing.updateMetadata({ topic: u, metadata: d.metadata }), await this.sendResult({ id: s, topic: u, result: { relay: { protocol: r ?? "irn" }, responderPublicKey: D } }), await this.client.proposal.delete(s, nt("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: u }));
      const C = Et({ relay: { protocol: r ?? "irn" }, namespaces: n, requiredNamespaces: p, optionalNamespaces: w, pairingTopic: u, controller: { publicKey: D, metadata: this.client.metadata }, expiry: Mt(Fs) }, o && { sessionProperties: o });
      await this.client.core.relayer.subscribe(E), await this.sendRequest({ topic: E, method: "wc_sessionSettle", params: C, throwOnFailedPublish: !0 });
      const F = ts(Et({}, C), { topic: E, pairingTopic: u, acknowledged: !1, self: C.controller, peer: { publicKey: d.publicKey, metadata: d.metadata }, controller: D });
      return await this.client.session.set(E, F), await this.setExpiry(E, Mt(Fs)), { topic: E, acknowledged: () => new Promise((K) => setTimeout(() => K(this.client.session.get(E)), 500)) };
    }, this.reject = async (t) => {
      await this.isInitialized(), await this.isValidReject(t);
      const { id: s, reason: r } = t, { pairingTopic: n } = this.client.proposal.get(s);
      n && (await this.sendError(s, n, r), await this.client.proposal.delete(s, nt("USER_DISCONNECTED")));
    }, this.update = async (t) => {
      await this.isInitialized(), await this.isValidUpdate(t);
      const { topic: s, namespaces: r } = t, n = await this.sendRequest({ topic: s, method: "wc_sessionUpdate", params: { namespaces: r } }), { done: o, resolve: c, reject: u } = Ai();
      return this.events.once(Be("session_update", n), ({ error: d }) => {
        d ? u(d) : c();
      }), await this.client.session.update(s, { namespaces: r }), { acknowledged: o };
    }, this.extend = async (t) => {
      await this.isInitialized(), await this.isValidExtend(t);
      const { topic: s } = t, r = await this.sendRequest({ topic: s, method: "wc_sessionExtend", params: {} }), { done: n, resolve: o, reject: c } = Ai();
      return this.events.once(Be("session_extend", r), ({ error: u }) => {
        u ? c(u) : o();
      }), await this.setExpiry(s, Mt(Fs)), { acknowledged: n };
    }, this.request = async (t) => {
      await this.isInitialized(), await this.isValidRequest(t);
      const { chainId: s, request: r, topic: n, expiry: o } = t, c = bn(), { done: u, resolve: d, reject: p } = Ai(o);
      return this.events.once(Be("session_request", c), ({ error: w, result: D }) => {
        w ? p(w) : d(D);
      }), await Promise.all([new Promise(async (w) => {
        await this.sendRequest({ clientRpcId: c, topic: n, method: "wc_sessionRequest", params: { request: r, chainId: s }, expiry: o, throwOnFailedPublish: !0 }).catch((D) => p(D)), this.client.events.emit("session_request_sent", { topic: n, request: r, chainId: s, id: c }), w();
      }), new Promise(async (w) => {
        const D = await this.client.core.storage.getItem(fa);
        Ep({ id: c, topic: n, wcDeepLink: D }), w();
      }), u()]).then((w) => w[2]);
    }, this.respond = async (t) => {
      await this.isInitialized(), await this.isValidRespond(t);
      const { topic: s, response: r } = t, { id: n } = r;
      ht(r) ? await this.sendResult({ id: n, topic: s, result: r.result, throwOnFailedPublish: !0 }) : Ge(r) && await this.sendError(n, s, r.error), this.cleanupAfterResponse(t);
    }, this.ping = async (t) => {
      await this.isInitialized(), await this.isValidPing(t);
      const { topic: s } = t;
      if (this.client.session.keys.includes(s)) {
        const r = await this.sendRequest({ topic: s, method: "wc_sessionPing", params: {} }), { done: n, resolve: o, reject: c } = Ai();
        this.events.once(Be("session_ping", r), ({ error: u }) => {
          u ? c(u) : o();
        }), await n();
      } else
        this.client.core.pairing.pairings.keys.includes(s) && await this.client.core.pairing.ping({ topic: s });
    }, this.emit = async (t) => {
      await this.isInitialized(), await this.isValidEmit(t);
      const { topic: s, event: r, chainId: n } = t;
      await this.sendRequest({ topic: s, method: "wc_sessionEvent", params: { event: r, chainId: n } });
    }, this.disconnect = async (t) => {
      await this.isInitialized(), await this.isValidDisconnect(t);
      const { topic: s } = t;
      this.client.session.keys.includes(s) ? (await this.sendRequest({ topic: s, method: "wc_sessionDelete", params: nt("USER_DISCONNECTED"), throwOnFailedPublish: !0 }), await this.deleteSession(s)) : await this.client.core.pairing.disconnect({ topic: s });
    }, this.find = (t) => (this.isInitialized(), this.client.session.getAll().filter((s) => qp(s, t))), this.getPendingSessionRequests = () => (this.isInitialized(), this.client.pendingRequest.getAll()), this.cleanupDuplicatePairings = async (t) => {
      if (t.pairingTopic)
        try {
          const s = this.client.core.pairing.pairings.get(t.pairingTopic), r = this.client.core.pairing.pairings.getAll().filter((n) => {
            var o, c;
            return ((o = n.peerMetadata) == null ? void 0 : o.url) && ((c = n.peerMetadata) == null ? void 0 : c.url) === t.peer.metadata.url && n.topic && n.topic !== s.topic;
          });
          if (r.length === 0)
            return;
          this.client.logger.info(`Cleaning up ${r.length} duplicate pairing(s)`), await Promise.all(r.map((n) => this.client.core.pairing.disconnect({ topic: n.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
        } catch (s) {
          this.client.logger.error(s);
        }
    }, this.deleteSession = async (t, s) => {
      const { self: r } = this.client.session.get(t);
      await this.client.core.relayer.unsubscribe(t), this.client.session.delete(t, nt("USER_DISCONNECTED")), this.client.core.crypto.keychain.has(r.publicKey) && await this.client.core.crypto.deleteKeyPair(r.publicKey), this.client.core.crypto.keychain.has(t) && await this.client.core.crypto.deleteSymKey(t), s || this.client.core.expirer.del(t), this.client.core.storage.removeItem(fa).catch((n) => this.client.logger.warn(n));
    }, this.deleteProposal = async (t, s) => {
      await Promise.all([this.client.proposal.delete(t, nt("USER_DISCONNECTED")), s ? Promise.resolve() : this.client.core.expirer.del(t)]);
    }, this.deletePendingSessionRequest = async (t, s, r = !1) => {
      await Promise.all([this.client.pendingRequest.delete(t, s), r ? Promise.resolve() : this.client.core.expirer.del(t)]), this.sessionRequestQueue.queue = this.sessionRequestQueue.queue.filter((n) => n.id !== t), r && (this.sessionRequestQueue.state = ei.idle);
    }, this.setExpiry = async (t, s) => {
      this.client.session.keys.includes(t) && await this.client.session.update(t, { expiry: s }), this.client.core.expirer.set(t, s);
    }, this.setProposal = async (t, s) => {
      await this.client.proposal.set(t, s), this.client.core.expirer.set(t, s.expiry);
    }, this.setPendingSessionRequest = async (t) => {
      const s = es.wc_sessionRequest.req.ttl, { id: r, topic: n, params: o, verifyContext: c } = t;
      await this.client.pendingRequest.set(r, { id: r, topic: n, params: o, verifyContext: c }), s && this.client.core.expirer.set(r, Mt(s));
    }, this.sendRequest = async (t) => {
      const { topic: s, method: r, params: n, expiry: o, relayRpcId: c, clientRpcId: u, throwOnFailedPublish: d } = t, p = ti(r, n, u);
      if (vs() && fm.includes(r)) {
        const x = Fi(JSON.stringify(p));
        this.client.core.verify.register({ attestationId: x });
      }
      const w = await this.client.core.crypto.encode(s, p), D = es[r].req;
      return o && (D.ttl = o), c && (D.id = c), this.client.core.history.set(s, p), d ? (D.internal = ts(Et({}, D.internal), { throwOnFailedPublish: !0 }), await this.client.core.relayer.publish(s, w, D)) : this.client.core.relayer.publish(s, w, D).catch((x) => this.client.logger.error(x)), p.id;
    }, this.sendResult = async (t) => {
      const { id: s, topic: r, result: n, throwOnFailedPublish: o } = t, c = xi(s, n), u = await this.client.core.crypto.encode(r, c), d = await this.client.core.history.get(r, s), p = es[d.request.method].res;
      o ? (p.internal = ts(Et({}, p.internal), { throwOnFailedPublish: !0 }), await this.client.core.relayer.publish(r, u, p)) : this.client.core.relayer.publish(r, u, p).catch((w) => this.client.logger.error(w)), await this.client.core.history.resolve(c);
    }, this.sendError = async (t, s, r) => {
      const n = qi(t, r), o = await this.client.core.crypto.encode(s, n), c = await this.client.core.history.get(s, t), u = es[c.request.method].res;
      this.client.core.relayer.publish(s, o, u), await this.client.core.history.resolve(n);
    }, this.cleanup = async () => {
      const t = [], s = [];
      this.client.session.getAll().forEach((r) => {
        ai(r.expiry) && t.push(r.topic);
      }), this.client.proposal.getAll().forEach((r) => {
        ai(r.expiry) && s.push(r.id);
      }), await Promise.all([...t.map((r) => this.deleteSession(r)), ...s.map((r) => this.deleteProposal(r))]);
    }, this.onRelayEventRequest = async (t) => {
      this.requestQueue.queue.push(t), await this.processRequestsQueue();
    }, this.processRequestsQueue = async () => {
      if (this.requestQueue.state === ei.active) {
        this.client.logger.info("Request queue already active, skipping...");
        return;
      }
      for (this.client.logger.info(`Request queue starting with ${this.requestQueue.queue.length} requests`); this.requestQueue.queue.length > 0; ) {
        this.requestQueue.state = ei.active;
        const t = this.requestQueue.queue.shift();
        if (t)
          try {
            this.processRequest(t), await new Promise((s) => setTimeout(s, 300));
          } catch (s) {
            this.client.logger.warn(s);
          }
      }
      this.requestQueue.state = ei.idle;
    }, this.processRequest = (t) => {
      const { topic: s, payload: r } = t, n = r.method;
      switch (n) {
        case "wc_sessionPropose":
          return this.onSessionProposeRequest(s, r);
        case "wc_sessionSettle":
          return this.onSessionSettleRequest(s, r);
        case "wc_sessionUpdate":
          return this.onSessionUpdateRequest(s, r);
        case "wc_sessionExtend":
          return this.onSessionExtendRequest(s, r);
        case "wc_sessionPing":
          return this.onSessionPingRequest(s, r);
        case "wc_sessionDelete":
          return this.onSessionDeleteRequest(s, r);
        case "wc_sessionRequest":
          return this.onSessionRequest(s, r);
        case "wc_sessionEvent":
          return this.onSessionEventRequest(s, r);
        default:
          return this.client.logger.info(`Unsupported request method ${n}`);
      }
    }, this.onRelayEventResponse = async (t) => {
      const { topic: s, payload: r } = t, n = (await this.client.core.history.get(s, r.id)).request.method;
      switch (n) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(s, r);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(s, r);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(s, r);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(s, r);
        case "wc_sessionPing":
          return this.onSessionPingResponse(s, r);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(s, r);
        default:
          return this.client.logger.info(`Unsupported response method ${n}`);
      }
    }, this.onRelayEventUnknownPayload = (t) => {
      const { topic: s } = t, { message: r } = Y("MISSING_OR_INVALID", `Decoded payload on topic ${s} is not identifiable as a JSON-RPC request or a response.`);
      throw new Error(r);
    }, this.onSessionProposeRequest = async (t, s) => {
      const { params: r, id: n } = s;
      try {
        this.isValidConnect(Et({}, s.params));
        const o = Mt(V.FIVE_MINUTES), c = Et({ id: n, pairingTopic: t, expiry: o }, r);
        await this.setProposal(n, c);
        const u = Fi(JSON.stringify(s)), d = await this.getVerifyContext(u, c.proposer.metadata);
        this.client.events.emit("session_proposal", { id: n, params: c, verifyContext: d });
      } catch (o) {
        await this.sendError(n, t, o), this.client.logger.error(o);
      }
    }, this.onSessionProposeResponse = async (t, s) => {
      const { id: r } = s;
      if (ht(s)) {
        const { result: n } = s;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: n });
        const o = this.client.proposal.get(r);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: o });
        const c = o.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: c });
        const u = n.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: u });
        const d = await this.client.core.crypto.generateSharedKey(c, u);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", sessionTopic: d });
        const p = await this.client.core.relayer.subscribe(d);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: p }), await this.client.core.pairing.activate({ topic: t });
      } else
        Ge(s) && (await this.client.proposal.delete(r, nt("USER_DISCONNECTED")), this.events.emit(Be("session_connect"), { error: s.error }));
    }, this.onSessionSettleRequest = async (t, s) => {
      const { id: r, params: n } = s;
      try {
        this.isValidSessionSettleRequest(n);
        const { relay: o, controller: c, expiry: u, namespaces: d, requiredNamespaces: p, optionalNamespaces: w, sessionProperties: D, pairingTopic: x } = s.params, E = Et({ topic: t, relay: o, expiry: u, namespaces: d, acknowledged: !0, pairingTopic: x, requiredNamespaces: p, optionalNamespaces: w, controller: c.publicKey, self: { publicKey: "", metadata: this.client.metadata }, peer: { publicKey: c.publicKey, metadata: c.metadata } }, D && { sessionProperties: D });
        await this.sendResult({ id: s.id, topic: t, result: !0 }), this.events.emit(Be("session_connect"), { session: E }), this.cleanupDuplicatePairings(E);
      } catch (o) {
        await this.sendError(r, t, o), this.client.logger.error(o);
      }
    }, this.onSessionSettleResponse = async (t, s) => {
      const { id: r } = s;
      ht(s) ? (await this.client.session.update(t, { acknowledged: !0 }), this.events.emit(Be("session_approve", r), {})) : Ge(s) && (await this.client.session.delete(t, nt("USER_DISCONNECTED")), this.events.emit(Be("session_approve", r), { error: s.error }));
    }, this.onSessionUpdateRequest = async (t, s) => {
      const { params: r, id: n } = s;
      try {
        const o = `${t}_session_update`, c = $s.get(o);
        if (c && this.isRequestOutOfSync(c, n)) {
          this.client.logger.info(`Discarding out of sync request - ${n}`);
          return;
        }
        this.isValidUpdate(Et({ topic: t }, r)), await this.client.session.update(t, { namespaces: r.namespaces }), await this.sendResult({ id: n, topic: t, result: !0 }), this.client.events.emit("session_update", { id: n, topic: t, params: r }), $s.set(o, n);
      } catch (o) {
        await this.sendError(n, t, o), this.client.logger.error(o);
      }
    }, this.isRequestOutOfSync = (t, s) => parseInt(s.toString().slice(0, -3)) <= parseInt(t.toString().slice(0, -3)), this.onSessionUpdateResponse = (t, s) => {
      const { id: r } = s;
      ht(s) ? this.events.emit(Be("session_update", r), {}) : Ge(s) && this.events.emit(Be("session_update", r), { error: s.error });
    }, this.onSessionExtendRequest = async (t, s) => {
      const { id: r } = s;
      try {
        this.isValidExtend({ topic: t }), await this.setExpiry(t, Mt(Fs)), await this.sendResult({ id: r, topic: t, result: !0 }), this.client.events.emit("session_extend", { id: r, topic: t });
      } catch (n) {
        await this.sendError(r, t, n), this.client.logger.error(n);
      }
    }, this.onSessionExtendResponse = (t, s) => {
      const { id: r } = s;
      ht(s) ? this.events.emit(Be("session_extend", r), {}) : Ge(s) && this.events.emit(Be("session_extend", r), { error: s.error });
    }, this.onSessionPingRequest = async (t, s) => {
      const { id: r } = s;
      try {
        this.isValidPing({ topic: t }), await this.sendResult({ id: r, topic: t, result: !0 }), this.client.events.emit("session_ping", { id: r, topic: t });
      } catch (n) {
        await this.sendError(r, t, n), this.client.logger.error(n);
      }
    }, this.onSessionPingResponse = (t, s) => {
      const { id: r } = s;
      setTimeout(() => {
        ht(s) ? this.events.emit(Be("session_ping", r), {}) : Ge(s) && this.events.emit(Be("session_ping", r), { error: s.error });
      }, 500);
    }, this.onSessionDeleteRequest = async (t, s) => {
      const { id: r } = s;
      try {
        this.isValidDisconnect({ topic: t, reason: s.params }), await Promise.all([new Promise((n) => {
          this.client.core.relayer.once(gt.publish, async () => {
            n(await this.deleteSession(t));
          });
        }), this.sendResult({ id: r, topic: t, result: !0 })]), this.client.events.emit("session_delete", { id: r, topic: t });
      } catch (n) {
        this.client.logger.error(n);
      }
    }, this.onSessionRequest = async (t, s) => {
      const { id: r, params: n } = s;
      try {
        this.isValidRequest(Et({ topic: t }, n));
        const o = Fi(JSON.stringify(ti("wc_sessionRequest", n, r))), c = this.client.session.get(t), u = await this.getVerifyContext(o, c.peer.metadata), d = { id: r, topic: t, params: n, verifyContext: u };
        await this.setPendingSessionRequest(d), this.addSessionRequestToSessionRequestQueue(d), this.processSessionRequestQueue();
      } catch (o) {
        await this.sendError(r, t, o), this.client.logger.error(o);
      }
    }, this.onSessionRequestResponse = (t, s) => {
      const { id: r } = s;
      ht(s) ? this.events.emit(Be("session_request", r), { result: s.result }) : Ge(s) && this.events.emit(Be("session_request", r), { error: s.error });
    }, this.onSessionEventRequest = async (t, s) => {
      const { id: r, params: n } = s;
      try {
        const o = `${t}_session_event_${n.event.name}`, c = $s.get(o);
        if (c && this.isRequestOutOfSync(c, r)) {
          this.client.logger.info(`Discarding out of sync request - ${r}`);
          return;
        }
        this.isValidEmit(Et({ topic: t }, n)), this.client.events.emit("session_event", { id: r, topic: t, params: n }), $s.set(o, r);
      } catch (o) {
        await this.sendError(r, t, o), this.client.logger.error(o);
      }
    }, this.addSessionRequestToSessionRequestQueue = (t) => {
      this.sessionRequestQueue.queue.push(t);
    }, this.cleanupAfterResponse = (t) => {
      this.deletePendingSessionRequest(t.response.id, { message: "fulfilled", code: 0 }), setTimeout(() => {
        this.sessionRequestQueue.state = ei.idle, this.processSessionRequestQueue();
      }, V.toMiliseconds(this.requestQueueDelay));
    }, this.processSessionRequestQueue = () => {
      if (this.sessionRequestQueue.state === ei.active) {
        this.client.logger.info("session request queue is already active.");
        return;
      }
      const t = this.sessionRequestQueue.queue[0];
      if (!t) {
        this.client.logger.info("session request queue is empty.");
        return;
      }
      try {
        this.sessionRequestQueue.state = ei.active, this.client.events.emit("session_request", t);
      } catch (s) {
        this.client.logger.error(s);
      }
    }, this.onPairingCreated = (t) => {
      if (t.active)
        return;
      const s = this.client.proposal.getAll().find((r) => r.pairingTopic === t.topic);
      s && this.onSessionProposeRequest(t.topic, ti("wc_sessionPropose", { requiredNamespaces: s.requiredNamespaces, optionalNamespaces: s.optionalNamespaces, relays: s.relays, proposer: s.proposer }, s.id));
    }, this.isValidConnect = async (t) => {
      if (!St(t)) {
        const { message: u } = Y("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(t)}`);
        throw new Error(u);
      }
      const { pairingTopic: s, requiredNamespaces: r, optionalNamespaces: n, sessionProperties: o, relays: c } = t;
      if (wt(s) || await this.isValidPairingTopic(s), !Qp(c, !0)) {
        const { message: u } = Y("MISSING_OR_INVALID", `connect() relays: ${c}`);
        throw new Error(u);
      }
      !wt(r) && cs(r) !== 0 && this.validateNamespaces(r, "requiredNamespaces"), !wt(n) && cs(n) !== 0 && this.validateNamespaces(n, "optionalNamespaces"), wt(o) || this.validateSessionProps(o, "sessionProperties");
    }, this.validateNamespaces = (t, s) => {
      const r = Jp(t, "connect()", s);
      if (r)
        throw new Error(r.message);
    }, this.isValidApprove = async (t) => {
      if (!St(t))
        throw new Error(Y("MISSING_OR_INVALID", `approve() params: ${t}`).message);
      const { id: s, namespaces: r, relayProtocol: n, sessionProperties: o } = t;
      await this.isValidProposalId(s);
      const c = this.client.proposal.get(s), u = js(r, "approve()");
      if (u)
        throw new Error(u.message);
      const d = qo(c.requiredNamespaces, r, "approve()");
      if (d)
        throw new Error(d.message);
      if (!ot(n, !0)) {
        const { message: p } = Y("MISSING_OR_INVALID", `approve() relayProtocol: ${n}`);
        throw new Error(p);
      }
      wt(o) || this.validateSessionProps(o, "sessionProperties");
    }, this.isValidReject = async (t) => {
      if (!St(t)) {
        const { message: n } = Y("MISSING_OR_INVALID", `reject() params: ${t}`);
        throw new Error(n);
      }
      const { id: s, reason: r } = t;
      if (await this.isValidProposalId(s), !Zp(r)) {
        const { message: n } = Y("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(r)}`);
        throw new Error(n);
      }
    }, this.isValidSessionSettleRequest = (t) => {
      if (!St(t)) {
        const { message: d } = Y("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${t}`);
        throw new Error(d);
      }
      const { relay: s, controller: r, namespaces: n, expiry: o } = t;
      if (!Vc(s)) {
        const { message: d } = Y("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(d);
      }
      const c = Bp(r, "onSessionSettleRequest()");
      if (c)
        throw new Error(c.message);
      const u = js(n, "onSessionSettleRequest()");
      if (u)
        throw new Error(u.message);
      if (ai(o)) {
        const { message: d } = Y("EXPIRED", "onSessionSettleRequest()");
        throw new Error(d);
      }
    }, this.isValidUpdate = async (t) => {
      if (!St(t)) {
        const { message: u } = Y("MISSING_OR_INVALID", `update() params: ${t}`);
        throw new Error(u);
      }
      const { topic: s, namespaces: r } = t;
      await this.isValidSessionTopic(s);
      const n = this.client.session.get(s), o = js(r, "update()");
      if (o)
        throw new Error(o.message);
      const c = qo(n.requiredNamespaces, r, "update()");
      if (c)
        throw new Error(c.message);
    }, this.isValidExtend = async (t) => {
      if (!St(t)) {
        const { message: r } = Y("MISSING_OR_INVALID", `extend() params: ${t}`);
        throw new Error(r);
      }
      const { topic: s } = t;
      await this.isValidSessionTopic(s);
    }, this.isValidRequest = async (t) => {
      if (!St(t)) {
        const { message: u } = Y("MISSING_OR_INVALID", `request() params: ${t}`);
        throw new Error(u);
      }
      const { topic: s, request: r, chainId: n, expiry: o } = t;
      await this.isValidSessionTopic(s);
      const { namespaces: c } = this.client.session.get(s);
      if (!Mo(c, n)) {
        const { message: u } = Y("MISSING_OR_INVALID", `request() chainId: ${n}`);
        throw new Error(u);
      }
      if (!eg(r)) {
        const { message: u } = Y("MISSING_OR_INVALID", `request() ${JSON.stringify(r)}`);
        throw new Error(u);
      }
      if (!sg(c, n, r.method)) {
        const { message: u } = Y("MISSING_OR_INVALID", `request() method: ${r.method}`);
        throw new Error(u);
      }
      if (o && !ag(o, Rr)) {
        const { message: u } = Y("MISSING_OR_INVALID", `request() expiry: ${o}. Expiry must be a number (in seconds) between ${Rr.min} and ${Rr.max}`);
        throw new Error(u);
      }
    }, this.isValidRespond = async (t) => {
      if (!St(t)) {
        const { message: n } = Y("MISSING_OR_INVALID", `respond() params: ${t}`);
        throw new Error(n);
      }
      const { topic: s, response: r } = t;
      if (await this.isValidSessionTopic(s), !tg(r)) {
        const { message: n } = Y("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(r)}`);
        throw new Error(n);
      }
    }, this.isValidPing = async (t) => {
      if (!St(t)) {
        const { message: r } = Y("MISSING_OR_INVALID", `ping() params: ${t}`);
        throw new Error(r);
      }
      const { topic: s } = t;
      await this.isValidSessionOrPairingTopic(s);
    }, this.isValidEmit = async (t) => {
      if (!St(t)) {
        const { message: c } = Y("MISSING_OR_INVALID", `emit() params: ${t}`);
        throw new Error(c);
      }
      const { topic: s, event: r, chainId: n } = t;
      await this.isValidSessionTopic(s);
      const { namespaces: o } = this.client.session.get(s);
      if (!Mo(o, n)) {
        const { message: c } = Y("MISSING_OR_INVALID", `emit() chainId: ${n}`);
        throw new Error(c);
      }
      if (!ig(r)) {
        const { message: c } = Y("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(r)}`);
        throw new Error(c);
      }
      if (!rg(o, n, r.name)) {
        const { message: c } = Y("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(r)}`);
        throw new Error(c);
      }
    }, this.isValidDisconnect = async (t) => {
      if (!St(t)) {
        const { message: r } = Y("MISSING_OR_INVALID", `disconnect() params: ${t}`);
        throw new Error(r);
      }
      const { topic: s } = t;
      await this.isValidSessionOrPairingTopic(s);
    }, this.getVerifyContext = async (t, s) => {
      const r = { verified: { verifyUrl: s.verifyUrl || zs, validation: "UNKNOWN", origin: s.url || "" } };
      try {
        const n = await this.client.core.verify.resolve({ attestationId: t, verifyUrl: s.verifyUrl });
        n && (r.verified.origin = n.origin, r.verified.isScam = n.isScam, r.verified.validation = n.origin === new URL(s.url).origin ? "VALID" : "INVALID");
      } catch (n) {
        this.client.logger.info(n);
      }
      return this.client.logger.info(`Verify context: ${JSON.stringify(r)}`), r;
    }, this.validateSessionProps = (t, s) => {
      Object.values(t).forEach((r) => {
        if (!ot(r, !1)) {
          const { message: n } = Y("MISSING_OR_INVALID", `${s} must be in Record<string, string> format. Received: ${JSON.stringify(r)}`);
          throw new Error(n);
        }
      });
    };
  }
  async isInitialized() {
    if (!this.initialized) {
      const { message: e } = Y("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
    await this.client.core.relayer.confirmOnlineStateOrThrow();
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(gt.message, async (e) => {
      const { topic: t, message: s } = e;
      if (this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s)))
        return;
      const r = await this.client.core.crypto.decode(t, s);
      try {
        ji(r) ? (this.client.core.history.set(t, r), this.onRelayEventRequest({ topic: t, payload: r })) : Oi(r) ? (await this.client.core.history.resolve(r), await this.onRelayEventResponse({ topic: t, payload: r }), this.client.core.history.delete(t, r.id)) : this.onRelayEventUnknownPayload({ topic: t, payload: r });
      } catch (n) {
        this.client.logger.error(n);
      }
    });
  }
  registerExpirerEvents() {
    this.client.core.expirer.on(Tt.expired, async (e) => {
      const { topic: t, id: s } = zc(e.target);
      if (s && this.client.pendingRequest.keys.includes(s))
        return await this.deletePendingSessionRequest(s, Y("EXPIRED"), !0);
      t ? this.client.session.keys.includes(t) && (await this.deleteSession(t, !0), this.client.events.emit("session_expire", { topic: t })) : s && (await this.deleteProposal(s, !0), this.client.events.emit("proposal_expire", { id: s }));
    });
  }
  registerPairingEvents() {
    this.client.core.pairing.events.on(os.create, (e) => this.onPairingCreated(e));
  }
  isValidPairingTopic(e) {
    if (!ot(e, !1)) {
      const { message: t } = Y("MISSING_OR_INVALID", `pairing topic should be a string: ${e}`);
      throw new Error(t);
    }
    if (!this.client.core.pairing.pairings.keys.includes(e)) {
      const { message: t } = Y("NO_MATCHING_KEY", `pairing topic doesn't exist: ${e}`);
      throw new Error(t);
    }
    if (ai(this.client.core.pairing.pairings.get(e).expiry)) {
      const { message: t } = Y("EXPIRED", `pairing topic: ${e}`);
      throw new Error(t);
    }
  }
  async isValidSessionTopic(e) {
    if (!ot(e, !1)) {
      const { message: t } = Y("MISSING_OR_INVALID", `session topic should be a string: ${e}`);
      throw new Error(t);
    }
    if (!this.client.session.keys.includes(e)) {
      const { message: t } = Y("NO_MATCHING_KEY", `session topic doesn't exist: ${e}`);
      throw new Error(t);
    }
    if (ai(this.client.session.get(e).expiry)) {
      await this.deleteSession(e);
      const { message: t } = Y("EXPIRED", `session topic: ${e}`);
      throw new Error(t);
    }
  }
  async isValidSessionOrPairingTopic(e) {
    if (this.client.session.keys.includes(e))
      await this.isValidSessionTopic(e);
    else if (this.client.core.pairing.pairings.keys.includes(e))
      this.isValidPairingTopic(e);
    else if (ot(e, !1)) {
      const { message: t } = Y("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${e}`);
      throw new Error(t);
    } else {
      const { message: t } = Y("MISSING_OR_INVALID", `session or pairing topic should be a string: ${e}`);
      throw new Error(t);
    }
  }
  async isValidProposalId(e) {
    if (!Xp(e)) {
      const { message: t } = Y("MISSING_OR_INVALID", `proposal id should be a number: ${e}`);
      throw new Error(t);
    }
    if (!this.client.proposal.keys.includes(e)) {
      const { message: t } = Y("NO_MATCHING_KEY", `proposal id doesn't exist: ${e}`);
      throw new Error(t);
    }
    if (ai(this.client.proposal.get(e).expiry)) {
      await this.deleteProposal(e);
      const { message: t } = Y("EXPIRED", `proposal id: ${e}`);
      throw new Error(t);
    }
  }
}, vm = class extends lr {
  constructor(e, t) {
    super(e, t, cm, Sn), this.core = e, this.logger = t;
  }
}, _m = class extends lr {
  constructor(e, t) {
    super(e, t, um, Sn), this.core = e, this.logger = t;
  }
}, Em = class extends lr {
  constructor(e, t) {
    super(e, t, dm, Sn, (s) => s.id), this.core = e, this.logger = t;
  }
}, Sm = class gh extends El {
  constructor(e) {
    super(e), this.protocol = dh, this.version = fh, this.name = Pr.name, this.events = new We.EventEmitter(), this.on = (s, r) => this.events.on(s, r), this.once = (s, r) => this.events.once(s, r), this.off = (s, r) => this.events.off(s, r), this.removeListener = (s, r) => this.events.removeListener(s, r), this.removeAllListeners = (s) => this.events.removeAllListeners(s), this.connect = async (s) => {
      try {
        return await this.engine.connect(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.pair = async (s) => {
      try {
        return await this.engine.pair(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.approve = async (s) => {
      try {
        return await this.engine.approve(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.reject = async (s) => {
      try {
        return await this.engine.reject(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.update = async (s) => {
      try {
        return await this.engine.update(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.extend = async (s) => {
      try {
        return await this.engine.extend(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.request = async (s) => {
      try {
        return await this.engine.request(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.respond = async (s) => {
      try {
        return await this.engine.respond(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.ping = async (s) => {
      try {
        return await this.engine.ping(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.emit = async (s) => {
      try {
        return await this.engine.emit(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.disconnect = async (s) => {
      try {
        return await this.engine.disconnect(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.find = (s) => {
      try {
        return this.engine.find(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.getPendingSessionRequests = () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }, this.name = e?.name || Pr.name, this.metadata = e?.metadata || gp();
    const t = typeof e?.logger < "u" && typeof e?.logger != "string" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({ level: e?.logger || Pr.logger }));
    this.core = e?.core || new am(e), this.logger = ee.generateChildLogger(t, this.name), this.session = new _m(this.core, this.logger), this.proposal = new vm(this.core, this.logger), this.pendingRequest = new Em(this.core, this.logger), this.engine = new bm(this);
  }
  static async init(e) {
    const t = new gh(e);
    return await t.initialize(), t;
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.engine.init(), this.core.verify.init({ verifyUrl: this.metadata.verifyUrl }), this.logger.info("SignClient Initialization Success");
    } catch (e) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(e.message), e;
    }
  }
};
const Im = () => {
  const e = hn()?.os?.toLowerCase();
  return e?.includes("android") ? "android" : e?.toLowerCase().includes("ios") || e?.toLowerCase().includes("mac") && navigator.maxTouchPoints > 1 ? "ios" : "desktop";
}, Us = Im(), Dm = {
  position: "fixed",
  top: "0",
  left: "0",
  right: "0",
  bottom: "0",
  backgroundColor: "rgba(0,0,0,0.8)",
  backdropFilter: "blur(10px)",
  zIndex: "9999",
  display: "flex",
  alignItems: "center",
  justifyContent: "center",
  flexDirection: "column",
  color: "white",
  fontWeight: "500",
  fontFamily: "'Barlow', sans-serif"
}, xm = {
  width: "840px",
  height: "540px",
  zIndex: "99999",
  backgroundColor: "white",
  border: "none",
  outline: "none",
  borderRadius: "40px",
  boxShadow: "0px 4px 40px 0px rgb(0 0 0), 0px 4px 8px 0px rgb(0 0 0 / 25%)",
  position: "fixed",
  top: "50%",
  left: "50%",
  transform: "translate(-50%,-50%)"
}, Om = `
  <div style="position: relative">
    <iframe class="argent-iframe" allow="clipboard-write"></iframe>
    <div class="argent-close-button" style="position: absolute; top: 24px; right: 24px; cursor: pointer;">
      <svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
        <circle cx="16" cy="16" r="16" fill="#F5F3F0"/>
        <path fill-rule="evenodd" clip-rule="evenodd" d="M22.2462 9.75382C22.7018 10.2094 22.7018 10.9481 22.2462 11.4037L17.6499 16L22.2462 20.5963C22.7018 21.0519 22.7018 21.7906 22.2462 22.2462C21.7905 22.7018 21.0519 22.7018 20.5962 22.2462L16 17.6499L11.4039 22.246C10.9482 22.7017 10.2096 22.7017 9.75394 22.246C9.29833 21.7904 9.29833 21.0517 9.75394 20.5961L14.3501 16L9.75394 11.4039C9.29833 10.9483 9.29833 10.2096 9.75394 9.75396C10.2096 9.29835 10.9482 9.29835 11.4039 9.75396L16 14.3501L20.5962 9.75382C21.0519 9.29821 21.7905 9.29821 22.2462 9.75382Z" fill="#333332"/>
      </svg>
    </div>
  </div>
`;
class Nm {
  constructor() {
    be(this, "bridgeUrl", "https://login.argent.xyz");
    be(this, "mobileUrl", "argent://");
    be(this, "type", "overlay");
    be(this, "wcUri");
    be(this, "overlay");
    be(this, "popupWindow");
    be(this, "closingTimeout");
    be(this, "close", () => {
      this.overlay?.remove(), this.popupWindow?.close(), this.overlay = void 0, this.popupWindow = void 0;
    });
  }
  showConnectionModal(e) {
    const t = encodeURIComponent(e), s = encodeURIComponent(window.location.href);
    this.showModal({
      desktop: `${this.bridgeUrl}?wc=${t}&device=desktop`,
      ios: `${this.mobileUrl}app/wc?uri=${t}&href=${s}&device=mobile`,
      android: `${this.mobileUrl}app/wc?uri=${t}&href=${s}&device=mobile`
    });
  }
  showApprovalModal(e) {
    if (Us === "desktop") {
      this.showModal({
        desktop: `${this.bridgeUrl}?action=sign`,
        ios: "",
        android: ""
      });
      return;
    }
    const t = encodeURIComponent(window.location.href);
    this.showModal({
      desktop: `${this.bridgeUrl}?action=sign&device=desktop`,
      ios: `${this.mobileUrl}app/wc/request?href=${t}&device=mobile`,
      android: `${this.mobileUrl}app/wc/request?href=${t}&device=mobile`
    });
  }
  closeModal(e) {
    e ? (this.overlay?.querySelector("iframe")?.contentWindow?.postMessage("argent-login.success", "*"), this.popupWindow?.postMessage("argent-login.success", "*"), this.closingTimeout = setTimeout(this.close, 3400)) : this.close();
  }
  showModal(e) {
    if (clearTimeout(this.closingTimeout), (this.overlay || this.popupWindow) && this.close(), Us === "android" || Us === "ios") {
      const n = document.createElement("button");
      n.style.display = "none", n.addEventListener("click", () => {
        window.location.href = e[Us];
      }), n.click();
      return;
    }
    if (this.type === "window") {
      const n = "menubar=no,location=no,resizable=no,scrollbars=no,status=no,width=840,height=540";
      this.popupWindow = window.open(e.desktop, "_blank", n) || void 0;
      return;
    }
    const t = document.createElement("div");
    t.innerHTML = Om;
    for (const [n, o] of Object.entries(Dm))
      t.style[n] = o;
    document.body.appendChild(t), t.addEventListener("click", () => this.closeModal()), this.overlay = t;
    const s = t.querySelector("iframe");
    s.setAttribute("src", e.desktop);
    for (const [n, o] of Object.entries(xm))
      s.style[n] = o;
    t.querySelector(
      ".argent-close-button"
    ).addEventListener("click", () => this.closeModal());
  }
}
const kt = new Nm(), Qs = Lr.NetworkName, Pm = async ({
  projectId: i,
  chainId: e,
  name: t,
  description: s,
  rpcUrl: r,
  bridgeUrl: n = Rm(e),
  mobileUrl: o = Cm(e),
  modalType: c = "overlay",
  url: u,
  walletConnect: d
}, p) => {
  if (!n)
    throw new Error("bridgeUrl is required");
  if (!o)
    throw new Error("mobileUrl is required");
  kt.bridgeUrl = n, kt.mobileUrl = o, kt.type = c;
  const w = {
    projectId: i,
    metadata: {
      name: t ?? "Unknown dapp",
      description: s ?? "Unknown dapp description",
      url: u ?? "#",
      icons: ["https://walletconnect.com/walletconnect-logo.png"],
      ...d?.metadata
    }
  }, D = await Sm.init(w), x = new p({ client: D, chainId: e, rpcUrl: r });
  D.on("session_event", (E) => {
  }), D.on("session_update", ({ topic: E, params: C }) => {
    const { namespaces: F } = C, K = D.session.get(E);
    x.updateSession({ ...K, namespaces: F });
  }), D.on("session_delete", () => {
  });
  try {
    const E = D.session.getAll().find(x.isValidSession);
    if (E)
      return x.updateSession(E), x;
    const C = { requiredNamespaces: x.getRequiredNamespaces() };
    Uu(), await new Promise((I) => setTimeout(I, 200));
    const { uri: F, approval: K } = await D.connect(C);
    if (F) {
      kt.showConnectionModal(F), kt.wcUri = F;
      const I = await K();
      x.updateSession(I), kt.closeModal("animateSuccess");
    }
    return x;
  } catch {
    return console.error("@argent/login::error"), kt.closeModal(), null;
  }
}, Rm = (i) => {
  if (!i)
    throw new Error(
      `Unknown or unsupported chainId (${i}), either specify a supported chain or set bridgeUrl.`
    );
  const e = parseInt(`${i}`);
  if (String(i).startsWith(Qs.SN_GOERLI) || e === 5)
    return "https://login.hydrogen.argent47.net";
  if (String(i).startsWith(Qs.SN_MAIN) || e === 1)
    return "https://login.argent.xyz";
}, Cm = (i) => {
  if (!i)
    throw new Error(
      `Unknown or unsupported chainId (${i}), either specify a supported chain or set mobileUrl.`
    );
  const e = parseInt(`${i}`);
  if (String(i).startsWith(Qs.SN_GOERLI) || e === 5)
    return "argent-dev://";
  if (String(i).startsWith(Qs.SN_MAIN) || e === 1)
    return "argent://";
};
class Am extends Nt {
  constructor(e) {
    super(), this.opts = e, this.protocol = "wc", this.version = 2;
  }
}
class Tm extends Nt {
  constructor(e, t) {
    super(), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map();
  }
}
class $m {
  constructor(e, t) {
    this.logger = e, this.core = t;
  }
}
class Fm extends Nt {
  constructor(e, t) {
    super(), this.relayer = e, this.logger = t;
  }
}
let Um = class extends Nt {
  constructor(e) {
    super();
  }
}, Lm = class {
  constructor(e, t, s, r) {
    this.core = e, this.logger = t, this.name = s;
  }
};
class Mm extends Nt {
  constructor(e, t) {
    super(), this.relayer = e, this.logger = t;
  }
}
class qm extends Nt {
  constructor(e, t) {
    super(), this.core = e, this.logger = t;
  }
}
class jm {
  constructor(e, t) {
    this.projectId = e, this.logger = t;
  }
}
let zm = class {
  constructor(e) {
    this.opts = e, this.protocol = "wc", this.version = 2;
  }
}, Km = class {
  constructor(e) {
    this.client = e;
  }
};
const yh = ":";
function Vm(i) {
  const { namespace: e, reference: t } = i;
  return [e, t].join(yh);
}
function Bm(i) {
  const [e, t, s] = i.split(yh);
  return { namespace: e, reference: t, address: s };
}
function km(i, e) {
  const t = [];
  return i.forEach((s) => {
    const r = e(s);
    t.includes(r) || t.push(r);
  }), t;
}
function Hm(i) {
  const { namespace: e, reference: t } = Bm(i);
  return Vm({ namespace: e, reference: t });
}
function Gm(i) {
  return km(i, Hm);
}
function Wm(i, e = []) {
  const t = [];
  return Object.keys(i).forEach((s) => {
    if (e.length && !e.includes(s))
      return;
    const r = i[s];
    t.push(...r.accounts);
  }), t;
}
function Ym(i, e = []) {
  const t = [];
  return Object.keys(i).forEach((s) => {
    if (e.length && !e.includes(s))
      return;
    const r = i[s];
    t.push(...Gm(r.accounts));
  }), t;
}
function Jm(i, e = []) {
  const t = [];
  return Object.keys(i).forEach((s) => {
    if (e.length && !e.includes(s))
      return;
    const r = i[s];
    t.push(...In(s, r));
  }), t;
}
function In(i, e) {
  return i.includes(":") ? [i] : e.chains || [];
}
const mh = "base10", _t = "base16", Jr = "base64pad", Dn = "utf8", wh = 0, Ni = 1, Qm = 0, ya = 1, Qr = 12, xn = 32;
function Xm() {
  const i = ms.generateKeyPair();
  return { privateKey: Ne(i.secretKey, _t), publicKey: Ne(i.publicKey, _t) };
}
function Xr() {
  const i = li.randomBytes(xn);
  return Ne(i, _t);
}
function Zm(i, e) {
  const t = ms.sharedKey(Ce(i, _t), Ce(e, _t)), s = new Cc(Si.SHA256, t).expand(xn);
  return Ne(s, _t);
}
function ew(i) {
  const e = Si.hash(Ce(i, _t));
  return Ne(e, _t);
}
function Ui(i) {
  const e = Si.hash(Ce(i, Dn));
  return Ne(e, _t);
}
function tw(i) {
  return Ce(`${i}`, mh);
}
function Is(i) {
  return Number(Ne(i, mh));
}
function iw(i) {
  const e = tw(typeof i.type < "u" ? i.type : wh);
  if (Is(e) === Ni && typeof i.senderPublicKey > "u")
    throw new Error("Missing sender public key for type 1 envelope");
  const t = typeof i.senderPublicKey < "u" ? Ce(i.senderPublicKey, _t) : void 0, s = typeof i.iv < "u" ? Ce(i.iv, _t) : li.randomBytes(Qr), r = new gs.ChaCha20Poly1305(Ce(i.symKey, _t)).seal(s, Ce(i.message, Dn));
  return rw({ type: e, sealed: r, iv: s, senderPublicKey: t });
}
function sw(i) {
  const e = new gs.ChaCha20Poly1305(Ce(i.symKey, _t)), { sealed: t, iv: s } = Xs(i.encoded), r = e.open(s, t);
  if (r === null)
    throw new Error("Failed to decrypt");
  return Ne(r, Dn);
}
function rw(i) {
  if (Is(i.type) === Ni) {
    if (typeof i.senderPublicKey > "u")
      throw new Error("Missing sender public key for type 1 envelope");
    return Ne(ls([i.type, i.senderPublicKey, i.iv, i.sealed]), Jr);
  }
  return Ne(ls([i.type, i.iv, i.sealed]), Jr);
}
function Xs(i) {
  const e = Ce(i, Jr), t = e.slice(Qm, ya), s = ya;
  if (Is(t) === Ni) {
    const c = s + xn, u = c + Qr, d = e.slice(s, c), p = e.slice(c, u), w = e.slice(u);
    return { type: t, sealed: w, iv: p, senderPublicKey: d };
  }
  const r = s + Qr, n = e.slice(s, r), o = e.slice(r);
  return { type: t, sealed: o, iv: n };
}
function nw(i, e) {
  const t = Xs(i);
  return bh({ type: Is(t.type), senderPublicKey: typeof t.senderPublicKey < "u" ? Ne(t.senderPublicKey, _t) : void 0, receiverPublicKey: e?.receiverPublicKey });
}
function bh(i) {
  const e = i?.type || wh;
  if (e === Ni) {
    if (typeof i?.senderPublicKey > "u")
      throw new Error("missing sender public key");
    if (typeof i?.receiverPublicKey > "u")
      throw new Error("missing receiver public key");
  }
  return { type: e, senderPublicKey: i?.senderPublicKey, receiverPublicKey: i?.receiverPublicKey };
}
function ma(i) {
  return i.type === Ni && typeof i.senderPublicKey == "string" && typeof i.receiverPublicKey == "string";
}
var ow = Object.defineProperty, wa = Object.getOwnPropertySymbols, aw = Object.prototype.hasOwnProperty, cw = Object.prototype.propertyIsEnumerable, ba = (i, e, t) => e in i ? ow(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, va = (i, e) => {
  for (var t in e || (e = {}))
    aw.call(e, t) && ba(i, t, e[t]);
  if (wa)
    for (var t of wa(e))
      cw.call(e, t) && ba(i, t, e[t]);
  return i;
};
const hw = "ReactNative", as = { reactNative: "react-native", node: "node", browser: "browser", unknown: "unknown" }, uw = "js";
function On() {
  return typeof process < "u" && typeof process.versions < "u" && typeof process.versions.node < "u";
}
function vh() {
  return !un() && !!ws() && navigator.product === hw;
}
function Nn() {
  return !On() && !!ws();
}
function lw() {
  return vh() ? as.reactNative : On() ? as.node : Nn() ? as.browser : as.unknown;
}
function dw(i, e) {
  let t = ii.parse(i);
  return t = va(va({}, t), e), i = ii.stringify(t), i;
}
function fw() {
  return fn() || { name: "", description: "", url: "", icons: [""] };
}
function pw() {
  const i = hn();
  if (i === null)
    return "unknown";
  const e = i.os ? i.os.replace(" ", "").toLowerCase() : "unknown";
  return i.type === "browser" ? [e, i.name, i.version].join("-") : [e, i.version].join("-");
}
function gw() {
  var i;
  const e = lw();
  return e === as.browser ? [e, ((i = ln()) == null ? void 0 : i.host) || "unknown"].join(":") : e;
}
function yw(i, e, t) {
  const s = pw(), r = gw();
  return [[i, e].join("-"), [uw, t].join("-"), s, r].join("/");
}
function mw({ protocol: i, version: e, relayUrl: t, sdkVersion: s, auth: r, projectId: n, useOnCloseEvent: o }) {
  const c = t.split("?"), u = yw(i, e, s), d = { auth: r, ua: u, projectId: n, useOnCloseEvent: o || void 0 }, p = dw(c[1] || "", d);
  return c[0] + "?" + p;
}
function Ei(i, e) {
  return i.filter((t) => e.includes(t)).length === i.length;
}
function _h(i) {
  return Object.fromEntries(i.entries());
}
function Eh(i) {
  return new Map(Object.entries(i));
}
function Ti(i = V.FIVE_MINUTES, e) {
  const t = V.toMiliseconds(i || V.FIVE_MINUTES);
  let s, r, n;
  return { resolve: (o) => {
    n && s && (clearTimeout(n), s(o));
  }, reject: (o) => {
    n && r && (clearTimeout(n), r(o));
  }, done: () => new Promise((o, c) => {
    n = setTimeout(() => {
      c(new Error(e));
    }, t), s = o, r = c;
  }) };
}
function Zs(i, e, t) {
  return new Promise(async (s, r) => {
    const n = setTimeout(() => r(new Error(t)), e);
    try {
      const o = await i;
      s(o);
    } catch (o) {
      r(o);
    }
    clearTimeout(n);
  });
}
function Sh(i, e) {
  if (typeof e == "string" && e.startsWith(`${i}:`))
    return e;
  if (i.toLowerCase() === "topic") {
    if (typeof e != "string")
      throw new Error('Value must be "string" for expirer target type: topic');
    return `topic:${e}`;
  } else if (i.toLowerCase() === "id") {
    if (typeof e != "number")
      throw new Error('Value must be "number" for expirer target type: id');
    return `id:${e}`;
  }
  throw new Error(`Unknown expirer target type: ${i}`);
}
function ww(i) {
  return Sh("topic", i);
}
function bw(i) {
  return Sh("id", i);
}
function Ih(i) {
  const [e, t] = i.split(":"), s = { id: void 0, topic: void 0 };
  if (e === "topic" && typeof t == "string")
    s.topic = t;
  else if (e === "id" && Number.isInteger(Number(t)))
    s.id = Number(t);
  else
    throw new Error(`Invalid target, expected id:number or topic:string, got ${e}:${t}`);
  return s;
}
function Ht(i, e) {
  return V.fromMiliseconds((e || Date.now()) + V.toMiliseconds(i));
}
function ci(i) {
  return Date.now() >= V.toMiliseconds(i);
}
function ke(i, e) {
  return `${i}${e ? `:${e}` : ""}`;
}
const vw = "irn";
function Zr(i) {
  return i?.relay || { protocol: vw };
}
function Ks(i) {
  const e = Tc[i];
  if (typeof e > "u")
    throw new Error(`Relay Protocol not supported: ${i}`);
  return e;
}
var _w = Object.defineProperty, _a = Object.getOwnPropertySymbols, Ew = Object.prototype.hasOwnProperty, Sw = Object.prototype.propertyIsEnumerable, Ea = (i, e, t) => e in i ? _w(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, Iw = (i, e) => {
  for (var t in e || (e = {}))
    Ew.call(e, t) && Ea(i, t, e[t]);
  if (_a)
    for (var t of _a(e))
      Sw.call(e, t) && Ea(i, t, e[t]);
  return i;
};
function Dw(i, e = "-") {
  const t = {}, s = "relay" + e;
  return Object.keys(i).forEach((r) => {
    if (r.startsWith(s)) {
      const n = r.replace(s, ""), o = i[r];
      t[n] = o;
    }
  }), t;
}
function xw(i) {
  const e = i.indexOf(":"), t = i.indexOf("?") !== -1 ? i.indexOf("?") : void 0, s = i.substring(0, e), r = i.substring(e + 1, t).split("@"), n = typeof t < "u" ? i.substring(t) : "", o = ii.parse(n);
  return { protocol: s, topic: Ow(r[0]), version: parseInt(r[1], 10), symKey: o.symKey, relay: Dw(o) };
}
function Ow(i) {
  return i.startsWith("//") ? i.substring(2) : i;
}
function Nw(i, e = "-") {
  const t = "relay", s = {};
  return Object.keys(i).forEach((r) => {
    const n = t + e + r;
    i[r] && (s[n] = i[r]);
  }), s;
}
function Pw(i) {
  return `${i.protocol}:${i.topic}@${i.version}?` + ii.stringify(Iw({ symKey: i.symKey }, Nw(i.relay)));
}
function zi(i) {
  const e = [];
  return i.forEach((t) => {
    const [s, r] = t.split(":");
    e.push(`${s}:${r}`);
  }), e;
}
function Rw(i) {
  const e = [];
  return Object.values(i).forEach((t) => {
    e.push(...zi(t.accounts));
  }), e;
}
function Cw(i, e) {
  const t = [];
  return Object.values(i).forEach((s) => {
    zi(s.accounts).includes(e) && t.push(...s.methods);
  }), t;
}
function Aw(i, e) {
  const t = [];
  return Object.values(i).forEach((s) => {
    zi(s.accounts).includes(e) && t.push(...s.events);
  }), t;
}
function Tw(i, e) {
  const t = Vs(i, e);
  if (t)
    throw new Error(t.message);
  const s = {};
  for (const [r, n] of Object.entries(i))
    s[r] = { methods: n.methods, events: n.events, chains: n.accounts.map((o) => `${o.split(":")[0]}:${o.split(":")[1]}`) };
  return s;
}
const $w = { INVALID_METHOD: { message: "Invalid method.", code: 1001 }, INVALID_EVENT: { message: "Invalid event.", code: 1002 }, INVALID_UPDATE_REQUEST: { message: "Invalid update request.", code: 1003 }, INVALID_EXTEND_REQUEST: { message: "Invalid extend request.", code: 1004 }, INVALID_SESSION_SETTLE_REQUEST: { message: "Invalid session settle request.", code: 1005 }, UNAUTHORIZED_METHOD: { message: "Unauthorized method.", code: 3001 }, UNAUTHORIZED_EVENT: { message: "Unauthorized event.", code: 3002 }, UNAUTHORIZED_UPDATE_REQUEST: { message: "Unauthorized update request.", code: 3003 }, UNAUTHORIZED_EXTEND_REQUEST: { message: "Unauthorized extend request.", code: 3004 }, USER_REJECTED: { message: "User rejected.", code: 5e3 }, USER_REJECTED_CHAINS: { message: "User rejected chains.", code: 5001 }, USER_REJECTED_METHODS: { message: "User rejected methods.", code: 5002 }, USER_REJECTED_EVENTS: { message: "User rejected events.", code: 5003 }, UNSUPPORTED_CHAINS: { message: "Unsupported chains.", code: 5100 }, UNSUPPORTED_METHODS: { message: "Unsupported methods.", code: 5101 }, UNSUPPORTED_EVENTS: { message: "Unsupported events.", code: 5102 }, UNSUPPORTED_ACCOUNTS: { message: "Unsupported accounts.", code: 5103 }, UNSUPPORTED_NAMESPACE_KEY: { message: "Unsupported namespace key.", code: 5104 }, USER_DISCONNECTED: { message: "User disconnected.", code: 6e3 }, SESSION_SETTLEMENT_FAILED: { message: "Session settlement failed.", code: 7e3 }, WC_METHOD_UNSUPPORTED: { message: "Unsupported wc_ method.", code: 10001 } }, Fw = { NOT_INITIALIZED: { message: "Not initialized.", code: 1 }, NO_MATCHING_KEY: { message: "No matching key.", code: 2 }, RESTORE_WILL_OVERRIDE: { message: "Restore will override.", code: 3 }, RESUBSCRIBED: { message: "Resubscribed.", code: 4 }, MISSING_OR_INVALID: { message: "Missing or invalid.", code: 5 }, EXPIRED: { message: "Expired.", code: 6 }, UNKNOWN_TYPE: { message: "Unknown type.", code: 7 }, MISMATCHED_TOPIC: { message: "Mismatched topic.", code: 8 }, NON_CONFORMING_NAMESPACES: { message: "Non conforming namespaces.", code: 9 } };
function J(i, e) {
  const { message: t, code: s } = Fw[i];
  return { message: e ? `${t} ${e}` : t, code: s };
}
function Je(i, e) {
  const { message: t, code: s } = $w[i];
  return { message: e ? `${t} ${e}` : t, code: s };
}
function Ds(i, e) {
  return Array.isArray(i) ? typeof e < "u" && i.length ? i.every(e) : !0 : !1;
}
function us(i) {
  return Object.getPrototypeOf(i) === Object.prototype && Object.keys(i).length;
}
function bt(i) {
  return typeof i > "u";
}
function at(i, e) {
  return e && bt(i) ? !0 : typeof i == "string" && !!i.trim().length;
}
function Pn(i, e) {
  return e && bt(i) ? !0 : typeof i == "number" && !isNaN(i);
}
function Uw(i, e) {
  const { requiredNamespaces: t } = e, s = Object.keys(i.namespaces), r = Object.keys(t);
  let n = !0;
  return Ei(r, s) ? (s.forEach((o) => {
    const { accounts: c, methods: u, events: d } = i.namespaces[o], p = zi(c), w = t[o];
    (!Ei(In(o, w), p) || !Ei(w.methods, u) || !Ei(w.events, d)) && (n = !1);
  }), n) : !1;
}
function Rn(i) {
  return at(i, !1) && i.includes(":") ? i.split(":").length === 2 : !1;
}
function Lw(i) {
  if (at(i, !1) && i.includes(":")) {
    const e = i.split(":");
    if (e.length === 3) {
      const t = e[0] + ":" + e[1];
      return !!e[2] && Rn(t);
    }
  }
  return !1;
}
function Mw(i) {
  if (at(i, !1))
    try {
      return typeof new URL(i) < "u";
    } catch {
      return !1;
    }
  return !1;
}
function qw(i) {
  var e;
  return (e = i?.proposer) == null ? void 0 : e.publicKey;
}
function jw(i) {
  return i?.topic;
}
function zw(i, e) {
  let t = null;
  return at(i?.publicKey, !1) || (t = J("MISSING_OR_INVALID", `${e} controller public key should be a string`)), t;
}
function Sa(i) {
  let e = !0;
  return Ds(i) ? i.length && (e = i.every((t) => at(t, !1))) : e = !1, e;
}
function Kw(i, e, t) {
  let s = null;
  return Ds(e) ? e.forEach((r) => {
    s || (!Rn(r) || !r.includes(i)) && (s = Je("UNSUPPORTED_CHAINS", `${t}, chain ${r} should be a string and conform to "namespace:chainId" format`));
  }) : s = Je("UNSUPPORTED_CHAINS", `${t}, chains ${e} should be an array of strings conforming to "namespace:chainId" format`), s;
}
function Vw(i, e) {
  let t = null;
  return Object.entries(i).forEach(([s, r]) => {
    if (t)
      return;
    const n = Kw(s, In(s, r), `${e} requiredNamespace`);
    n && (t = n);
  }), t;
}
function Bw(i, e) {
  let t = null;
  return Ds(i) ? i.forEach((s) => {
    t || Lw(s) || (t = Je("UNSUPPORTED_ACCOUNTS", `${e}, account ${s} should be a string and conform to "namespace:chainId:address" format`));
  }) : t = Je("UNSUPPORTED_ACCOUNTS", `${e}, accounts should be an array of strings conforming to "namespace:chainId:address" format`), t;
}
function kw(i, e) {
  let t = null;
  return Object.values(i).forEach((s) => {
    if (t)
      return;
    const r = Bw(s?.accounts, `${e} namespace`);
    r && (t = r);
  }), t;
}
function Hw(i, e) {
  let t = null;
  return Sa(i?.methods) ? Sa(i?.events) || (t = Je("UNSUPPORTED_EVENTS", `${e}, events should be an array of strings or empty array for no events`)) : t = Je("UNSUPPORTED_METHODS", `${e}, methods should be an array of strings or empty array for no methods`), t;
}
function Dh(i, e) {
  let t = null;
  return Object.values(i).forEach((s) => {
    if (t)
      return;
    const r = Hw(s, `${e}, namespace`);
    r && (t = r);
  }), t;
}
function Gw(i, e, t) {
  let s = null;
  if (i && us(i)) {
    const r = Dh(i, e);
    r && (s = r);
    const n = Vw(i, e);
    n && (s = n);
  } else
    s = J("MISSING_OR_INVALID", `${e}, ${t} should be an object with data`);
  return s;
}
function Vs(i, e) {
  let t = null;
  if (i && us(i)) {
    const s = Dh(i, e);
    s && (t = s);
    const r = kw(i, e);
    r && (t = r);
  } else
    t = J("MISSING_OR_INVALID", `${e}, namespaces should be an object with data`);
  return t;
}
function xh(i) {
  return at(i.protocol, !0);
}
function Ww(i, e) {
  let t = !1;
  return e && !i ? t = !0 : i && Ds(i) && i.length && i.forEach((s) => {
    t = xh(s);
  }), t;
}
function Yw(i) {
  return typeof i == "number";
}
function It(i) {
  return typeof i < "u" && typeof i !== null;
}
function Jw(i) {
  return !(!i || typeof i != "object" || !i.code || !Pn(i.code, !1) || !i.message || !at(i.message, !1));
}
function Qw(i) {
  return !(bt(i) || !at(i.method, !1));
}
function Xw(i) {
  return !(bt(i) || bt(i.result) && bt(i.error) || !Pn(i.id, !1) || !at(i.jsonrpc, !1));
}
function Zw(i) {
  return !(bt(i) || !at(i.name, !1));
}
function Ia(i, e) {
  return !(!Rn(e) || !Rw(i).includes(e));
}
function eb(i, e, t) {
  return at(t, !1) ? Cw(i, e).includes(t) : !1;
}
function tb(i, e, t) {
  return at(t, !1) ? Aw(i, e).includes(t) : !1;
}
function Da(i, e, t) {
  let s = null;
  const r = ib(i), n = sb(e), o = Object.keys(r), c = Object.keys(n), u = xa(Object.keys(i)), d = xa(Object.keys(e)), p = u.filter((w) => !d.includes(w));
  return p.length && (s = J("NON_CONFORMING_NAMESPACES", `${t} namespaces keys don't satisfy requiredNamespaces.
      Required: ${p.toString()}
      Received: ${Object.keys(e).toString()}`)), Ei(o, c) || (s = J("NON_CONFORMING_NAMESPACES", `${t} namespaces chains don't satisfy required namespaces.
      Required: ${o.toString()}
      Approved: ${c.toString()}`)), Object.keys(e).forEach((w) => {
    if (!w.includes(":") || s)
      return;
    const D = zi(e[w].accounts);
    D.includes(w) || (s = J("NON_CONFORMING_NAMESPACES", `${t} namespaces accounts don't satisfy namespace accounts for ${w}
        Required: ${w}
        Approved: ${D.toString()}`));
  }), o.forEach((w) => {
    s || (Ei(r[w].methods, n[w].methods) ? Ei(r[w].events, n[w].events) || (s = J("NON_CONFORMING_NAMESPACES", `${t} namespaces events don't satisfy namespace events for ${w}`)) : s = J("NON_CONFORMING_NAMESPACES", `${t} namespaces methods don't satisfy namespace methods for ${w}`));
  }), s;
}
function ib(i) {
  const e = {};
  return Object.keys(i).forEach((t) => {
    var s;
    t.includes(":") ? e[t] = i[t] : (s = i[t].chains) == null || s.forEach((r) => {
      e[r] = { methods: i[t].methods, events: i[t].events };
    });
  }), e;
}
function xa(i) {
  return [...new Set(i.map((e) => e.includes(":") ? e.split(":")[0] : e))];
}
function sb(i) {
  const e = {};
  return Object.keys(i).forEach((t) => {
    t.includes(":") ? e[t] = i[t] : zi(i[t].accounts)?.forEach((r) => {
      e[r] = { accounts: i[t].accounts.filter((n) => n.includes(`${r}:`)), methods: i[t].methods, events: i[t].events };
    });
  }), e;
}
function rb(i, e) {
  return Pn(i, !1) && i <= e.max && i >= e.min;
}
function nb(i, e) {
  if (i.length >= 255)
    throw new TypeError("Alphabet too long");
  for (var t = new Uint8Array(256), s = 0; s < t.length; s++)
    t[s] = 255;
  for (var r = 0; r < i.length; r++) {
    var n = i.charAt(r), o = n.charCodeAt(0);
    if (t[o] !== 255)
      throw new TypeError(n + " is ambiguous");
    t[o] = r;
  }
  var c = i.length, u = i.charAt(0), d = Math.log(c) / Math.log(256), p = Math.log(256) / Math.log(c);
  function w(E) {
    if (E instanceof Uint8Array || (ArrayBuffer.isView(E) ? E = new Uint8Array(E.buffer, E.byteOffset, E.byteLength) : Array.isArray(E) && (E = Uint8Array.from(E))), !(E instanceof Uint8Array))
      throw new TypeError("Expected Uint8Array");
    if (E.length === 0)
      return "";
    for (var C = 0, F = 0, K = 0, I = E.length; K !== I && E[K] === 0; )
      K++, C++;
    for (var O = (I - K) * p + 1 >>> 0, y = new Uint8Array(O); K !== I; ) {
      for (var b = E[K], f = 0, a = O - 1; (b !== 0 || f < F) && a !== -1; a--, f++)
        b += 256 * y[a] >>> 0, y[a] = b % c >>> 0, b = b / c >>> 0;
      if (b !== 0)
        throw new Error("Non-zero carry");
      F = f, K++;
    }
    for (var l = O - F; l !== O && y[l] === 0; )
      l++;
    for (var L = u.repeat(C); l < O; ++l)
      L += i.charAt(y[l]);
    return L;
  }
  function D(E) {
    if (typeof E != "string")
      throw new TypeError("Expected String");
    if (E.length === 0)
      return new Uint8Array();
    var C = 0;
    if (E[C] !== " ") {
      for (var F = 0, K = 0; E[C] === u; )
        F++, C++;
      for (var I = (E.length - C) * d + 1 >>> 0, O = new Uint8Array(I); E[C]; ) {
        var y = t[E.charCodeAt(C)];
        if (y === 255)
          return;
        for (var b = 0, f = I - 1; (y !== 0 || b < K) && f !== -1; f--, b++)
          y += c * O[f] >>> 0, O[f] = y % 256 >>> 0, y = y / 256 >>> 0;
        if (y !== 0)
          throw new Error("Non-zero carry");
        K = b, C++;
      }
      if (E[C] !== " ") {
        for (var a = I - K; a !== I && O[a] === 0; )
          a++;
        for (var l = new Uint8Array(F + (I - a)), L = F; a !== I; )
          l[L++] = O[a++];
        return l;
      }
    }
  }
  function x(E) {
    var C = D(E);
    if (C)
      return C;
    throw new Error(`Non-${e} character`);
  }
  return { encode: w, decodeUnsafe: D, decode: x };
}
var ob = nb, ab = ob;
const Oh = (i) => {
  if (i instanceof Uint8Array && i.constructor.name === "Uint8Array")
    return i;
  if (i instanceof ArrayBuffer)
    return new Uint8Array(i);
  if (ArrayBuffer.isView(i))
    return new Uint8Array(i.buffer, i.byteOffset, i.byteLength);
  throw new Error("Unknown type, must be binary type");
}, cb = (i) => new TextEncoder().encode(i), hb = (i) => new TextDecoder().decode(i);
class ub {
  constructor(e, t, s) {
    this.name = e, this.prefix = t, this.baseEncode = s;
  }
  encode(e) {
    if (e instanceof Uint8Array)
      return `${this.prefix}${this.baseEncode(e)}`;
    throw Error("Unknown type, must be binary type");
  }
}
class lb {
  constructor(e, t, s) {
    if (this.name = e, this.prefix = t, t.codePointAt(0) === void 0)
      throw new Error("Invalid prefix character");
    this.prefixCodePoint = t.codePointAt(0), this.baseDecode = s;
  }
  decode(e) {
    if (typeof e == "string") {
      if (e.codePointAt(0) !== this.prefixCodePoint)
        throw Error(`Unable to decode multibase string ${JSON.stringify(e)}, ${this.name} decoder only supports inputs prefixed with ${this.prefix}`);
      return this.baseDecode(e.slice(this.prefix.length));
    } else
      throw Error("Can only multibase decode strings");
  }
  or(e) {
    return Nh(this, e);
  }
}
class db {
  constructor(e) {
    this.decoders = e;
  }
  or(e) {
    return Nh(this, e);
  }
  decode(e) {
    const t = e[0], s = this.decoders[t];
    if (s)
      return s.decode(e);
    throw RangeError(`Unable to decode multibase string ${JSON.stringify(e)}, only inputs prefixed with ${Object.keys(this.decoders)} are supported`);
  }
}
const Nh = (i, e) => new db({ ...i.decoders || { [i.prefix]: i }, ...e.decoders || { [e.prefix]: e } });
class fb {
  constructor(e, t, s, r) {
    this.name = e, this.prefix = t, this.baseEncode = s, this.baseDecode = r, this.encoder = new ub(e, t, s), this.decoder = new lb(e, t, r);
  }
  encode(e) {
    return this.encoder.encode(e);
  }
  decode(e) {
    return this.decoder.decode(e);
  }
}
const dr = ({ name: i, prefix: e, encode: t, decode: s }) => new fb(i, e, t, s), xs = ({ prefix: i, name: e, alphabet: t }) => {
  const { encode: s, decode: r } = ab(t, e);
  return dr({ prefix: i, name: e, encode: s, decode: (n) => Oh(r(n)) });
}, pb = (i, e, t, s) => {
  const r = {};
  for (let p = 0; p < e.length; ++p)
    r[e[p]] = p;
  let n = i.length;
  for (; i[n - 1] === "="; )
    --n;
  const o = new Uint8Array(n * t / 8 | 0);
  let c = 0, u = 0, d = 0;
  for (let p = 0; p < n; ++p) {
    const w = r[i[p]];
    if (w === void 0)
      throw new SyntaxError(`Non-${s} character`);
    u = u << t | w, c += t, c >= 8 && (c -= 8, o[d++] = 255 & u >> c);
  }
  if (c >= t || 255 & u << 8 - c)
    throw new SyntaxError("Unexpected end of data");
  return o;
}, gb = (i, e, t) => {
  const s = e[e.length - 1] === "=", r = (1 << t) - 1;
  let n = "", o = 0, c = 0;
  for (let u = 0; u < i.length; ++u)
    for (c = c << 8 | i[u], o += 8; o > t; )
      o -= t, n += e[r & c >> o];
  if (o && (n += e[r & c << t - o]), s)
    for (; n.length * t & 7; )
      n += "=";
  return n;
}, dt = ({ name: i, prefix: e, bitsPerChar: t, alphabet: s }) => dr({ prefix: e, name: i, encode(r) {
  return gb(r, s, t);
}, decode(r) {
  return pb(r, s, t, i);
} }), yb = dr({ prefix: "\0", name: "identity", encode: (i) => hb(i), decode: (i) => cb(i) });
var mb = Object.freeze({ __proto__: null, identity: yb });
const wb = dt({ prefix: "0", name: "base2", alphabet: "01", bitsPerChar: 1 });
var bb = Object.freeze({ __proto__: null, base2: wb });
const vb = dt({ prefix: "7", name: "base8", alphabet: "01234567", bitsPerChar: 3 });
var _b = Object.freeze({ __proto__: null, base8: vb });
const Eb = xs({ prefix: "9", name: "base10", alphabet: "0123456789" });
var Sb = Object.freeze({ __proto__: null, base10: Eb });
const Ib = dt({ prefix: "f", name: "base16", alphabet: "0123456789abcdef", bitsPerChar: 4 }), Db = dt({ prefix: "F", name: "base16upper", alphabet: "0123456789ABCDEF", bitsPerChar: 4 });
var xb = Object.freeze({ __proto__: null, base16: Ib, base16upper: Db });
const Ob = dt({ prefix: "b", name: "base32", alphabet: "abcdefghijklmnopqrstuvwxyz234567", bitsPerChar: 5 }), Nb = dt({ prefix: "B", name: "base32upper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567", bitsPerChar: 5 }), Pb = dt({ prefix: "c", name: "base32pad", alphabet: "abcdefghijklmnopqrstuvwxyz234567=", bitsPerChar: 5 }), Rb = dt({ prefix: "C", name: "base32padupper", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZ234567=", bitsPerChar: 5 }), Cb = dt({ prefix: "v", name: "base32hex", alphabet: "0123456789abcdefghijklmnopqrstuv", bitsPerChar: 5 }), Ab = dt({ prefix: "V", name: "base32hexupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV", bitsPerChar: 5 }), Tb = dt({ prefix: "t", name: "base32hexpad", alphabet: "0123456789abcdefghijklmnopqrstuv=", bitsPerChar: 5 }), $b = dt({ prefix: "T", name: "base32hexpadupper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUV=", bitsPerChar: 5 }), Fb = dt({ prefix: "h", name: "base32z", alphabet: "ybndrfg8ejkmcpqxot1uwisza345h769", bitsPerChar: 5 });
var Ub = Object.freeze({ __proto__: null, base32: Ob, base32upper: Nb, base32pad: Pb, base32padupper: Rb, base32hex: Cb, base32hexupper: Ab, base32hexpad: Tb, base32hexpadupper: $b, base32z: Fb });
const Lb = xs({ prefix: "k", name: "base36", alphabet: "0123456789abcdefghijklmnopqrstuvwxyz" }), Mb = xs({ prefix: "K", name: "base36upper", alphabet: "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ" });
var qb = Object.freeze({ __proto__: null, base36: Lb, base36upper: Mb });
const jb = xs({ name: "base58btc", prefix: "z", alphabet: "123456789ABCDEFGHJKLMNPQRSTUVWXYZabcdefghijkmnopqrstuvwxyz" }), zb = xs({ name: "base58flickr", prefix: "Z", alphabet: "123456789abcdefghijkmnopqrstuvwxyzABCDEFGHJKLMNPQRSTUVWXYZ" });
var Kb = Object.freeze({ __proto__: null, base58btc: jb, base58flickr: zb });
const Vb = dt({ prefix: "m", name: "base64", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", bitsPerChar: 6 }), Bb = dt({ prefix: "M", name: "base64pad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", bitsPerChar: 6 }), kb = dt({ prefix: "u", name: "base64url", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_", bitsPerChar: 6 }), Hb = dt({ prefix: "U", name: "base64urlpad", alphabet: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789-_=", bitsPerChar: 6 });
var Gb = Object.freeze({ __proto__: null, base64: Vb, base64pad: Bb, base64url: kb, base64urlpad: Hb });
const Ph = Array.from("🚀🪐☄🛰🌌🌑🌒🌓🌔🌕🌖🌗🌘🌍🌏🌎🐉☀💻🖥💾💿😂❤😍🤣😊🙏💕😭😘👍😅👏😁🔥🥰💔💖💙😢🤔😆🙄💪😉☺👌🤗💜😔😎😇🌹🤦🎉💞✌✨🤷😱😌🌸🙌😋💗💚😏💛🙂💓🤩😄😀🖤😃💯🙈👇🎶😒🤭❣😜💋👀😪😑💥🙋😞😩😡🤪👊🥳😥🤤👉💃😳✋😚😝😴🌟😬🙃🍀🌷😻😓⭐✅🥺🌈😈🤘💦✔😣🏃💐☹🎊💘😠☝😕🌺🎂🌻😐🖕💝🙊😹🗣💫💀👑🎵🤞😛🔴😤🌼😫⚽🤙☕🏆🤫👈😮🙆🍻🍃🐶💁😲🌿🧡🎁⚡🌞🎈❌✊👋😰🤨😶🤝🚶💰🍓💢🤟🙁🚨💨🤬✈🎀🍺🤓😙💟🌱😖👶🥴▶➡❓💎💸⬇😨🌚🦋😷🕺⚠🙅😟😵👎🤲🤠🤧📌🔵💅🧐🐾🍒😗🤑🌊🤯🐷☎💧😯💆👆🎤🙇🍑❄🌴💣🐸💌📍🥀🤢👅💡💩👐📸👻🤐🤮🎼🥵🚩🍎🍊👼💍📣🥂"), Wb = Ph.reduce((i, e, t) => (i[t] = e, i), []), Yb = Ph.reduce((i, e, t) => (i[e.codePointAt(0)] = t, i), []);
function Jb(i) {
  return i.reduce((e, t) => (e += Wb[t], e), "");
}
function Qb(i) {
  const e = [];
  for (const t of i) {
    const s = Yb[t.codePointAt(0)];
    if (s === void 0)
      throw new Error(`Non-base256emoji character: ${t}`);
    e.push(s);
  }
  return new Uint8Array(e);
}
const Xb = dr({ prefix: "🚀", name: "base256emoji", encode: Jb, decode: Qb });
var Zb = Object.freeze({ __proto__: null, base256emoji: Xb }), e0 = Rh, Oa = 128, t0 = 127, i0 = ~t0, s0 = Math.pow(2, 31);
function Rh(i, e, t) {
  e = e || [], t = t || 0;
  for (var s = t; i >= s0; )
    e[t++] = i & 255 | Oa, i /= 128;
  for (; i & i0; )
    e[t++] = i & 255 | Oa, i >>>= 7;
  return e[t] = i | 0, Rh.bytes = t - s + 1, e;
}
var r0 = en, n0 = 128, Na = 127;
function en(i, s) {
  var t = 0, s = s || 0, r = 0, n = s, o, c = i.length;
  do {
    if (n >= c)
      throw en.bytes = 0, new RangeError("Could not decode varint");
    o = i[n++], t += r < 28 ? (o & Na) << r : (o & Na) * Math.pow(2, r), r += 7;
  } while (o >= n0);
  return en.bytes = n - s, t;
}
var o0 = Math.pow(2, 7), a0 = Math.pow(2, 14), c0 = Math.pow(2, 21), h0 = Math.pow(2, 28), u0 = Math.pow(2, 35), l0 = Math.pow(2, 42), d0 = Math.pow(2, 49), f0 = Math.pow(2, 56), p0 = Math.pow(2, 63), g0 = function(i) {
  return i < o0 ? 1 : i < a0 ? 2 : i < c0 ? 3 : i < h0 ? 4 : i < u0 ? 5 : i < l0 ? 6 : i < d0 ? 7 : i < f0 ? 8 : i < p0 ? 9 : 10;
}, y0 = { encode: e0, decode: r0, encodingLength: g0 }, Ch = y0;
const Pa = (i, e, t = 0) => (Ch.encode(i, e, t), e), Ra = (i) => Ch.encodingLength(i), tn = (i, e) => {
  const t = e.byteLength, s = Ra(i), r = s + Ra(t), n = new Uint8Array(r + t);
  return Pa(i, n, 0), Pa(t, n, s), n.set(e, r), new m0(i, t, e, n);
};
class m0 {
  constructor(e, t, s, r) {
    this.code = e, this.size = t, this.digest = s, this.bytes = r;
  }
}
const Ah = ({ name: i, code: e, encode: t }) => new w0(i, e, t);
class w0 {
  constructor(e, t, s) {
    this.name = e, this.code = t, this.encode = s;
  }
  digest(e) {
    if (e instanceof Uint8Array) {
      const t = this.encode(e);
      return t instanceof Uint8Array ? tn(this.code, t) : t.then((s) => tn(this.code, s));
    } else
      throw Error("Unknown type, must be binary type");
  }
}
const Th = (i) => async (e) => new Uint8Array(await crypto.subtle.digest(i, e)), b0 = Ah({ name: "sha2-256", code: 18, encode: Th("SHA-256") }), v0 = Ah({ name: "sha2-512", code: 19, encode: Th("SHA-512") });
var _0 = Object.freeze({ __proto__: null, sha256: b0, sha512: v0 });
const $h = 0, E0 = "identity", Fh = Oh, S0 = (i) => tn($h, Fh(i)), I0 = { code: $h, name: E0, encode: Fh, digest: S0 };
var D0 = Object.freeze({ __proto__: null, identity: I0 });
new TextEncoder(), new TextDecoder();
const Ca = { ...mb, ...bb, ..._b, ...Sb, ...xb, ...Ub, ...qb, ...Kb, ...Gb, ...Zb };
({ ..._0, ...D0 });
function Uh(i) {
  return globalThis.Buffer != null ? new Uint8Array(i.buffer, i.byteOffset, i.byteLength) : i;
}
function x0(i = 0) {
  return globalThis.Buffer != null && globalThis.Buffer.allocUnsafe != null ? Uh(globalThis.Buffer.allocUnsafe(i)) : new Uint8Array(i);
}
function Lh(i, e, t, s) {
  return { name: i, prefix: e, encoder: { name: i, prefix: e, encode: t }, decoder: { decode: s } };
}
const Aa = Lh("utf8", "u", (i) => "u" + new TextDecoder("utf8").decode(i), (i) => new TextEncoder().encode(i.substring(1))), Cr = Lh("ascii", "a", (i) => {
  let e = "a";
  for (let t = 0; t < i.length; t++)
    e += String.fromCharCode(i[t]);
  return e;
}, (i) => {
  i = i.substring(1);
  const e = x0(i.length);
  for (let t = 0; t < i.length; t++)
    e[t] = i.charCodeAt(t);
  return e;
}), O0 = { utf8: Aa, "utf-8": Aa, hex: Ca.base16, latin1: Cr, ascii: Cr, binary: Cr, ...Ca };
function N0(i, e = "utf8") {
  const t = O0[e];
  if (!t)
    throw new Error(`Unsupported encoding "${e}"`);
  return (e === "utf8" || e === "utf-8") && globalThis.Buffer != null && globalThis.Buffer.from != null ? Uh(globalThis.Buffer.from(i, "utf-8")) : t.decoder.decode(`${t.prefix}${i}`);
}
const Mh = "wc", P0 = 2, Cn = "core", ui = `${Mh}@2:${Cn}:`, R0 = { name: Cn, logger: "error" }, C0 = { database: ":memory:" }, A0 = "crypto", Ta = "client_ed25519_seed", T0 = V.ONE_DAY, $0 = "keychain", F0 = "0.3", U0 = "messages", L0 = "0.3", M0 = V.SIX_HOURS, q0 = "publisher", qh = "irn", j0 = "error", jh = "wss://relay.walletconnect.com", z0 = "relayer", He = { message: "relayer_message", message_ack: "relayer_message_ack", connect: "relayer_connect", disconnect: "relayer_disconnect", error: "relayer_error", connection_stalled: "relayer_connection_stalled", transport_closed: "relayer_transport_closed", publish: "relayer_publish" }, K0 = "_subscription", is = { payload: "payload", connect: "connect", disconnect: "disconnect", error: "error" }, V0 = V.ONE_SECOND / 2, B0 = "y", k0 = 1e4, H0 = "0.3", Bt = { created: "subscription_created", deleted: "subscription_deleted", expired: "subscription_expired", disabled: "subscription_disabled", sync: "subscription_sync", resubscribed: "subscription_resubscribed" }, G0 = "subscription", W0 = "0.3", Y0 = V.FIVE_SECONDS * 1e3, J0 = "pairing", Q0 = "0.3", ss = { wc_pairingDelete: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1e3 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1001 } }, wc_pairingPing: { req: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1002 }, res: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1003 } }, unregistered_method: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 0 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 0 } } }, Kt = { created: "history_created", updated: "history_updated", deleted: "history_deleted", sync: "history_sync" }, X0 = "history", Z0 = "0.3", ev = "expirer", $t = { created: "expirer_created", deleted: "expirer_deleted", expired: "expirer_expired", sync: "expirer_sync" }, tv = "0.3", Ar = "verify-api", $a = "https://verify.walletconnect.com";
class iv {
  constructor(e, t) {
    this.core = e, this.logger = t, this.keychain = /* @__PURE__ */ new Map(), this.name = $0, this.version = F0, this.initialized = !1, this.storagePrefix = ui, this.init = async () => {
      if (!this.initialized) {
        const s = await this.getKeyChain();
        typeof s < "u" && (this.keychain = s), this.initialized = !0;
      }
    }, this.has = (s) => (this.isInitialized(), this.keychain.has(s)), this.set = async (s, r) => {
      this.isInitialized(), this.keychain.set(s, r), await this.persist();
    }, this.get = (s) => {
      this.isInitialized();
      const r = this.keychain.get(s);
      if (typeof r > "u") {
        const { message: n } = J("NO_MATCHING_KEY", `${this.name}: ${s}`);
        throw new Error(n);
      }
      return r;
    }, this.del = async (s) => {
      this.isInitialized(), this.keychain.delete(s), await this.persist();
    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  async setKeyChain(e) {
    await this.core.storage.setItem(this.storageKey, _h(e));
  }
  async getKeyChain() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? Eh(e) : void 0;
  }
  async persist() {
    await this.setKeyChain(this.keychain);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = J("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}
class sv {
  constructor(e, t, s) {
    this.core = e, this.logger = t, this.name = A0, this.initialized = !1, this.init = async () => {
      this.initialized || (await this.keychain.init(), this.initialized = !0);
    }, this.hasKeys = (r) => (this.isInitialized(), this.keychain.has(r)), this.getClientId = async () => {
      this.isInitialized();
      const r = await this.getClientSeed(), n = Gs(r);
      return an(n.publicKey);
    }, this.generateKeyPair = () => {
      this.isInitialized();
      const r = Xm();
      return this.setPrivateKey(r.publicKey, r.privateKey);
    }, this.signJWT = async (r) => {
      this.isInitialized();
      const n = await this.getClientSeed(), o = Gs(n), c = Xr();
      return await Dc(c, r, T0, o);
    }, this.generateSharedKey = (r, n, o) => {
      this.isInitialized();
      const c = this.getPrivateKey(r), u = Zm(c, n);
      return this.setSymKey(u, o);
    }, this.setSymKey = async (r, n) => {
      this.isInitialized();
      const o = n || ew(r);
      return await this.keychain.set(o, r), o;
    }, this.deleteKeyPair = async (r) => {
      this.isInitialized(), await this.keychain.del(r);
    }, this.deleteSymKey = async (r) => {
      this.isInitialized(), await this.keychain.del(r);
    }, this.encode = async (r, n, o) => {
      this.isInitialized();
      const c = bh(o), u = sr(n);
      if (ma(c)) {
        const D = c.senderPublicKey, x = c.receiverPublicKey;
        r = await this.generateSharedKey(D, x);
      }
      const d = this.getSymKey(r), { type: p, senderPublicKey: w } = c;
      return iw({ type: p, symKey: d, message: u, senderPublicKey: w });
    }, this.decode = async (r, n, o) => {
      this.isInitialized();
      const c = nw(n, o);
      if (ma(c)) {
        const p = c.receiverPublicKey, w = c.senderPublicKey;
        r = await this.generateSharedKey(p, w);
      }
      const u = this.getSymKey(r), d = sw({ symKey: u, encoded: n });
      return rn(d);
    }, this.getPayloadType = (r) => {
      const n = Xs(r);
      return Is(n.type);
    }, this.getPayloadSenderPublicKey = (r) => {
      const n = Xs(r);
      return n.senderPublicKey ? Ne(n.senderPublicKey, _t) : void 0;
    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.keychain = s || new iv(this.core, this.logger);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  async setPrivateKey(e, t) {
    return await this.keychain.set(e, t), e;
  }
  getPrivateKey(e) {
    return this.keychain.get(e);
  }
  async getClientSeed() {
    let e = "";
    try {
      e = this.keychain.get(Ta);
    } catch {
      e = Xr(), await this.keychain.set(Ta, e);
    }
    return N0(e, "base16");
  }
  getSymKey(e) {
    return this.keychain.get(e);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = J("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}
class rv extends $m {
  constructor(e, t) {
    super(e, t), this.logger = e, this.core = t, this.messages = /* @__PURE__ */ new Map(), this.name = U0, this.version = L0, this.initialized = !1, this.storagePrefix = ui, this.init = async () => {
      if (!this.initialized) {
        this.logger.trace("Initialized");
        try {
          const s = await this.getRelayerMessages();
          typeof s < "u" && (this.messages = s), this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", size: this.messages.size });
        } catch (s) {
          this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(s);
        } finally {
          this.initialized = !0;
        }
      }
    }, this.set = async (s, r) => {
      this.isInitialized();
      const n = Ui(r);
      let o = this.messages.get(s);
      return typeof o > "u" && (o = {}), typeof o[n] < "u" || (o[n] = r, this.messages.set(s, o), await this.persist()), n;
    }, this.get = (s) => {
      this.isInitialized();
      let r = this.messages.get(s);
      return typeof r > "u" && (r = {}), r;
    }, this.has = (s, r) => {
      this.isInitialized();
      const n = this.get(s), o = Ui(r);
      return typeof n[o] < "u";
    }, this.del = async (s) => {
      this.isInitialized(), this.messages.delete(s), await this.persist();
    }, this.logger = ee.generateChildLogger(e, this.name), this.core = t;
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  async setRelayerMessages(e) {
    await this.core.storage.setItem(this.storageKey, _h(e));
  }
  async getRelayerMessages() {
    const e = await this.core.storage.getItem(this.storageKey);
    return typeof e < "u" ? Eh(e) : void 0;
  }
  async persist() {
    await this.setRelayerMessages(this.messages);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = J("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}
class nv extends Fm {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, this.events = new We.EventEmitter(), this.name = q0, this.queue = /* @__PURE__ */ new Map(), this.publishTimeout = 1e4, this.publish = async (s, r, n) => {
      this.logger.debug("Publishing Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s, message: r, opts: n } });
      try {
        const o = n?.ttl || M0, c = Zr(n), u = n?.prompt || !1, d = n?.tag || 0, p = n?.id || vn().toString(), w = { topic: s, message: r, opts: { ttl: o, relay: c, prompt: u, tag: d, id: p } };
        this.queue.set(p, w);
        try {
          await await Zs(this.rpcPublish(s, r, o, c, u, d, p), this.publishTimeout), this.relayer.events.emit(He.publish, w);
        } catch {
          this.logger.debug("Publishing Payload stalled"), this.relayer.events.emit(He.connection_stalled);
          return;
        }
        this.logger.debug("Successfully Published Payload"), this.logger.trace({ type: "method", method: "publish", params: { topic: s, message: r, opts: n } });
      } catch (o) {
        throw this.logger.debug("Failed to Publish Payload"), this.logger.error(o), o;
      }
    }, this.on = (s, r) => {
      this.events.on(s, r);
    }, this.once = (s, r) => {
      this.events.once(s, r);
    }, this.off = (s, r) => {
      this.events.off(s, r);
    }, this.removeListener = (s, r) => {
      this.events.removeListener(s, r);
    }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.registerEventListeners();
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  rpcPublish(e, t, s, r, n, o, c) {
    var u, d, p, w;
    const D = { method: Ks(r.protocol).publish, params: { topic: e, message: t, ttl: s, prompt: n, tag: o }, id: c };
    return bt((u = D.params) == null ? void 0 : u.prompt) && ((d = D.params) == null || delete d.prompt), bt((p = D.params) == null ? void 0 : p.tag) && ((w = D.params) == null || delete w.tag), this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "message", direction: "outgoing", request: D }), this.relayer.request(D);
  }
  onPublish(e) {
    this.queue.delete(e);
  }
  checkQueue() {
    this.queue.forEach(async (e) => {
      const { topic: t, message: s, opts: r } = e;
      await this.publish(t, s, r);
    });
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, () => {
      this.checkQueue();
    }), this.relayer.on(He.message_ack, (e) => {
      this.onPublish(e.id.toString());
    });
  }
}
class ov {
  constructor() {
    this.map = /* @__PURE__ */ new Map(), this.set = (e, t) => {
      const s = this.get(e);
      this.exists(e, t) || this.map.set(e, [...s, t]);
    }, this.get = (e) => this.map.get(e) || [], this.exists = (e, t) => this.get(e).includes(t), this.delete = (e, t) => {
      if (typeof t > "u") {
        this.map.delete(e);
        return;
      }
      if (!this.map.has(e))
        return;
      const s = this.get(e);
      if (!this.exists(e, t))
        return;
      const r = s.filter((n) => n !== t);
      if (!r.length) {
        this.map.delete(e);
        return;
      }
      this.map.set(e, r);
    }, this.clear = () => {
      this.map.clear();
    };
  }
  get topics() {
    return Array.from(this.map.keys());
  }
}
var av = Object.defineProperty, cv = Object.defineProperties, hv = Object.getOwnPropertyDescriptors, Fa = Object.getOwnPropertySymbols, uv = Object.prototype.hasOwnProperty, lv = Object.prototype.propertyIsEnumerable, Ua = (i, e, t) => e in i ? av(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, rs = (i, e) => {
  for (var t in e || (e = {}))
    uv.call(e, t) && Ua(i, t, e[t]);
  if (Fa)
    for (var t of Fa(e))
      lv.call(e, t) && Ua(i, t, e[t]);
  return i;
}, Tr = (i, e) => cv(i, hv(e));
class dv extends Mm {
  constructor(e, t) {
    super(e, t), this.relayer = e, this.logger = t, this.subscriptions = /* @__PURE__ */ new Map(), this.topicMap = new ov(), this.events = new We.EventEmitter(), this.name = G0, this.version = W0, this.pending = /* @__PURE__ */ new Map(), this.cached = [], this.initialized = !1, this.pendingSubscriptionWatchLabel = "pending_sub_watch_label", this.pollingInterval = 20, this.storagePrefix = ui, this.subscribeTimeout = 1e4, this.restartInProgress = !1, this.batchSubscribeTopicsLimit = 500, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restart(), this.registerEventListeners(), this.onEnable(), this.clientId = await this.relayer.core.crypto.getClientId());
    }, this.subscribe = async (s, r) => {
      await this.restartToComplete(), this.isInitialized(), this.logger.debug("Subscribing Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s, opts: r } });
      try {
        const n = Zr(r), o = { topic: s, relay: n };
        this.pending.set(s, o);
        const c = await this.rpcSubscribe(s, n);
        return this.onSubscribe(c, o), this.logger.debug("Successfully Subscribed Topic"), this.logger.trace({ type: "method", method: "subscribe", params: { topic: s, opts: r } }), c;
      } catch (n) {
        throw this.logger.debug("Failed to Subscribe Topic"), this.logger.error(n), n;
      }
    }, this.unsubscribe = async (s, r) => {
      await this.restartToComplete(), this.isInitialized(), typeof r?.id < "u" ? await this.unsubscribeById(s, r.id, r) : await this.unsubscribeByTopic(s, r);
    }, this.isSubscribed = async (s) => this.topics.includes(s) ? !0 : await new Promise((r, n) => {
      const o = new V.Watch();
      o.start(this.pendingSubscriptionWatchLabel);
      const c = setInterval(() => {
        !this.pending.has(s) && this.topics.includes(s) && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), r(!0)), o.elapsed(this.pendingSubscriptionWatchLabel) >= Y0 && (clearInterval(c), o.stop(this.pendingSubscriptionWatchLabel), n(new Error("Subscription resolution timeout")));
      }, this.pollingInterval);
    }).catch(() => !1), this.on = (s, r) => {
      this.events.on(s, r);
    }, this.once = (s, r) => {
      this.events.once(s, r);
    }, this.off = (s, r) => {
      this.events.off(s, r);
    }, this.removeListener = (s, r) => {
      this.events.removeListener(s, r);
    }, this.restart = async () => {
      this.restartInProgress = !0, await this.restore(), await this.reset(), this.restartInProgress = !1;
    }, this.relayer = e, this.logger = ee.generateChildLogger(t, this.name), this.clientId = "";
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  get length() {
    return this.subscriptions.size;
  }
  get ids() {
    return Array.from(this.subscriptions.keys());
  }
  get values() {
    return Array.from(this.subscriptions.values());
  }
  get topics() {
    return this.topicMap.topics;
  }
  hasSubscription(e, t) {
    let s = !1;
    try {
      s = this.getSubscription(e).topic === t;
    } catch {
    }
    return s;
  }
  onEnable() {
    this.cached = [], this.initialized = !0;
  }
  onDisable() {
    this.cached = this.values, this.subscriptions.clear(), this.topicMap.clear();
  }
  async unsubscribeByTopic(e, t) {
    const s = this.topicMap.get(e);
    await Promise.all(s.map(async (r) => await this.unsubscribeById(e, r, t)));
  }
  async unsubscribeById(e, t, s) {
    this.logger.debug("Unsubscribing Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: s } });
    try {
      const r = Zr(s);
      await this.rpcUnsubscribe(e, t, r);
      const n = Je("USER_DISCONNECTED", `${this.name}, ${e}`);
      await this.onUnsubscribe(e, t, n), this.logger.debug("Successfully Unsubscribed Topic"), this.logger.trace({ type: "method", method: "unsubscribe", params: { topic: e, id: t, opts: s } });
    } catch (r) {
      throw this.logger.debug("Failed to Unsubscribe Topic"), this.logger.error(r), r;
    }
  }
  async rpcSubscribe(e, t) {
    const s = { method: Ks(t.protocol).subscribe, params: { topic: e } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s });
    try {
      await await Zs(this.relayer.request(s), this.subscribeTimeout);
    } catch {
      this.logger.debug("Outgoing Relay Subscribe Payload stalled"), this.relayer.events.emit(He.connection_stalled);
    }
    return Ui(e + this.clientId);
  }
  async rpcBatchSubscribe(e) {
    if (!e.length)
      return;
    const t = e[0].relay, s = { method: Ks(t.protocol).batchSubscribe, params: { topics: e.map((r) => r.topic) } };
    this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: s });
    try {
      return await await Zs(this.relayer.request(s), this.subscribeTimeout);
    } catch {
      this.logger.debug("Outgoing Relay Payload stalled"), this.relayer.events.emit(He.connection_stalled);
    }
  }
  rpcUnsubscribe(e, t, s) {
    const r = { method: Ks(s.protocol).unsubscribe, params: { topic: e, id: t } };
    return this.logger.debug("Outgoing Relay Payload"), this.logger.trace({ type: "payload", direction: "outgoing", request: r }), this.relayer.request(r);
  }
  onSubscribe(e, t) {
    this.setSubscription(e, Tr(rs({}, t), { id: e })), this.pending.delete(t.topic);
  }
  onBatchSubscribe(e) {
    e.length && e.forEach((t) => {
      this.setSubscription(t.id, rs({}, t)), this.pending.delete(t.topic);
    });
  }
  async onUnsubscribe(e, t, s) {
    this.events.removeAllListeners(t), this.hasSubscription(t, e) && this.deleteSubscription(t, s), await this.relayer.messages.del(e);
  }
  async setRelayerSubscriptions(e) {
    await this.relayer.core.storage.setItem(this.storageKey, e);
  }
  async getRelayerSubscriptions() {
    return await this.relayer.core.storage.getItem(this.storageKey);
  }
  setSubscription(e, t) {
    this.subscriptions.has(e) || (this.logger.debug("Setting subscription"), this.logger.trace({ type: "method", method: "setSubscription", id: e, subscription: t }), this.addSubscription(e, t));
  }
  addSubscription(e, t) {
    this.subscriptions.set(e, rs({}, t)), this.topicMap.set(t.topic, e), this.events.emit(Bt.created, t);
  }
  getSubscription(e) {
    this.logger.debug("Getting subscription"), this.logger.trace({ type: "method", method: "getSubscription", id: e });
    const t = this.subscriptions.get(e);
    if (!t) {
      const { message: s } = J("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(s);
    }
    return t;
  }
  deleteSubscription(e, t) {
    this.logger.debug("Deleting subscription"), this.logger.trace({ type: "method", method: "deleteSubscription", id: e, reason: t });
    const s = this.getSubscription(e);
    this.subscriptions.delete(e), this.topicMap.delete(s.topic, e), this.events.emit(Bt.deleted, Tr(rs({}, s), { reason: t }));
  }
  async persist() {
    await this.setRelayerSubscriptions(this.values), this.events.emit(Bt.sync);
  }
  async reset() {
    if (this.cached.length) {
      const e = Math.ceil(this.cached.length / this.batchSubscribeTopicsLimit);
      for (let t = 0; t < e; t++) {
        const s = this.cached.splice(0, this.batchSubscribeTopicsLimit);
        await this.batchSubscribe(s);
      }
    }
    this.events.emit(Bt.resubscribed);
  }
  async restore() {
    try {
      const e = await this.getRelayerSubscriptions();
      if (typeof e > "u" || !e.length)
        return;
      if (this.subscriptions.size) {
        const { message: t } = J("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), this.logger.error(`${this.name}: ${JSON.stringify(this.values)}`), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored subscriptions for ${this.name}`), this.logger.trace({ type: "method", method: "restore", subscriptions: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore subscriptions for ${this.name}`), this.logger.error(e);
    }
  }
  async batchSubscribe(e) {
    if (!e.length)
      return;
    const t = await this.rpcBatchSubscribe(e);
    Ds(t) && this.onBatchSubscribe(t.map((s, r) => Tr(rs({}, e[r]), { id: s })));
  }
  async onConnect() {
    this.restartInProgress || (await this.restart(), this.onEnable());
  }
  onDisconnect() {
    this.onDisable();
  }
  async checkPending() {
    if (this.relayer.transportExplicitlyClosed)
      return;
    const e = [];
    this.pending.forEach((t) => {
      e.push(t);
    }), await this.batchSubscribe(e);
  }
  registerEventListeners() {
    this.relayer.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, async () => {
      await this.checkPending();
    }), this.relayer.on(He.connect, async () => {
      await this.onConnect();
    }), this.relayer.on(He.disconnect, () => {
      this.onDisconnect();
    }), this.events.on(Bt.created, async (e) => {
      const t = Bt.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), await this.persist();
    }), this.events.on(Bt.deleted, async (e) => {
      const t = Bt.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), await this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = J("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async restartToComplete() {
    this.restartInProgress && await new Promise((e) => {
      const t = setInterval(() => {
        this.restartInProgress || (clearInterval(t), e());
      }, this.pollingInterval);
    });
  }
}
var fv = Object.defineProperty, La = Object.getOwnPropertySymbols, pv = Object.prototype.hasOwnProperty, gv = Object.prototype.propertyIsEnumerable, Ma = (i, e, t) => e in i ? fv(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, yv = (i, e) => {
  for (var t in e || (e = {}))
    pv.call(e, t) && Ma(i, t, e[t]);
  if (La)
    for (var t of La(e))
      gv.call(e, t) && Ma(i, t, e[t]);
  return i;
};
class mv extends Um {
  constructor(e) {
    super(e), this.protocol = "wc", this.version = 2, this.events = new We.EventEmitter(), this.name = z0, this.transportExplicitlyClosed = !1, this.initialized = !1, this.reconnecting = !1, this.connectionStatusPollingInterval = 20, this.staleConnectionErrors = ["socket hang up", "socket stalled"], this.request = async (t) => {
      this.logger.debug("Publishing Request Payload");
      try {
        return await this.toEstablishConnection(), await this.provider.request(t);
      } catch (s) {
        throw this.logger.debug("Failed to Publish Request"), this.logger.error(s), s;
      }
    }, this.core = e.core, this.logger = typeof e.logger < "u" && typeof e.logger != "string" ? ee.generateChildLogger(e.logger, this.name) : ee.pino(ee.getDefaultLoggerOptions({ level: e.logger || j0 })), this.messages = new rv(this.logger, e.core), this.subscriber = new dv(this, this.logger), this.publisher = new nv(this, this.logger), this.relayUrl = e?.relayUrl || jh, this.projectId = e.projectId, this.provider = {};
  }
  async init() {
    this.logger.trace("Initialized"), await this.createProvider(), await Promise.all([this.messages.init(), this.transportOpen(), this.subscriber.init()]), this.registerEventListeners(), this.initialized = !0, setTimeout(async () => {
      this.subscriber.topics.length === 0 && (this.logger.info("No topics subscribted to after init, closing transport"), await this.transportClose(), this.transportExplicitlyClosed = !1);
    }, k0);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get connected() {
    return this.provider.connection.connected;
  }
  get connecting() {
    return this.provider.connection.connecting;
  }
  async publish(e, t, s) {
    this.isInitialized(), await this.publisher.publish(e, t, s), await this.recordMessageEvent({ topic: e, message: t, publishedAt: Date.now() });
  }
  async subscribe(e, t) {
    this.isInitialized();
    let s = "";
    return await Promise.all([new Promise((r) => {
      this.subscriber.once(Bt.created, (n) => {
        n.topic === e && r();
      });
    }), new Promise(async (r) => {
      s = await this.subscriber.subscribe(e, t), r();
    })]), s;
  }
  async unsubscribe(e, t) {
    this.isInitialized(), await this.subscriber.unsubscribe(e, t);
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async transportClose() {
    this.transportExplicitlyClosed = !0, this.connected && (await this.provider.disconnect(), this.events.emit(He.transport_closed));
  }
  async transportOpen(e) {
    if (this.transportExplicitlyClosed = !1, !this.reconnecting) {
      this.relayUrl = e || this.relayUrl, this.reconnecting = !0;
      try {
        await Promise.all([new Promise((t) => {
          this.initialized || t(), this.subscriber.once(Bt.resubscribed, () => {
            t();
          });
        }), await Promise.race([new Promise(async (t, s) => {
          await Zs(this.provider.connect(), 5e3, "socket stalled").catch((r) => s(r)).then(() => t()).finally(() => this.removeListener(He.transport_closed, this.rejectTransportOpen));
        }), new Promise((t) => this.once(He.transport_closed, this.rejectTransportOpen))])]);
      } catch (t) {
        this.logger.error(t);
        const s = t;
        if (!this.isConnectionStalled(s.message))
          throw t;
        this.events.emit(He.transport_closed);
      } finally {
        this.reconnecting = !1;
      }
    }
  }
  async restartTransport(e) {
    this.transportExplicitlyClosed || (this.relayUrl = e || this.relayUrl, this.connected && await Promise.all([new Promise((t) => {
      this.provider.once(is.disconnect, () => {
        t();
      });
    }), this.transportClose()]), await this.createProvider(), await this.transportOpen());
  }
  isConnectionStalled(e) {
    return this.staleConnectionErrors.some((t) => e.includes(t));
  }
  rejectTransportOpen() {
    throw new Error("closeTransport called before connection was established");
  }
  async createProvider() {
    const e = await this.core.crypto.signJWT(this.relayUrl);
    this.provider = new _n(new Yc(mw({ sdkVersion: B0, protocol: this.protocol, version: this.version, relayUrl: this.relayUrl, projectId: this.projectId, auth: e, useOnCloseEvent: !0 }))), this.registerProviderListeners();
  }
  async recordMessageEvent(e) {
    const { topic: t, message: s } = e;
    await this.messages.set(t, s);
  }
  async shouldIgnoreMessageEvent(e) {
    const { topic: t, message: s } = e;
    return await this.subscriber.isSubscribed(t) ? this.messages.has(t, s) : !0;
  }
  async onProviderPayload(e) {
    if (this.logger.debug("Incoming Relay Payload"), this.logger.trace({ type: "payload", direction: "incoming", payload: e }), ji(e)) {
      if (!e.method.endsWith(K0))
        return;
      const t = e.params, { topic: s, message: r, publishedAt: n } = t.data, o = { topic: s, message: r, publishedAt: n };
      this.logger.debug("Emitting Relayer Payload"), this.logger.trace(yv({ type: "event", event: t.id }, o)), this.events.emit(t.id, o), await this.acknowledgePayload(e), await this.onMessageEvent(o);
    } else
      Oi(e) && this.events.emit(He.message_ack, e);
  }
  async onMessageEvent(e) {
    await this.shouldIgnoreMessageEvent(e) || (this.events.emit(He.message, e), await this.recordMessageEvent(e));
  }
  async acknowledgePayload(e) {
    const t = xi(e.id, !0);
    await this.provider.connection.send(t);
  }
  registerProviderListeners() {
    this.provider.on(is.payload, (e) => this.onProviderPayload(e)), this.provider.on(is.connect, () => {
      this.events.emit(He.connect);
    }), this.provider.on(is.disconnect, () => {
      this.onProviderDisconnect();
    }), this.provider.on(is.error, (e) => {
      this.logger.error(e), this.events.emit(He.error, e);
    });
  }
  registerEventListeners() {
    this.events.on(He.connection_stalled, async () => {
      await this.restartTransport();
    });
  }
  onProviderDisconnect() {
    this.events.emit(He.disconnect), this.attemptToReconnect();
  }
  attemptToReconnect() {
    this.transportExplicitlyClosed || setTimeout(async () => {
      await this.restartTransport();
    }, V.toMiliseconds(V0));
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = J("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  async toEstablishConnection() {
    if (!this.connected) {
      if (this.connecting)
        return await new Promise((e) => {
          const t = setInterval(() => {
            this.connected && (clearInterval(t), e());
          }, this.connectionStatusPollingInterval);
        });
      await this.restartTransport();
    }
  }
}
var wv = Object.defineProperty, qa = Object.getOwnPropertySymbols, bv = Object.prototype.hasOwnProperty, vv = Object.prototype.propertyIsEnumerable, ja = (i, e, t) => e in i ? wv(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, za = (i, e) => {
  for (var t in e || (e = {}))
    bv.call(e, t) && ja(i, t, e[t]);
  if (qa)
    for (var t of qa(e))
      vv.call(e, t) && ja(i, t, e[t]);
  return i;
};
class fr extends Lm {
  constructor(e, t, s, r = ui, n = void 0) {
    super(e, t, s, r), this.core = e, this.logger = t, this.name = s, this.map = /* @__PURE__ */ new Map(), this.version = H0, this.cached = [], this.initialized = !1, this.storagePrefix = ui, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((o) => {
        this.getKey && o !== null && !bt(o) ? this.map.set(this.getKey(o), o) : qw(o) ? this.map.set(o.id, o) : jw(o) && this.map.set(o.topic, o);
      }), this.cached = [], this.initialized = !0);
    }, this.set = async (o, c) => {
      this.isInitialized(), this.map.has(o) ? await this.update(o, c) : (this.logger.debug("Setting value"), this.logger.trace({ type: "method", method: "set", key: o, value: c }), this.map.set(o, c), await this.persist());
    }, this.get = (o) => (this.isInitialized(), this.logger.debug("Getting value"), this.logger.trace({ type: "method", method: "get", key: o }), this.getData(o)), this.getAll = (o) => (this.isInitialized(), o ? this.values.filter((c) => Object.keys(o).every((u) => Jc(c[u], o[u]))) : this.values), this.update = async (o, c) => {
      this.isInitialized(), this.logger.debug("Updating value"), this.logger.trace({ type: "method", method: "update", key: o, update: c });
      const u = za(za({}, this.getData(o)), c);
      this.map.set(o, u), await this.persist();
    }, this.delete = async (o, c) => {
      this.isInitialized(), this.map.has(o) && (this.logger.debug("Deleting value"), this.logger.trace({ type: "method", method: "delete", key: o, reason: c }), this.map.delete(o), await this.persist());
    }, this.logger = ee.generateChildLogger(t, this.name), this.storagePrefix = r, this.getKey = n;
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  get length() {
    return this.map.size;
  }
  get keys() {
    return Array.from(this.map.keys());
  }
  get values() {
    return Array.from(this.map.values());
  }
  async setDataStore(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getDataStore() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getData(e) {
    const t = this.map.get(e);
    if (!t) {
      const { message: s } = J("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.error(s), new Error(s);
    }
    return t;
  }
  async persist() {
    await this.setDataStore(this.values);
  }
  async restore() {
    try {
      const e = await this.getDataStore();
      if (typeof e > "u" || !e.length)
        return;
      if (this.map.size) {
        const { message: t } = J("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored value for ${this.name}`), this.logger.trace({ type: "method", method: "restore", value: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore value for ${this.name}`), this.logger.error(e);
    }
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = J("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}
class _v {
  constructor(e, t) {
    this.core = e, this.logger = t, this.name = J0, this.version = Q0, this.events = new tr(), this.initialized = !1, this.storagePrefix = ui, this.ignoredPayloadTypes = [Ni], this.registeredMethods = [], this.init = async () => {
      this.initialized || (await this.pairings.init(), await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.initialized = !0, this.logger.trace("Initialized"));
    }, this.register = ({ methods: s }) => {
      this.isInitialized(), this.registeredMethods = [.../* @__PURE__ */ new Set([...this.registeredMethods, ...s])];
    }, this.create = async () => {
      this.isInitialized();
      const s = Xr(), r = await this.core.crypto.setSymKey(s), n = Ht(V.FIVE_MINUTES), o = { protocol: qh }, c = { topic: r, expiry: n, relay: o, active: !1 }, u = Pw({ protocol: this.core.protocol, version: this.core.version, topic: r, symKey: s, relay: o });
      return await this.pairings.set(r, c), await this.core.relayer.subscribe(r), this.core.expirer.set(r, n), { topic: r, uri: u };
    }, this.pair = async (s) => {
      this.isInitialized(), this.isValidPair(s);
      const { topic: r, symKey: n, relay: o } = xw(s.uri);
      if (this.pairings.keys.includes(r))
        throw new Error(`Pairing already exists: ${r}`);
      if (this.core.crypto.hasKeys(r))
        throw new Error(`Keychain already exists: ${r}`);
      const c = Ht(V.FIVE_MINUTES), u = { topic: r, relay: o, expiry: c, active: !1 };
      return await this.pairings.set(r, u), await this.core.crypto.setSymKey(n, r), await this.core.relayer.subscribe(r, { relay: o }), this.core.expirer.set(r, c), s.activatePairing && await this.activate({ topic: r }), u;
    }, this.activate = async ({ topic: s }) => {
      this.isInitialized();
      const r = Ht(V.THIRTY_DAYS);
      await this.pairings.update(s, { active: !0, expiry: r }), this.core.expirer.set(s, r);
    }, this.ping = async (s) => {
      this.isInitialized(), await this.isValidPing(s);
      const { topic: r } = s;
      if (this.pairings.keys.includes(r)) {
        const n = await this.sendRequest(r, "wc_pairingPing", {}), { done: o, resolve: c, reject: u } = Ti();
        this.events.once(ke("pairing_ping", n), ({ error: d }) => {
          d ? u(d) : c();
        }), await o();
      }
    }, this.updateExpiry = async ({ topic: s, expiry: r }) => {
      this.isInitialized(), await this.pairings.update(s, { expiry: r });
    }, this.updateMetadata = async ({ topic: s, metadata: r }) => {
      this.isInitialized(), await this.pairings.update(s, { peerMetadata: r });
    }, this.getPairings = () => (this.isInitialized(), this.pairings.values), this.disconnect = async (s) => {
      this.isInitialized(), await this.isValidDisconnect(s);
      const { topic: r } = s;
      this.pairings.keys.includes(r) && (await this.sendRequest(r, "wc_pairingDelete", Je("USER_DISCONNECTED")), await this.deletePairing(r));
    }, this.sendRequest = async (s, r, n) => {
      const o = ti(r, n), c = await this.core.crypto.encode(s, o), u = ss[r].req;
      return this.core.history.set(s, o), this.core.relayer.publish(s, c, u), o.id;
    }, this.sendResult = async (s, r, n) => {
      const o = xi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = ss[u.request.method].res;
      await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);
    }, this.sendError = async (s, r, n) => {
      const o = qi(s, n), c = await this.core.crypto.encode(r, o), u = await this.core.history.get(r, s), d = ss[u.request.method] ? ss[u.request.method].res : ss.unregistered_method.res;
      await this.core.relayer.publish(r, c, d), await this.core.history.resolve(o);
    }, this.deletePairing = async (s, r) => {
      await this.core.relayer.unsubscribe(s), await Promise.all([this.pairings.delete(s, Je("USER_DISCONNECTED")), this.core.crypto.deleteSymKey(s), r ? Promise.resolve() : this.core.expirer.del(s)]);
    }, this.cleanup = async () => {
      const s = this.pairings.getAll().filter((r) => ci(r.expiry));
      await Promise.all(s.map((r) => this.deletePairing(r.topic)));
    }, this.onRelayEventRequest = (s) => {
      const { topic: r, payload: n } = s, o = n.method;
      if (this.pairings.keys.includes(r))
        switch (o) {
          case "wc_pairingPing":
            return this.onPairingPingRequest(r, n);
          case "wc_pairingDelete":
            return this.onPairingDeleteRequest(r, n);
          default:
            return this.onUnknownRpcMethodRequest(r, n);
        }
    }, this.onRelayEventResponse = async (s) => {
      const { topic: r, payload: n } = s, o = (await this.core.history.get(r, n.id)).request.method;
      if (this.pairings.keys.includes(r))
        switch (o) {
          case "wc_pairingPing":
            return this.onPairingPingResponse(r, n);
          default:
            return this.onUnknownRpcMethodResponse(o);
        }
    }, this.onPairingPingRequest = async (s, r) => {
      const { id: n } = r;
      try {
        this.isValidPing({ topic: s }), await this.sendResult(n, s, !0), this.events.emit("pairing_ping", { id: n, topic: s });
      } catch (o) {
        await this.sendError(n, s, o), this.logger.error(o);
      }
    }, this.onPairingPingResponse = (s, r) => {
      const { id: n } = r;
      setTimeout(() => {
        ht(r) ? this.events.emit(ke("pairing_ping", n), {}) : Ge(r) && this.events.emit(ke("pairing_ping", n), { error: r.error });
      }, 500);
    }, this.onPairingDeleteRequest = async (s, r) => {
      const { id: n } = r;
      try {
        this.isValidDisconnect({ topic: s }), await this.deletePairing(s), this.events.emit("pairing_delete", { id: n, topic: s });
      } catch (o) {
        await this.sendError(n, s, o), this.logger.error(o);
      }
    }, this.onUnknownRpcMethodRequest = async (s, r) => {
      const { id: n, method: o } = r;
      try {
        if (this.registeredMethods.includes(o))
          return;
        const c = Je("WC_METHOD_UNSUPPORTED", o);
        await this.sendError(n, s, c), this.logger.error(c);
      } catch (c) {
        await this.sendError(n, s, c), this.logger.error(c);
      }
    }, this.onUnknownRpcMethodResponse = (s) => {
      this.registeredMethods.includes(s) || this.logger.error(Je("WC_METHOD_UNSUPPORTED", s));
    }, this.isValidPair = (s) => {
      if (!It(s)) {
        const { message: r } = J("MISSING_OR_INVALID", `pair() params: ${s}`);
        throw new Error(r);
      }
      if (!Mw(s.uri)) {
        const { message: r } = J("MISSING_OR_INVALID", `pair() uri: ${s.uri}`);
        throw new Error(r);
      }
    }, this.isValidPing = async (s) => {
      if (!It(s)) {
        const { message: n } = J("MISSING_OR_INVALID", `ping() params: ${s}`);
        throw new Error(n);
      }
      const { topic: r } = s;
      await this.isValidPairingTopic(r);
    }, this.isValidDisconnect = async (s) => {
      if (!It(s)) {
        const { message: n } = J("MISSING_OR_INVALID", `disconnect() params: ${s}`);
        throw new Error(n);
      }
      const { topic: r } = s;
      await this.isValidPairingTopic(r);
    }, this.isValidPairingTopic = async (s) => {
      if (!at(s, !1)) {
        const { message: r } = J("MISSING_OR_INVALID", `pairing topic should be a string: ${s}`);
        throw new Error(r);
      }
      if (!this.pairings.keys.includes(s)) {
        const { message: r } = J("NO_MATCHING_KEY", `pairing topic doesn't exist: ${s}`);
        throw new Error(r);
      }
      if (ci(this.pairings.get(s).expiry)) {
        await this.deletePairing(s);
        const { message: r } = J("EXPIRED", `pairing topic: ${s}`);
        throw new Error(r);
      }
    }, this.core = e, this.logger = ee.generateChildLogger(t, this.name), this.pairings = new fr(this.core, this.logger, this.name, this.storagePrefix);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = J("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  registerRelayerEvents() {
    this.core.relayer.on(He.message, async (e) => {
      const { topic: t, message: s } = e;
      if (this.ignoredPayloadTypes.includes(this.core.crypto.getPayloadType(s)))
        return;
      const r = await this.core.crypto.decode(t, s);
      ji(r) ? (this.core.history.set(t, r), this.onRelayEventRequest({ topic: t, payload: r })) : Oi(r) && (await this.core.history.resolve(r), this.onRelayEventResponse({ topic: t, payload: r }));
    });
  }
  registerExpirerEvents() {
    this.core.expirer.on($t.expired, async (e) => {
      const { topic: t } = Ih(e.target);
      t && this.pairings.keys.includes(t) && (await this.deletePairing(t, !0), this.events.emit("pairing_expire", { topic: t }));
    });
  }
}
class Ev extends Tm {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, this.records = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = X0, this.version = Z0, this.cached = [], this.initialized = !1, this.storagePrefix = ui, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s) => this.records.set(s.id, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);
    }, this.set = (s, r, n) => {
      if (this.isInitialized(), this.logger.debug("Setting JSON-RPC request history record"), this.logger.trace({ type: "method", method: "set", topic: s, request: r, chainId: n }), this.records.has(r.id))
        return;
      const o = { id: r.id, topic: s, request: { method: r.method, params: r.params || null }, chainId: n };
      this.records.set(o.id, o), this.events.emit(Kt.created, o);
    }, this.resolve = async (s) => {
      if (this.isInitialized(), this.logger.debug("Updating JSON-RPC response history record"), this.logger.trace({ type: "method", method: "update", response: s }), !this.records.has(s.id))
        return;
      const r = await this.getRecord(s.id);
      typeof r.response > "u" && (r.response = Ge(s) ? { error: s.error } : { result: s.result }, this.records.set(r.id, r), this.events.emit(Kt.updated, r));
    }, this.get = async (s, r) => (this.isInitialized(), this.logger.debug("Getting record"), this.logger.trace({ type: "method", method: "get", topic: s, id: r }), await this.getRecord(r)), this.delete = (s, r) => {
      this.isInitialized(), this.logger.debug("Deleting record"), this.logger.trace({ type: "method", method: "delete", id: r }), this.values.forEach((n) => {
        if (n.topic === s) {
          if (typeof r < "u" && n.id !== r)
            return;
          this.records.delete(n.id), this.events.emit(Kt.deleted, n);
        }
      });
    }, this.exists = async (s, r) => (this.isInitialized(), this.records.has(r) ? (await this.getRecord(r)).topic === s : !1), this.on = (s, r) => {
      this.events.on(s, r);
    }, this.once = (s, r) => {
      this.events.once(s, r);
    }, this.off = (s, r) => {
      this.events.off(s, r);
    }, this.removeListener = (s, r) => {
      this.events.removeListener(s, r);
    }, this.logger = ee.generateChildLogger(t, this.name);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  get size() {
    return this.records.size;
  }
  get keys() {
    return Array.from(this.records.keys());
  }
  get values() {
    return Array.from(this.records.values());
  }
  get pending() {
    const e = [];
    return this.values.forEach((t) => {
      if (typeof t.response < "u")
        return;
      const s = { topic: t.topic, request: ti(t.request.method, t.request.params, t.id), chainId: t.chainId };
      return e.push(s);
    }), e;
  }
  async setJsonRpcRecords(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getJsonRpcRecords() {
    return await this.core.storage.getItem(this.storageKey);
  }
  getRecord(e) {
    this.isInitialized();
    const t = this.records.get(e);
    if (!t) {
      const { message: s } = J("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw new Error(s);
    }
    return t;
  }
  async persist() {
    await this.setJsonRpcRecords(this.values), this.events.emit(Kt.sync);
  }
  async restore() {
    try {
      const e = await this.getJsonRpcRecords();
      if (typeof e > "u" || !e.length)
        return;
      if (this.records.size) {
        const { message: t } = J("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored records for ${this.name}`), this.logger.trace({ type: "method", method: "restore", records: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore records for ${this.name}`), this.logger.error(e);
    }
  }
  registerEventListeners() {
    this.events.on(Kt.created, (e) => {
      const t = Kt.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e }), this.persist();
    }), this.events.on(Kt.updated, (e) => {
      const t = Kt.updated;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e }), this.persist();
    }), this.events.on(Kt.deleted, (e) => {
      const t = Kt.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, record: e }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = J("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}
class Sv extends qm {
  constructor(e, t) {
    super(e, t), this.core = e, this.logger = t, this.expirations = /* @__PURE__ */ new Map(), this.events = new We.EventEmitter(), this.name = ev, this.version = tv, this.cached = [], this.initialized = !1, this.storagePrefix = ui, this.init = async () => {
      this.initialized || (this.logger.trace("Initialized"), await this.restore(), this.cached.forEach((s) => this.expirations.set(s.target, s)), this.cached = [], this.registerEventListeners(), this.initialized = !0);
    }, this.has = (s) => {
      try {
        const r = this.formatTarget(s);
        return typeof this.getExpiration(r) < "u";
      } catch {
        return !1;
      }
    }, this.set = (s, r) => {
      this.isInitialized();
      const n = this.formatTarget(s), o = { target: n, expiry: r };
      this.expirations.set(n, o), this.checkExpiry(n, o), this.events.emit($t.created, { target: n, expiration: o });
    }, this.get = (s) => {
      this.isInitialized();
      const r = this.formatTarget(s);
      return this.getExpiration(r);
    }, this.del = (s) => {
      if (this.isInitialized(), this.has(s)) {
        const r = this.formatTarget(s), n = this.getExpiration(r);
        this.expirations.delete(r), this.events.emit($t.deleted, { target: r, expiration: n });
      }
    }, this.on = (s, r) => {
      this.events.on(s, r);
    }, this.once = (s, r) => {
      this.events.once(s, r);
    }, this.off = (s, r) => {
      this.events.off(s, r);
    }, this.removeListener = (s, r) => {
      this.events.removeListener(s, r);
    }, this.logger = ee.generateChildLogger(t, this.name);
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get storageKey() {
    return this.storagePrefix + this.version + "//" + this.name;
  }
  get length() {
    return this.expirations.size;
  }
  get keys() {
    return Array.from(this.expirations.keys());
  }
  get values() {
    return Array.from(this.expirations.values());
  }
  formatTarget(e) {
    if (typeof e == "string")
      return ww(e);
    if (typeof e == "number")
      return bw(e);
    const { message: t } = J("UNKNOWN_TYPE", `Target type: ${typeof e}`);
    throw new Error(t);
  }
  async setExpirations(e) {
    await this.core.storage.setItem(this.storageKey, e);
  }
  async getExpirations() {
    return await this.core.storage.getItem(this.storageKey);
  }
  async persist() {
    await this.setExpirations(this.values), this.events.emit($t.sync);
  }
  async restore() {
    try {
      const e = await this.getExpirations();
      if (typeof e > "u" || !e.length)
        return;
      if (this.expirations.size) {
        const { message: t } = J("RESTORE_WILL_OVERRIDE", this.name);
        throw this.logger.error(t), new Error(t);
      }
      this.cached = e, this.logger.debug(`Successfully Restored expirations for ${this.name}`), this.logger.trace({ type: "method", method: "restore", expirations: this.values });
    } catch (e) {
      this.logger.debug(`Failed to Restore expirations for ${this.name}`), this.logger.error(e);
    }
  }
  getExpiration(e) {
    const t = this.expirations.get(e);
    if (!t) {
      const { message: s } = J("NO_MATCHING_KEY", `${this.name}: ${e}`);
      throw this.logger.error(s), new Error(s);
    }
    return t;
  }
  checkExpiry(e, t) {
    const { expiry: s } = t;
    V.toMiliseconds(s) - Date.now() <= 0 && this.expire(e, t);
  }
  expire(e, t) {
    this.expirations.delete(e), this.events.emit($t.expired, { target: e, expiration: t });
  }
  checkExpirations() {
    this.core.relayer.connected && this.expirations.forEach((e, t) => this.checkExpiry(t, e));
  }
  registerEventListeners() {
    this.core.heartbeat.on(Wt.HEARTBEAT_EVENTS.pulse, () => this.checkExpirations()), this.events.on($t.created, (e) => {
      const t = $t.created;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on($t.expired, (e) => {
      const t = $t.expired;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    }), this.events.on($t.deleted, (e) => {
      const t = $t.deleted;
      this.logger.info(`Emitting ${t}`), this.logger.debug({ type: "event", event: t, data: e }), this.persist();
    });
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = J("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
}
class Iv extends jm {
  constructor(e, t) {
    super(e, t), this.projectId = e, this.logger = t, this.name = Ar, this.initialized = !1, this.init = async (s) => {
      vh() || !Nn() || (this.verifyUrl = s?.verifyUrl || $a, await this.createIframe());
    }, this.register = async (s) => {
      var r;
      this.initialized || await this.init(), this.iframe && ((r = this.iframe.contentWindow) == null || r.postMessage(s.attestationId, this.verifyUrl), this.logger.info(`postMessage sent: ${s.attestationId} ${this.verifyUrl}`));
    }, this.resolve = async (s) => {
      var r;
      if (this.isDevEnv)
        return "";
      this.logger.info(`resolving attestation: ${s.attestationId}`);
      const n = this.startAbortTimer(V.FIVE_SECONDS), o = await fetch(`${this.verifyUrl}/attestation/${s.attestationId}`, { signal: this.abortController.signal });
      return clearTimeout(n), o.status === 200 ? (r = await o.json()) == null ? void 0 : r.origin : "";
    }, this.createIframe = async () => {
      try {
        await Promise.race([new Promise((s, r) => {
          if (document.getElementById(Ar))
            return s();
          const n = document.createElement("iframe");
          n.setAttribute("id", Ar), n.setAttribute("src", `${this.verifyUrl}/${this.projectId}`), n.style.display = "none", n.addEventListener("load", () => {
            this.initialized = !0, s();
          }), n.addEventListener("error", (o) => {
            r(o);
          }), document.body.append(n), this.iframe = n;
        }), new Promise((s) => {
          setTimeout(() => s("iframe load timeout"), V.toMiliseconds(V.ONE_SECOND / 2));
        })]);
      } catch (s) {
        this.logger.error(`Verify iframe failed to load: ${this.verifyUrl}`), this.logger.error(s);
      }
    }, this.logger = ee.generateChildLogger(t, this.name), this.verifyUrl = $a, this.abortController = new AbortController(), this.isDevEnv = On() && process.env.IS_VITEST;
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  startAbortTimer(e) {
    return setTimeout(() => this.abortController.abort(), V.toMiliseconds(e));
  }
}
var Dv = Object.defineProperty, Ka = Object.getOwnPropertySymbols, xv = Object.prototype.hasOwnProperty, Ov = Object.prototype.propertyIsEnumerable, Va = (i, e, t) => e in i ? Dv(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, Ba = (i, e) => {
  for (var t in e || (e = {}))
    xv.call(e, t) && Va(i, t, e[t]);
  if (Ka)
    for (var t of Ka(e))
      Ov.call(e, t) && Va(i, t, e[t]);
  return i;
};
let Nv = class zh extends Am {
  constructor(e) {
    super(e), this.protocol = Mh, this.version = P0, this.name = Cn, this.events = new We.EventEmitter(), this.initialized = !1, this.on = (s, r) => this.events.on(s, r), this.once = (s, r) => this.events.once(s, r), this.off = (s, r) => this.events.off(s, r), this.removeListener = (s, r) => this.events.removeListener(s, r), this.projectId = e?.projectId, this.relayUrl = e?.relayUrl || jh;
    const t = typeof e?.logger < "u" && typeof e?.logger != "string" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({ level: e?.logger || R0.logger }));
    this.logger = ee.generateChildLogger(t, this.name), this.heartbeat = new Wt.HeartBeat(), this.crypto = new sv(this, this.logger, e?.keychain), this.history = new Ev(this, this.logger), this.expirer = new Sv(this, this.logger), this.storage = e != null && e.storage ? e.storage : new oc(Ba(Ba({}, C0), e?.storageOptions)), this.relayer = new mv({ core: this, logger: this.logger, relayUrl: this.relayUrl, projectId: this.projectId }), this.pairing = new _v(this, this.logger), this.verify = new Iv(this.projectId || "", this.logger);
  }
  static async init(e) {
    const t = new zh(e);
    return await t.initialize(), t;
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  async start() {
    this.initialized || await this.initialize();
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.crypto.init(), await this.history.init(), await this.expirer.init(), await this.relayer.init(), await this.heartbeat.init(), await this.pairing.init(), this.initialized = !0, this.logger.info("Core Initialization Success");
    } catch (e) {
      throw this.logger.warn(`Core Initialization Failure at epoch ${Date.now()}`, e), this.logger.error(e.message), e;
    }
  }
};
const Pv = Nv, Kh = "wc", Vh = 2, Bh = "client", An = `${Kh}@${Vh}:${Bh}:`, $r = { name: Bh, logger: "error", controller: !1, relayUrl: "wss://relay.walletconnect.com" }, Rv = "proposal", Cv = "Proposal expired", Av = "session", Ls = V.SEVEN_DAYS, Tv = "engine", ns = { wc_sessionPropose: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1100 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1101 } }, wc_sessionSettle: { req: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1102 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1103 } }, wc_sessionUpdate: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1104 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1105 } }, wc_sessionExtend: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1106 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1107 } }, wc_sessionRequest: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1108 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1109 } }, wc_sessionEvent: { req: { ttl: V.FIVE_MINUTES, prompt: !0, tag: 1110 }, res: { ttl: V.FIVE_MINUTES, prompt: !1, tag: 1111 } }, wc_sessionDelete: { req: { ttl: V.ONE_DAY, prompt: !1, tag: 1112 }, res: { ttl: V.ONE_DAY, prompt: !1, tag: 1113 } }, wc_sessionPing: { req: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1114 }, res: { ttl: V.THIRTY_SECONDS, prompt: !1, tag: 1115 } } }, Fr = { min: V.FIVE_MINUTES, max: V.SEVEN_DAYS }, $v = "request", Fv = ["wc_sessionPropose", "wc_sessionRequest", "wc_authRequest"];
var Uv = Object.defineProperty, Lv = Object.defineProperties, Mv = Object.getOwnPropertyDescriptors, ka = Object.getOwnPropertySymbols, qv = Object.prototype.hasOwnProperty, jv = Object.prototype.propertyIsEnumerable, Ha = (i, e, t) => e in i ? Uv(i, e, { enumerable: !0, configurable: !0, writable: !0, value: t }) : i[e] = t, At = (i, e) => {
  for (var t in e || (e = {}))
    qv.call(e, t) && Ha(i, t, e[t]);
  if (ka)
    for (var t of ka(e))
      jv.call(e, t) && Ha(i, t, e[t]);
  return i;
}, Ur = (i, e) => Lv(i, Mv(e));
class zv extends Km {
  constructor(e) {
    super(e), this.name = Tv, this.events = new tr(), this.initialized = !1, this.ignoredPayloadTypes = [Ni], this.init = async () => {
      this.initialized || (await this.cleanup(), this.registerRelayerEvents(), this.registerExpirerEvents(), this.client.core.pairing.register({ methods: Object.keys(ns) }), this.initialized = !0);
    }, this.connect = async (t) => {
      this.isInitialized();
      const s = Ur(At({}, t), { requiredNamespaces: t.requiredNamespaces || {}, optionalNamespaces: t.optionalNamespaces || {} });
      await this.isValidConnect(s);
      const { pairingTopic: r, requiredNamespaces: n, optionalNamespaces: o, sessionProperties: c, relays: u } = s;
      let d = r, p, w = !1;
      if (d && (w = this.client.core.pairing.pairings.get(d).active), !d || !w) {
        const { topic: O, uri: y } = await this.client.core.pairing.create();
        d = O, p = y;
      }
      const D = await this.client.core.crypto.generateKeyPair(), x = At({ requiredNamespaces: n, optionalNamespaces: o, relays: u ?? [{ protocol: qh }], proposer: { publicKey: D, metadata: this.client.metadata } }, c && { sessionProperties: c }), { reject: E, resolve: C, done: F } = Ti(V.FIVE_MINUTES, Cv);
      if (this.events.once(ke("session_connect"), async ({ error: O, session: y }) => {
        if (O)
          E(O);
        else if (y) {
          y.self.publicKey = D;
          const b = Ur(At({}, y), { requiredNamespaces: y.requiredNamespaces, optionalNamespaces: y.optionalNamespaces });
          await this.client.session.set(y.topic, b), await this.setExpiry(y.topic, y.expiry), d && await this.client.core.pairing.updateMetadata({ topic: d, metadata: y.peer.metadata }), C(b);
        }
      }), !d) {
        const { message: O } = J("NO_MATCHING_KEY", `connect() pairing topic: ${d}`);
        throw new Error(O);
      }
      const K = await this.sendRequest(d, "wc_sessionPropose", x), I = Ht(V.FIVE_MINUTES);
      return await this.setProposal(K, At({ id: K, expiry: I }, x)), { uri: p, approval: F };
    }, this.pair = async (t) => (this.isInitialized(), await this.client.core.pairing.pair(t)), this.approve = async (t) => {
      this.isInitialized(), await this.isValidApprove(t);
      const { id: s, relayProtocol: r, namespaces: n, sessionProperties: o } = t, c = this.client.proposal.get(s);
      let { pairingTopic: u, proposer: d, requiredNamespaces: p, optionalNamespaces: w } = c;
      u = u || "", us(p) || (p = Tw(n, "approve()"));
      const D = await this.client.core.crypto.generateKeyPair(), x = d.publicKey, E = await this.client.core.crypto.generateSharedKey(D, x);
      u && s && (await this.client.core.pairing.updateMetadata({ topic: u, metadata: d.metadata }), await this.sendResult(s, u, { relay: { protocol: r ?? "irn" }, responderPublicKey: D }), await this.client.proposal.delete(s, Je("USER_DISCONNECTED")), await this.client.core.pairing.activate({ topic: u }));
      const C = At({ relay: { protocol: r ?? "irn" }, namespaces: n, requiredNamespaces: p, optionalNamespaces: w, pairingTopic: u, controller: { publicKey: D, metadata: this.client.metadata }, expiry: Ht(Ls) }, o && { sessionProperties: o });
      await this.client.core.relayer.subscribe(E), await this.sendRequest(E, "wc_sessionSettle", C);
      const F = Ur(At({}, C), { topic: E, pairingTopic: u, acknowledged: !1, self: C.controller, peer: { publicKey: d.publicKey, metadata: d.metadata }, controller: D });
      return await this.client.session.set(E, F), await this.setExpiry(E, Ht(Ls)), { topic: E, acknowledged: () => new Promise((K) => setTimeout(() => K(this.client.session.get(E)), 500)) };
    }, this.reject = async (t) => {
      this.isInitialized(), await this.isValidReject(t);
      const { id: s, reason: r } = t, { pairingTopic: n } = this.client.proposal.get(s);
      n && (await this.sendError(s, n, r), await this.client.proposal.delete(s, Je("USER_DISCONNECTED")));
    }, this.update = async (t) => {
      this.isInitialized(), await this.isValidUpdate(t);
      const { topic: s, namespaces: r } = t, n = await this.sendRequest(s, "wc_sessionUpdate", { namespaces: r }), { done: o, resolve: c, reject: u } = Ti();
      return this.events.once(ke("session_update", n), ({ error: d }) => {
        d ? u(d) : c();
      }), await this.client.session.update(s, { namespaces: r }), { acknowledged: o };
    }, this.extend = async (t) => {
      this.isInitialized(), await this.isValidExtend(t);
      const { topic: s } = t, r = await this.sendRequest(s, "wc_sessionExtend", {}), { done: n, resolve: o, reject: c } = Ti();
      return this.events.once(ke("session_extend", r), ({ error: u }) => {
        u ? c(u) : o();
      }), await this.setExpiry(s, Ht(Ls)), { acknowledged: n };
    }, this.request = async (t) => {
      this.isInitialized(), await this.isValidRequest(t);
      const { chainId: s, request: r, topic: n, expiry: o } = t, c = await this.sendRequest(n, "wc_sessionRequest", { request: r, chainId: s }, o), { done: u, resolve: d, reject: p } = Ti(o);
      return this.events.once(ke("session_request", c), ({ error: w, result: D }) => {
        w ? p(w) : d(D);
      }), this.client.events.emit("session_request_sent", { topic: n, request: r, chainId: s, id: c }), await u();
    }, this.respond = async (t) => {
      this.isInitialized(), await this.isValidRespond(t);
      const { topic: s, response: r } = t, { id: n } = r;
      ht(r) ? await this.sendResult(n, s, r.result) : Ge(r) && await this.sendError(n, s, r.error), this.deletePendingSessionRequest(t.response.id, { message: "fulfilled", code: 0 });
    }, this.ping = async (t) => {
      this.isInitialized(), await this.isValidPing(t);
      const { topic: s } = t;
      if (this.client.session.keys.includes(s)) {
        const r = await this.sendRequest(s, "wc_sessionPing", {}), { done: n, resolve: o, reject: c } = Ti();
        this.events.once(ke("session_ping", r), ({ error: u }) => {
          u ? c(u) : o();
        }), await n();
      } else
        this.client.core.pairing.pairings.keys.includes(s) && await this.client.core.pairing.ping({ topic: s });
    }, this.emit = async (t) => {
      this.isInitialized(), await this.isValidEmit(t);
      const { topic: s, event: r, chainId: n } = t;
      await this.sendRequest(s, "wc_sessionEvent", { event: r, chainId: n });
    }, this.disconnect = async (t) => {
      this.isInitialized(), await this.isValidDisconnect(t);
      const { topic: s } = t;
      this.client.session.keys.includes(s) ? (await this.sendRequest(s, "wc_sessionDelete", Je("USER_DISCONNECTED")), await this.deleteSession(s)) : await this.client.core.pairing.disconnect({ topic: s });
    }, this.find = (t) => (this.isInitialized(), this.client.session.getAll().filter((s) => Uw(s, t))), this.getPendingSessionRequests = () => (this.isInitialized(), this.client.pendingRequest.getAll()), this.cleanupDuplicatePairings = async (t) => {
      try {
        const s = this.client.core.pairing.pairings.get(t.pairingTopic), r = this.client.core.pairing.pairings.getAll().filter((n) => {
          var o, c;
          return ((o = n.peerMetadata) == null ? void 0 : o.url) && ((c = n.peerMetadata) == null ? void 0 : c.url) === t.self.metadata.url && n.topic !== s.topic;
        });
        if (r.length === 0)
          return;
        this.client.logger.info(`Cleaning up ${r.length} duplicate pairing(s)`), await Promise.all(r.map((n) => this.client.core.pairing.disconnect({ topic: n.topic }))), this.client.logger.info("Duplicate pairings clean up finished");
      } catch (s) {
        this.client.logger.error(s);
      }
    }, this.deleteSession = async (t, s) => {
      const { self: r } = this.client.session.get(t);
      await this.client.core.relayer.unsubscribe(t), await Promise.all([this.client.session.delete(t, Je("USER_DISCONNECTED")), this.client.core.crypto.deleteKeyPair(r.publicKey), this.client.core.crypto.deleteSymKey(t), s ? Promise.resolve() : this.client.core.expirer.del(t)]);
    }, this.deleteProposal = async (t, s) => {
      await Promise.all([this.client.proposal.delete(t, Je("USER_DISCONNECTED")), s ? Promise.resolve() : this.client.core.expirer.del(t)]);
    }, this.deletePendingSessionRequest = async (t, s, r = !1) => {
      await Promise.all([this.client.pendingRequest.delete(t, s), r ? Promise.resolve() : this.client.core.expirer.del(t)]);
    }, this.setExpiry = async (t, s) => {
      this.client.session.keys.includes(t) && await this.client.session.update(t, { expiry: s }), this.client.core.expirer.set(t, s);
    }, this.setProposal = async (t, s) => {
      await this.client.proposal.set(t, s), this.client.core.expirer.set(t, s.expiry);
    }, this.setPendingSessionRequest = async (t) => {
      const s = ns.wc_sessionRequest.req.ttl, { id: r, topic: n, params: o } = t;
      await this.client.pendingRequest.set(r, { id: r, topic: n, params: o }), s && this.client.core.expirer.set(r, Ht(s));
    }, this.sendRequest = async (t, s, r, n) => {
      const o = ti(s, r);
      if (Nn() && Fv.includes(s)) {
        const d = Ui(JSON.stringify(o));
        await this.client.core.verify.register({ attestationId: d });
      }
      const c = await this.client.core.crypto.encode(t, o), u = ns[s].req;
      return n && (u.ttl = n), this.client.core.history.set(t, o), this.client.core.relayer.publish(t, c, u), o.id;
    }, this.sendResult = async (t, s, r) => {
      const n = xi(t, r), o = await this.client.core.crypto.encode(s, n), c = await this.client.core.history.get(s, t), u = ns[c.request.method].res;
      this.client.core.relayer.publish(s, o, u), await this.client.core.history.resolve(n);
    }, this.sendError = async (t, s, r) => {
      const n = qi(t, r), o = await this.client.core.crypto.encode(s, n), c = await this.client.core.history.get(s, t), u = ns[c.request.method].res;
      this.client.core.relayer.publish(s, o, u), await this.client.core.history.resolve(n);
    }, this.cleanup = async () => {
      const t = [], s = [];
      this.client.session.getAll().forEach((r) => {
        ci(r.expiry) && t.push(r.topic);
      }), this.client.proposal.getAll().forEach((r) => {
        ci(r.expiry) && s.push(r.id);
      }), await Promise.all([...t.map((r) => this.deleteSession(r)), ...s.map((r) => this.deleteProposal(r))]);
    }, this.onRelayEventRequest = (t) => {
      const { topic: s, payload: r } = t, n = r.method;
      switch (n) {
        case "wc_sessionPropose":
          return this.onSessionProposeRequest(s, r);
        case "wc_sessionSettle":
          return this.onSessionSettleRequest(s, r);
        case "wc_sessionUpdate":
          return this.onSessionUpdateRequest(s, r);
        case "wc_sessionExtend":
          return this.onSessionExtendRequest(s, r);
        case "wc_sessionPing":
          return this.onSessionPingRequest(s, r);
        case "wc_sessionDelete":
          return this.onSessionDeleteRequest(s, r);
        case "wc_sessionRequest":
          return this.onSessionRequest(s, r);
        case "wc_sessionEvent":
          return this.onSessionEventRequest(s, r);
        default:
          return this.client.logger.info(`Unsupported request method ${n}`);
      }
    }, this.onRelayEventResponse = async (t) => {
      const { topic: s, payload: r } = t, n = (await this.client.core.history.get(s, r.id)).request.method;
      switch (n) {
        case "wc_sessionPropose":
          return this.onSessionProposeResponse(s, r);
        case "wc_sessionSettle":
          return this.onSessionSettleResponse(s, r);
        case "wc_sessionUpdate":
          return this.onSessionUpdateResponse(s, r);
        case "wc_sessionExtend":
          return this.onSessionExtendResponse(s, r);
        case "wc_sessionPing":
          return this.onSessionPingResponse(s, r);
        case "wc_sessionRequest":
          return this.onSessionRequestResponse(s, r);
        default:
          return this.client.logger.info(`Unsupported response method ${n}`);
      }
    }, this.onSessionProposeRequest = async (t, s) => {
      const { params: r, id: n } = s;
      try {
        this.isValidConnect(At({}, s.params));
        const o = Ht(V.FIVE_MINUTES), c = At({ id: n, pairingTopic: t, expiry: o }, r);
        await this.setProposal(n, c);
        const u = Ui(JSON.stringify(s)), d = await this.getVerifyContext(u, c.proposer.metadata);
        this.client.events.emit("session_proposal", { id: n, params: c, verifyContext: d });
      } catch (o) {
        await this.sendError(n, t, o), this.client.logger.error(o);
      }
    }, this.onSessionProposeResponse = async (t, s) => {
      const { id: r } = s;
      if (ht(s)) {
        const { result: n } = s;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", result: n });
        const o = this.client.proposal.get(r);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", proposal: o });
        const c = o.proposer.publicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", selfPublicKey: c });
        const u = n.responderPublicKey;
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", peerPublicKey: u });
        const d = await this.client.core.crypto.generateSharedKey(c, u);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", sessionTopic: d });
        const p = await this.client.core.relayer.subscribe(d);
        this.client.logger.trace({ type: "method", method: "onSessionProposeResponse", subscriptionId: p }), await this.client.core.pairing.activate({ topic: t });
      } else
        Ge(s) && (await this.client.proposal.delete(r, Je("USER_DISCONNECTED")), this.events.emit(ke("session_connect"), { error: s.error }));
    }, this.onSessionSettleRequest = async (t, s) => {
      const { id: r, params: n } = s;
      try {
        this.isValidSessionSettleRequest(n);
        const { relay: o, controller: c, expiry: u, namespaces: d, requiredNamespaces: p, optionalNamespaces: w, sessionProperties: D, pairingTopic: x } = s.params, E = At({ topic: t, relay: o, expiry: u, namespaces: d, acknowledged: !0, pairingTopic: x, requiredNamespaces: p, optionalNamespaces: w, controller: c.publicKey, self: { publicKey: "", metadata: this.client.metadata }, peer: { publicKey: c.publicKey, metadata: c.metadata } }, D && { sessionProperties: D });
        await this.sendResult(s.id, t, !0), this.events.emit(ke("session_connect"), { session: E }), this.cleanupDuplicatePairings(E);
      } catch (o) {
        await this.sendError(r, t, o), this.client.logger.error(o);
      }
    }, this.onSessionSettleResponse = async (t, s) => {
      const { id: r } = s;
      ht(s) ? (await this.client.session.update(t, { acknowledged: !0 }), this.events.emit(ke("session_approve", r), {})) : Ge(s) && (await this.client.session.delete(t, Je("USER_DISCONNECTED")), this.events.emit(ke("session_approve", r), { error: s.error }));
    }, this.onSessionUpdateRequest = async (t, s) => {
      const { params: r, id: n } = s;
      try {
        this.isValidUpdate(At({ topic: t }, r)), await this.client.session.update(t, { namespaces: r.namespaces }), await this.sendResult(n, t, !0), this.client.events.emit("session_update", { id: n, topic: t, params: r });
      } catch (o) {
        await this.sendError(n, t, o), this.client.logger.error(o);
      }
    }, this.onSessionUpdateResponse = (t, s) => {
      const { id: r } = s;
      ht(s) ? this.events.emit(ke("session_update", r), {}) : Ge(s) && this.events.emit(ke("session_update", r), { error: s.error });
    }, this.onSessionExtendRequest = async (t, s) => {
      const { id: r } = s;
      try {
        this.isValidExtend({ topic: t }), await this.setExpiry(t, Ht(Ls)), await this.sendResult(r, t, !0), this.client.events.emit("session_extend", { id: r, topic: t });
      } catch (n) {
        await this.sendError(r, t, n), this.client.logger.error(n);
      }
    }, this.onSessionExtendResponse = (t, s) => {
      const { id: r } = s;
      ht(s) ? this.events.emit(ke("session_extend", r), {}) : Ge(s) && this.events.emit(ke("session_extend", r), { error: s.error });
    }, this.onSessionPingRequest = async (t, s) => {
      const { id: r } = s;
      try {
        this.isValidPing({ topic: t }), await this.sendResult(r, t, !0), this.client.events.emit("session_ping", { id: r, topic: t });
      } catch (n) {
        await this.sendError(r, t, n), this.client.logger.error(n);
      }
    }, this.onSessionPingResponse = (t, s) => {
      const { id: r } = s;
      setTimeout(() => {
        ht(s) ? this.events.emit(ke("session_ping", r), {}) : Ge(s) && this.events.emit(ke("session_ping", r), { error: s.error });
      }, 500);
    }, this.onSessionDeleteRequest = async (t, s) => {
      const { id: r } = s;
      try {
        this.isValidDisconnect({ topic: t, reason: s.params }), await Promise.all([new Promise((n) => {
          this.client.core.relayer.once(He.publish, async () => {
            n(await this.deleteSession(t));
          });
        }), this.sendResult(r, t, !0)]), this.client.events.emit("session_delete", { id: r, topic: t });
      } catch (n) {
        await this.sendError(r, t, n), this.client.logger.error(n);
      }
    }, this.onSessionRequest = async (t, s) => {
      const { id: r, params: n } = s;
      try {
        this.isValidRequest(At({ topic: t }, n)), await this.setPendingSessionRequest({ id: r, topic: t, params: n });
        const o = Ui(JSON.stringify(s)), c = this.client.session.get(t), u = await this.getVerifyContext(o, c.peer.metadata);
        this.client.events.emit("session_request", { id: r, topic: t, params: n, verifyContext: u });
      } catch (o) {
        await this.sendError(r, t, o), this.client.logger.error(o);
      }
    }, this.onSessionRequestResponse = (t, s) => {
      const { id: r } = s;
      ht(s) ? this.events.emit(ke("session_request", r), { result: s.result }) : Ge(s) && this.events.emit(ke("session_request", r), { error: s.error });
    }, this.onSessionEventRequest = async (t, s) => {
      const { id: r, params: n } = s;
      try {
        this.isValidEmit(At({ topic: t }, n)), this.client.events.emit("session_event", { id: r, topic: t, params: n });
      } catch (o) {
        await this.sendError(r, t, o), this.client.logger.error(o);
      }
    }, this.isValidConnect = async (t) => {
      if (!It(t)) {
        const { message: u } = J("MISSING_OR_INVALID", `connect() params: ${JSON.stringify(t)}`);
        throw new Error(u);
      }
      const { pairingTopic: s, requiredNamespaces: r, optionalNamespaces: n, sessionProperties: o, relays: c } = t;
      if (bt(s) || await this.isValidPairingTopic(s), !Ww(c, !0)) {
        const { message: u } = J("MISSING_OR_INVALID", `connect() relays: ${c}`);
        throw new Error(u);
      }
      !bt(r) && us(r) !== 0 && this.validateNamespaces(r, "requiredNamespaces"), !bt(n) && us(n) !== 0 && this.validateNamespaces(n, "optionalNamespaces"), bt(o) || this.validateSessionProps(o, "sessionProperties");
    }, this.validateNamespaces = (t, s) => {
      const r = Gw(t, "connect()", s);
      if (r)
        throw new Error(r.message);
    }, this.isValidApprove = async (t) => {
      if (!It(t))
        throw new Error(J("MISSING_OR_INVALID", `approve() params: ${t}`).message);
      const { id: s, namespaces: r, relayProtocol: n, sessionProperties: o } = t;
      await this.isValidProposalId(s);
      const c = this.client.proposal.get(s), u = Vs(r, "approve()");
      if (u)
        throw new Error(u.message);
      const d = Da(c.requiredNamespaces, r, "approve()");
      if (d)
        throw new Error(d.message);
      if (!at(n, !0)) {
        const { message: p } = J("MISSING_OR_INVALID", `approve() relayProtocol: ${n}`);
        throw new Error(p);
      }
      bt(o) || this.validateSessionProps(o, "sessionProperties");
    }, this.isValidReject = async (t) => {
      if (!It(t)) {
        const { message: n } = J("MISSING_OR_INVALID", `reject() params: ${t}`);
        throw new Error(n);
      }
      const { id: s, reason: r } = t;
      if (await this.isValidProposalId(s), !Jw(r)) {
        const { message: n } = J("MISSING_OR_INVALID", `reject() reason: ${JSON.stringify(r)}`);
        throw new Error(n);
      }
    }, this.isValidSessionSettleRequest = (t) => {
      if (!It(t)) {
        const { message: d } = J("MISSING_OR_INVALID", `onSessionSettleRequest() params: ${t}`);
        throw new Error(d);
      }
      const { relay: s, controller: r, namespaces: n, expiry: o } = t;
      if (!xh(s)) {
        const { message: d } = J("MISSING_OR_INVALID", "onSessionSettleRequest() relay protocol should be a string");
        throw new Error(d);
      }
      const c = zw(r, "onSessionSettleRequest()");
      if (c)
        throw new Error(c.message);
      const u = Vs(n, "onSessionSettleRequest()");
      if (u)
        throw new Error(u.message);
      if (ci(o)) {
        const { message: d } = J("EXPIRED", "onSessionSettleRequest()");
        throw new Error(d);
      }
    }, this.isValidUpdate = async (t) => {
      if (!It(t)) {
        const { message: u } = J("MISSING_OR_INVALID", `update() params: ${t}`);
        throw new Error(u);
      }
      const { topic: s, namespaces: r } = t;
      await this.isValidSessionTopic(s);
      const n = this.client.session.get(s), o = Vs(r, "update()");
      if (o)
        throw new Error(o.message);
      const c = Da(n.requiredNamespaces, r, "update()");
      if (c)
        throw new Error(c.message);
    }, this.isValidExtend = async (t) => {
      if (!It(t)) {
        const { message: r } = J("MISSING_OR_INVALID", `extend() params: ${t}`);
        throw new Error(r);
      }
      const { topic: s } = t;
      await this.isValidSessionTopic(s);
    }, this.isValidRequest = async (t) => {
      if (!It(t)) {
        const { message: u } = J("MISSING_OR_INVALID", `request() params: ${t}`);
        throw new Error(u);
      }
      const { topic: s, request: r, chainId: n, expiry: o } = t;
      await this.isValidSessionTopic(s);
      const { namespaces: c } = this.client.session.get(s);
      if (!Ia(c, n)) {
        const { message: u } = J("MISSING_OR_INVALID", `request() chainId: ${n}`);
        throw new Error(u);
      }
      if (!Qw(r)) {
        const { message: u } = J("MISSING_OR_INVALID", `request() ${JSON.stringify(r)}`);
        throw new Error(u);
      }
      if (!eb(c, n, r.method)) {
        const { message: u } = J("MISSING_OR_INVALID", `request() method: ${r.method}`);
        throw new Error(u);
      }
      if (o && !rb(o, Fr)) {
        const { message: u } = J("MISSING_OR_INVALID", `request() expiry: ${o}. Expiry must be a number (in seconds) between ${Fr.min} and ${Fr.max}`);
        throw new Error(u);
      }
    }, this.isValidRespond = async (t) => {
      if (!It(t)) {
        const { message: n } = J("MISSING_OR_INVALID", `respond() params: ${t}`);
        throw new Error(n);
      }
      const { topic: s, response: r } = t;
      if (await this.isValidSessionTopic(s), !Xw(r)) {
        const { message: n } = J("MISSING_OR_INVALID", `respond() response: ${JSON.stringify(r)}`);
        throw new Error(n);
      }
    }, this.isValidPing = async (t) => {
      if (!It(t)) {
        const { message: r } = J("MISSING_OR_INVALID", `ping() params: ${t}`);
        throw new Error(r);
      }
      const { topic: s } = t;
      await this.isValidSessionOrPairingTopic(s);
    }, this.isValidEmit = async (t) => {
      if (!It(t)) {
        const { message: c } = J("MISSING_OR_INVALID", `emit() params: ${t}`);
        throw new Error(c);
      }
      const { topic: s, event: r, chainId: n } = t;
      await this.isValidSessionTopic(s);
      const { namespaces: o } = this.client.session.get(s);
      if (!Ia(o, n)) {
        const { message: c } = J("MISSING_OR_INVALID", `emit() chainId: ${n}`);
        throw new Error(c);
      }
      if (!Zw(r)) {
        const { message: c } = J("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(r)}`);
        throw new Error(c);
      }
      if (!tb(o, n, r.name)) {
        const { message: c } = J("MISSING_OR_INVALID", `emit() event: ${JSON.stringify(r)}`);
        throw new Error(c);
      }
    }, this.isValidDisconnect = async (t) => {
      if (!It(t)) {
        const { message: r } = J("MISSING_OR_INVALID", `disconnect() params: ${t}`);
        throw new Error(r);
      }
      const { topic: s } = t;
      await this.isValidSessionOrPairingTopic(s);
    }, this.getVerifyContext = async (t, s) => {
      const r = { verified: { verifyUrl: s.verifyUrl || "", validation: "UNKNOWN", origin: s.url || "" } };
      try {
        const n = await this.client.core.verify.resolve({ attestationId: t, verifyUrl: s.verifyUrl });
        n && (r.verified.origin = n, r.verified.validation = n === s.url ? "VALID" : "INVALID");
      } catch (n) {
        this.client.logger.error(n);
      }
      return this.client.logger.info(`Verify context: ${JSON.stringify(r)}`), r;
    }, this.validateSessionProps = (t, s) => {
      Object.values(t).forEach((r) => {
        if (!at(r, !1)) {
          const { message: n } = J("MISSING_OR_INVALID", `${s} must be in Record<string, string> format. Received: ${JSON.stringify(r)}`);
          throw new Error(n);
        }
      });
    };
  }
  isInitialized() {
    if (!this.initialized) {
      const { message: e } = J("NOT_INITIALIZED", this.name);
      throw new Error(e);
    }
  }
  registerRelayerEvents() {
    this.client.core.relayer.on(He.message, async (e) => {
      const { topic: t, message: s } = e;
      if (this.ignoredPayloadTypes.includes(this.client.core.crypto.getPayloadType(s)))
        return;
      const r = await this.client.core.crypto.decode(t, s);
      ji(r) ? (this.client.core.history.set(t, r), this.onRelayEventRequest({ topic: t, payload: r })) : Oi(r) && (await this.client.core.history.resolve(r), this.onRelayEventResponse({ topic: t, payload: r }));
    });
  }
  registerExpirerEvents() {
    this.client.core.expirer.on($t.expired, async (e) => {
      const { topic: t, id: s } = Ih(e.target);
      if (s && this.client.pendingRequest.keys.includes(s))
        return await this.deletePendingSessionRequest(s, J("EXPIRED"), !0);
      t ? this.client.session.keys.includes(t) && (await this.deleteSession(t, !0), this.client.events.emit("session_expire", { topic: t })) : s && (await this.deleteProposal(s, !0), this.client.events.emit("proposal_expire", { id: s }));
    });
  }
  isValidPairingTopic(e) {
    if (!at(e, !1)) {
      const { message: t } = J("MISSING_OR_INVALID", `pairing topic should be a string: ${e}`);
      throw new Error(t);
    }
    if (!this.client.core.pairing.pairings.keys.includes(e)) {
      const { message: t } = J("NO_MATCHING_KEY", `pairing topic doesn't exist: ${e}`);
      throw new Error(t);
    }
    if (ci(this.client.core.pairing.pairings.get(e).expiry)) {
      const { message: t } = J("EXPIRED", `pairing topic: ${e}`);
      throw new Error(t);
    }
  }
  async isValidSessionTopic(e) {
    if (!at(e, !1)) {
      const { message: t } = J("MISSING_OR_INVALID", `session topic should be a string: ${e}`);
      throw new Error(t);
    }
    if (!this.client.session.keys.includes(e)) {
      const { message: t } = J("NO_MATCHING_KEY", `session topic doesn't exist: ${e}`);
      throw new Error(t);
    }
    if (ci(this.client.session.get(e).expiry)) {
      await this.deleteSession(e);
      const { message: t } = J("EXPIRED", `session topic: ${e}`);
      throw new Error(t);
    }
  }
  async isValidSessionOrPairingTopic(e) {
    if (this.client.session.keys.includes(e))
      await this.isValidSessionTopic(e);
    else if (this.client.core.pairing.pairings.keys.includes(e))
      this.isValidPairingTopic(e);
    else if (at(e, !1)) {
      const { message: t } = J("NO_MATCHING_KEY", `session or pairing topic doesn't exist: ${e}`);
      throw new Error(t);
    } else {
      const { message: t } = J("MISSING_OR_INVALID", `session or pairing topic should be a string: ${e}`);
      throw new Error(t);
    }
  }
  async isValidProposalId(e) {
    if (!Yw(e)) {
      const { message: t } = J("MISSING_OR_INVALID", `proposal id should be a number: ${e}`);
      throw new Error(t);
    }
    if (!this.client.proposal.keys.includes(e)) {
      const { message: t } = J("NO_MATCHING_KEY", `proposal id doesn't exist: ${e}`);
      throw new Error(t);
    }
    if (ci(this.client.proposal.get(e).expiry)) {
      await this.deleteProposal(e);
      const { message: t } = J("EXPIRED", `proposal id: ${e}`);
      throw new Error(t);
    }
  }
}
class Kv extends fr {
  constructor(e, t) {
    super(e, t, Rv, An), this.core = e, this.logger = t;
  }
}
class Vv extends fr {
  constructor(e, t) {
    super(e, t, Av, An), this.core = e, this.logger = t;
  }
}
class Bv extends fr {
  constructor(e, t) {
    super(e, t, $v, An, (s) => s.id), this.core = e, this.logger = t;
  }
}
class Tn extends zm {
  constructor(e) {
    super(e), this.protocol = Kh, this.version = Vh, this.name = $r.name, this.events = new We.EventEmitter(), this.on = (s, r) => this.events.on(s, r), this.once = (s, r) => this.events.once(s, r), this.off = (s, r) => this.events.off(s, r), this.removeListener = (s, r) => this.events.removeListener(s, r), this.removeAllListeners = (s) => this.events.removeAllListeners(s), this.connect = async (s) => {
      try {
        return await this.engine.connect(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.pair = async (s) => {
      try {
        return await this.engine.pair(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.approve = async (s) => {
      try {
        return await this.engine.approve(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.reject = async (s) => {
      try {
        return await this.engine.reject(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.update = async (s) => {
      try {
        return await this.engine.update(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.extend = async (s) => {
      try {
        return await this.engine.extend(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.request = async (s) => {
      try {
        return await this.engine.request(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.respond = async (s) => {
      try {
        return await this.engine.respond(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.ping = async (s) => {
      try {
        return await this.engine.ping(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.emit = async (s) => {
      try {
        return await this.engine.emit(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.disconnect = async (s) => {
      try {
        return await this.engine.disconnect(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.find = (s) => {
      try {
        return this.engine.find(s);
      } catch (r) {
        throw this.logger.error(r.message), r;
      }
    }, this.getPendingSessionRequests = () => {
      try {
        return this.engine.getPendingSessionRequests();
      } catch (s) {
        throw this.logger.error(s.message), s;
      }
    }, this.name = e?.name || $r.name, this.metadata = e?.metadata || fw();
    const t = typeof e?.logger < "u" && typeof e?.logger != "string" ? e.logger : ee.pino(ee.getDefaultLoggerOptions({ level: e?.logger || $r.logger }));
    this.core = e?.core || new Pv(e), this.logger = ee.generateChildLogger(t, this.name), this.session = new Vv(this.core, this.logger), this.proposal = new Kv(this.core, this.logger), this.pendingRequest = new Bv(this.core, this.logger), this.engine = new zv(this);
  }
  static async init(e) {
    const t = new Tn(e);
    return await t.initialize(), t;
  }
  get context() {
    return ee.getLoggerContext(this.logger);
  }
  get pairing() {
    return this.core.pairing.pairings;
  }
  async initialize() {
    this.logger.trace("Initialized");
    try {
      await this.core.start(), await this.session.init(), await this.proposal.init(), await this.pendingRequest.init(), await this.engine.init(), this.core.verify.init({ verifyUrl: this.metadata.verifyUrl }), this.logger.info("SignClient Initialization Success");
    } catch (e) {
      throw this.logger.info("SignClient Initialization Failure"), this.logger.error(e.message), e;
    }
  }
}
function kv(i) {
  return typeof i < "u" && typeof i.context < "u";
}
const Gt = { init: "signer_init", uri: "signer_uri", created: "signer_created", updated: "signer_updated", deleted: "signer_deleted", event: "signer_event" };
class Hv extends Dg {
  constructor(e) {
    super(), this.events = new We.EventEmitter(), this.pending = !1, this.initializing = !1, this.requiredNamespaces = e?.requiredNamespaces || {}, this.opts = e?.client;
  }
  get connected() {
    return typeof this.session < "u";
  }
  get connecting() {
    return this.pending;
  }
  get chains() {
    return this.session ? Ym(this.session.namespaces) : Jm(this.requiredNamespaces);
  }
  get accounts() {
    return this.session ? Wm(this.session.namespaces) : [];
  }
  on(e, t) {
    this.events.on(e, t);
  }
  once(e, t) {
    this.events.once(e, t);
  }
  off(e, t) {
    this.events.off(e, t);
  }
  removeListener(e, t) {
    this.events.removeListener(e, t);
  }
  async open() {
    if (this.pending)
      return new Promise((e, t) => {
        this.events.once("open", () => {
          if (this.events.once("open_error", (s) => {
            t(s);
          }), typeof this.client > "u")
            return t(new Error("Sign Client not initialized"));
          e();
        });
      });
    try {
      this.pending = !0;
      const e = await this.register(), t = e.find({ requiredNamespaces: this.requiredNamespaces });
      if (t.length)
        return this.onOpen(t[0]);
      const { uri: s, approval: r } = await e.connect({ requiredNamespaces: this.requiredNamespaces });
      this.events.emit(Gt.uri, { uri: s }), this.session = await r(), this.events.emit(Gt.created, this.session), this.onOpen();
    } catch (e) {
      throw this.events.emit("open_error", e), e;
    }
  }
  async close() {
    typeof this.session > "u" || (await (await this.register()).disconnect({ topic: this.session.topic, reason: Je("USER_DISCONNECTED") }), this.onClose());
  }
  async send(e, t) {
    if (typeof this.client > "u" && (this.client = await this.register(), this.connected || await this.open()), typeof this.session > "u")
      throw new Error("Signer connection is missing session");
    this.client.request({ topic: this.session.topic, request: e, chainId: t?.chainId }).then((s) => this.events.emit("payload", xi(e.id, s))).catch((s) => this.events.emit("payload", qi(e.id, s.message)));
  }
  async register(e = this.opts) {
    if (typeof this.client < "u")
      return this.client;
    if (this.initializing)
      return new Promise((t, s) => {
        this.events.once("register_error", (r) => {
          s(r);
        }), this.events.once(Gt.init, () => {
          if (typeof this.client > "u")
            return s(new Error("Sign Client not initialized"));
          t(this.client);
        });
      });
    if (kv(e))
      return this.client = e, this.registerEventListeners(), this.client;
    try {
      return this.initializing = !0, this.client = await Tn.init(e), this.initializing = !1, this.registerEventListeners(), this.events.emit(Gt.init), this.client;
    } catch (t) {
      throw this.events.emit("register_error", t), t;
    }
  }
  onOpen(e) {
    this.pending = !1, e && (this.session = e), this.events.emit("open");
  }
  onClose() {
    this.pending = !1, this.client && (this.client = void 0), this.events.emit("close");
  }
  registerEventListeners() {
    typeof this.client < "u" && (this.client.on("session_event", (e) => {
      var t;
      this.session && ((t = this.session) == null ? void 0 : t.topic) !== e.topic || this.events.emit(Gt.event, e.params);
    }), this.client.on("session_update", (e) => {
      var t;
      typeof this.client < "u" && (this.session && ((t = this.session) == null ? void 0 : t.topic) !== e.topic || (this.session = this.client.session.get(e.topic), this.events.emit(Gt.updated, this.session)));
    }), this.client.on("session_delete", (e) => {
      var t;
      this.session && (this.session && ((t = this.session) == null ? void 0 : t.topic) !== e.topic || (this.onClose(), this.events.emit(Gt.deleted, this.session), this.session = void 0));
    }));
  }
}
const kh = ":";
function Gv(i) {
  const { namespace: e, reference: t } = i;
  return [e, t].join(kh);
}
function Wv(i) {
  const [e, t, s] = i.split(kh);
  return { namespace: e, reference: t, address: s };
}
function Yv(i, e) {
  const t = [];
  return i.forEach((s) => {
    const r = e(s);
    t.includes(r) || t.push(r);
  }), t;
}
function Jv(i) {
  const { namespace: e, reference: t } = Wv(i);
  return Gv({ namespace: e, reference: t });
}
function Qv(i) {
  return Yv(i, Jv);
}
function Xv(i, e = []) {
  const t = [];
  return Object.keys(i).forEach((s) => {
    if (e.length && !e.includes(s))
      return;
    const r = i[s];
    t.push(...r.accounts);
  }), t;
}
function Zv(i, e = []) {
  const t = [];
  return Object.keys(i).forEach((s) => {
    if (e.length && !e.includes(s))
      return;
    const r = i[s];
    t.push(...Qv(r.accounts));
  }), t;
}
class e_ {
  constructor() {
    be(this, "accounts", []);
    be(this, "eventEmitter", new We.EventEmitter());
    be(this, "updateSession", (e) => {
      if (!this.isValidSession(e))
        throw console.warn(
          "updateSession incompatible session",
          e,
          "for adapter",
          this.formatChainId(this.chainId)
        ), new Error("Invalid session");
      this.session = e;
      const t = Zv(e.namespaces, [this.namespace]);
      this.setChainIds(t);
      const s = Xv(e.namespaces, [
        this.namespace
      ]);
      this.setAccounts(s);
    });
    be(this, "isValidSession", ({
      namespaces: e,
      requiredNamespaces: t
    }) => {
      const s = this.formatChainId(this.chainId);
      return t ? !!t[this.namespace]?.chains?.includes(s) : !!e?.[this.namespace]?.accounts.some(
        (r) => r.startsWith(s)
      );
    });
  }
  getRequiredNamespaces() {
    const e = [this.formatChainId(this.chainId)];
    return {
      [this.namespace]: { chains: e, methods: this.methods, events: this.events }
    };
  }
  isCompatibleChainId(e) {
    return typeof e == "string" ? e.startsWith(`${this.namespace}:`) : !1;
  }
  setChainIds(e) {
    const s = e.filter((r) => this.isCompatibleChainId(r)).map((r) => this.parseChainId(r)).filter((r) => r !== this.chainId);
    s.length && (this.chainId = s[0], this.eventEmitter.emit("chainChanged", this.chainId));
  }
  setChainId(e) {
    if (this.isCompatibleChainId(e)) {
      const t = this.parseChainId(e);
      this.chainId = t, this.eventEmitter.emit("chainChanged", this.chainId);
    }
  }
  parseAccountId(e) {
    const [t, s, r] = e.split(":");
    return { chainId: `${t}:${s}`, address: r };
  }
  getSignerConnection(e) {
    return new Hv({
      requiredNamespaces: {
        [this.namespace]: {
          chains: this.rpc.chains,
          methods: this.rpc.methods,
          events: this.rpc.events
        }
      },
      client: e
    });
  }
  registerEventListeners() {
    this.rpcProvider.on("connect", () => {
      const { chains: e, accounts: t } = this.signerConnection;
      e?.length && this.setChainIds(e), t?.length && this.setAccounts(t);
    }), this.signerConnection.on(Gt.created, this.updateSession), this.signerConnection.on(Gt.updated, this.updateSession), this.signerConnection.on(Gt.event, (e) => {
      if (!this.rpc.chains.includes(e.chainId))
        return;
      const { event: t } = e;
      t.name === "accountsChanged" ? (this.accounts = t.data, this.eventEmitter.emit("accountsChanged", this.accounts)) : t.name === "chainChanged" ? this.setChainId(t.data) : this.eventEmitter.emit(t.name, t.data);
    }), this.rpcProvider.on("disconnect", () => {
      this.eventEmitter.emit("disconnect");
    });
  }
}
class Ga extends Fu {
  constructor(e, t, s, r) {
    super(e, t, s), this.wallet = r;
  }
  async execute(e, t = void 0, s = {}) {
    return e = Array.isArray(e) ? e : [e], await this.wallet.starknet_requestAddInvokeTransaction({
      accountAddress: this.address,
      executionRequest: { calls: e, abis: t, invocationDetails: s }
    });
  }
  async declare(e, t) {
    throw new Error("Not supported via Argent Login");
  }
  async deployAccount(e, t) {
    throw new Error("Not supported via Argent Login");
  }
}
class t_ {
  constructor(e) {
    this.wallet = e;
  }
  async getPubKey() {
    throw new Error("Not supported via Argent Login");
  }
  async signMessage(e, t) {
    const { signature: s } = await this.wallet.starknet_signTypedData({
      accountAddress: t,
      typedData: e
    });
    return s;
  }
  async signTransaction(e, t, s) {
    throw new Error("Not supported via Argent Login");
  }
  async signDeployAccountTransaction(e) {
    throw new Error("Not supported via Argent Login");
  }
  async signDeclareTransaction(e) {
    throw new Error("Not supported via Argent Login");
  }
}
const i_ = (i) => i.replace(/^SN_/, "SN"), s_ = (i) => i.replace(/^SN/, "SN_");
class r_ extends e_ {
  constructor({ client: t, chainId: s, rpcUrl: r }) {
    super();
    be(this, "id", "argentMobile");
    be(this, "name", "Argent Mobile");
    be(this, "version", "0.1.0");
    be(this, "icon", "");
    be(this, "provider");
    be(this, "signer");
    be(this, "account");
    be(this, "selectedAddress", "");
    // NamespaceAdapter
    be(this, "namespace", "starknet");
    be(this, "methods", [
      "starknet_signTypedData",
      "starknet_requestAddInvokeTransaction"
    ]);
    be(this, "events", ["chainChanged", "accountsChanged"]);
    be(this, "remoteSigner");
    be(this, "signerConnection");
    be(this, "rpcProvider");
    be(this, "chainId");
    be(this, "client");
    be(this, "session");
    be(this, "rpc");
    be(this, "walletRpc");
    be(this, "on", (t, s) => {
      this.eventEmitter.on(t, s);
    });
    be(this, "off", (t, s) => {
      this.eventEmitter.off(t, s);
    });
    if (this.chainId = String(s || "SN_GOERLI"), this.rpc = {
      chains: s ? [this.formatChainId(this.chainId)] : [],
      methods: this.methods,
      events: this.events
    }, this.signerConnection = this.getSignerConnection(t), this.rpcProvider = new _n(this.signerConnection), this.client = t, this.registerEventListeners(), this.walletRpc = new Proxy({}, {
      get: (n, o) => (c) => this.requestWallet({ method: o, params: c })
    }), this.remoteSigner = new t_(this.walletRpc), r)
      this.provider = new Bn({ rpc: { nodeUrl: r } });
    else {
      const n = this.getNetworkName(this.chainId);
      this.provider = new Bn({ sequencer: { network: n } });
    }
    this.account = new Ga(
      this.provider,
      "",
      this.remoteSigner,
      this.walletRpc
    );
  }
  getNetworkName(t) {
    if (t === "SN_GOERLI")
      return Lr.NetworkName.SN_GOERLI;
    if (t === "SN_MAIN")
      return Lr.NetworkName.SN_MAIN;
    throw new Error(`Unknown starknet.js network name for chainId ${t}`);
  }
  // StarknetWindowObject
  async request(t) {
    throw new Error("Not implemented: .request()");
  }
  async enable() {
    return await this.rpcProvider.connect(), this.accounts;
  }
  // eslint-disable-next-line @typescript-eslint/ban-ts-comment
  // @ts-ignore
  get isConnected() {
    return !0;
  }
  async isPreauthorized() {
    throw new Error("Not implemented: .isPreauthorized()");
  }
  async requestWallet(t) {
    if (!this.session)
      throw new Error("No session");
    try {
      const { topic: s } = this.session, r = this.formatChainId(this.chainId);
      kt.showApprovalModal(t);
      const n = await this.client.request({ topic: s, chainId: r, request: t });
      return kt.closeModal("animateSuccess"), n;
    } catch (s) {
      throw kt.closeModal(), s instanceof Error ? new Error(s.message) : new Error("Unknow error on requestWallet");
    }
  }
  // NamespaceAdapter
  get isConnecting() {
    return this.signerConnection.connecting;
  }
  async disable() {
    await this.rpcProvider.disconnect();
  }
  get isWalletConnect() {
    return !0;
  }
  // NamespaceAdapter private methods
  registerEventListeners() {
    super.registerEventListeners(), this.eventEmitter.on("chainChanged", (t) => {
      throw new Error("Not implemented: chainChanged");
    });
  }
  formatChainId(t) {
    return `${this.namespace}:${i_(t)}`;
  }
  parseChainId(t) {
    return s_(t.split(":")[1]);
  }
  setAccounts(t) {
    this.accounts = t.filter(
      (n) => this.parseChainId(this.parseAccountId(n).chainId) === this.chainId
    ).map((n) => this.parseAccountId(n).address);
    const { address: s } = this.parseAccountId(t[0]), r = s.startsWith("0x") ? s : `0x${s}`;
    this.account = new Ga(
      this.provider,
      r,
      this.remoteSigner,
      this.walletRpc
    ), this.eventEmitter.emit("accountsChanged", this.accounts), this.selectedAddress = r;
  }
}
const W_ = async (i) => Pm(i, r_);
export {
  W_ as getStarknetWindowObject
};
